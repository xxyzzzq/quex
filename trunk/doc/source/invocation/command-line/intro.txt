Command Line Options
====================

This section lists the command line options to control the behavior of the
generated lexical analyzer.  Numbers following these options can be either
decimal, without any prefix, hexadecimal with a '0x' prefix or octal with a
'0o' prefix.  

.. cmdoption:: -i, --mode-files file-list
        
        ``file-list`` = list of files of the file containing mode definitions
        (see sections <<sec-practical-modes>>, <<sec-practical-pattern-action-pairs>>, and <<sec-formal-generated-class-mode-handling>>). 
        
        DEFAULT = ``<empty>``

.. cmdoption:: --token-prefix name
    
        ``name`` = Name prefix to prepend to the name
        given in the token-id files. For example, if a token section contains
        the name ``COMPLEX`` and the token-prefix is ``TOKEN\_PRE_``
        then the token-id inside the code will be ``TOKEN_PRE_COMPLEX``. 
        
        DEFAULT = ``QUEX_TKN_``

.. cmdoption:: --token-offset number
        
        ``number`` = Number where the numeric values for the token-ids start
        to count. 
        
        DEFAULT = `10000`

.. cmdoption:: --no-token-queue

        Disables the sending of tokens via a queue. Note, this can be a little
        faster than transmitting tokens via a token queue. 

.. cmdoption:: --token-id-termination number
        
        ``number`` = Token identifier for the event of 'end of token stream'.
        Note, that the termination token id can always be referred to 
        via `__QUEX_TOKEN_ID_TERMINATION`. One does not have to specify it just in order
        to be able to know its value. Consider also the comments on the token for 
        'uninitialized'. 
        
        DEFAULT = ``0`` 

.. cmdoption:: --token-id-uninitialized number
        
        ``number`` = Token identifier of a token that has not yet been
        initialized.  Any token that arrives to the user 'on purpose' should not
        contain this identifier.  It is basically a means for debugging in order
        to check whether tokens slip through due to any erroneous behavior.

        DEFAULT = ``1`` 
        
        This option is close to meaningless under normal conditions. One can always
        refer to the unitiliazed token id via `__QUEX_TOKEN_ID_UNINITIALIZED`. In
        certain cases, though, it might make sense to ensure this id to have a certain
        value. This would be the case, if someone would like to code more than just the
        token id in the token id variable.

.. cmdoption:: --version-id name

       ``name`` = arbitrary name of the version that was generated. This string
        is reported by the `version()` member function of the lexical analyser. 

        DEFAULT = `"0.0.0-pre-release"`

.. cmdoption:: --foreign-token-id-file filename
        
        ``filename`` = Name of the file that contains an alternative definition
        of the numerical values for the token-ids (see also section
        <<sec-formal-macro>>). 
        
        DEFAULT = <empty>

.. cmdoption:: -o, --engine name
        
        ``name`` = Name of the lexical analyser class that is to be created
        inside the namespace`quex`. This name also determines the
        filestem of the output files generated by quex. 
        
        DEFAULT = ``lexer``

.. cmdoption:: --debug

        If provided, then code fragments are created to
        activate the output of every pattern match. Then defining the macro
        `QUEX\_OPTION\_DEBUG\_QUEX\_PATTERN\_MATCHES` activates those printouts in the
        standard error output. Note, that this options produces considerable
        code overhead. DEFAULT = `<disabled>`

.. cmdoption:: --no-mode-transition-check 

        Turns off the mode transition check and makes the engine a little faster.
        During development this option should not be used. But the final lexical
        analyzer should be created with this option set. By default, the
        the mode transition check is enabled.

.. cmdoption:: --no-string-accumulator, --nsacc

        Turns the string accumulator option off. This disables the use of the string 
        accumulator to accumulate lexemes. See class 'quex::Accumulator'.

.. cmdoption:: --post-categorizer

        Turns the post categorizer option on. This allows a 'secondary'
        mapping from lexemes to token ids based on their name. See class
        'quex::PostCategorizer'.

For the support of derivation from the generated lexical analyzer class the
following command line options can be used.

.. cmdoption:: --derived-class name
        
       ``name`` = If specified, the name of the derived class that the user intends to provide
        (see section <<sec-formal-derivation>>). Note, specifying this option
         signalizes that the user wants to derive from the generated class. If this
         is not desired, this option, and the following, have to be left out. 
         
         DEFAULT = <empty>
        
.. cmdoption:: `--derived-class-file` filename
        
        ``filename`` = If specified, the name of the file where the derived class is
        defined.  This option only makes sense in the context of optioin
        --derived-class`. 
        
        DEFAULT = <empty>

.. cmdoption:: `--friend-class` name-list
        
        ``name-list`` = Names of classes that shall be friends of the
        generated lexical analyser. This is to be used, if other classes 
        need to have access to protected or private members of the      
        analyser. It is only to be used by specialists. 
        
        DEFAULT = <empty>

Additionally, there are options for specialists who want to provide their own
token-class:

.. cmdoption:: --token-class name
        
        ``name`` = Name of the token class that the user defined. Note that the 
        token class needs to be specified in namespace quex. 
        
        DEFAULT = ``token``

.. cmdoption:: `--token-class-file` filename:
        
        ``filename`` = Name of file that contains the definition of the
        token class. 
        
        DEFAULT = ``$(QUEX_PATH)/code_base/token``

.. cmdoption:: --odir, --output-dir directory

        ``directory`` = name of the output directory where generated files are 
        to be written.

Even if a non-quex token class is provided, the token-id generator may still 
be useful. By default, it remains in place. The user, however, can specify the
following option to disable it:

.. cmdoption:: --user-token-id-file filename
        
        ``filename`` = Name of file that contains the definition of the
        token-ids and the mapping function from numerical token-ids to
        `std::string` objects, i.e. human readable names. Note, that under
        normal circumstances, the setting of ``--foreign-token-id-file`` 
        is sufficient. There the numeric values of tokens may be defined,
        but no pretty printing or similar features.

        DEFAULT = <disabled>

There may be cases where the characters used to indicate buffer limit needs to
be redefined, because the default value appear in a pattern footnote:[As for
'normal' ASCII or Unicode based lexical analyzers, this would most probably not
be a good design decision. But, when other, alien, non-unicode codings are to
be used, this case is conceivable.].  The following option allows modification
of the buffer limit code:
      
.. cmdoption:: --buffer-limit number

      DEFAULT = ``0x0``

If the trivial end-of-line pre-condition (i.e. the '\$' at the end of a regular
expression) is used, by default quex produces code that runs on both Unix
and DOS-like systems. Practically, this means that it matches against 'newline' 0x0A 
and 'carriage return/newline' 0x0D 0x0A. For the case that the resulting analyzer
only runs on a Unix machine some tiny performance improvements might be achieved
by disabling the 0x0D 0x0A sequence and only triggering on 0x0A. In this case,
the following flag may be specified:

.. cmdoption:: --no-DOS

For unicode support it is essential to allow character conversion. Currently
quex can interact with GNU IConv and IBM's ICU library. For this 
the correspondent library must be installed on your system. On Unix systems, the iconv library
is usually present. If a coding other than ASCII is required, specify the following
options:

.. cmdoption:: --iconv
        
        Enable the use of the iconv library for character stream decoding.
        This is equivalent to defining '-DQUEX_OPTION_ENABLE_ICONV'
        as a compiler flag. Depending on your compiler setup, you might have
        to set the '-liconv' flag explicitly in order to link against the IConv
        library. DEFAULT = `<disabled>` 

.. cmdoption:: --icu
        
        Enable the use of IBM's ICU library for character stream decoding.
        This is equivalent to defining '-DQUEX_OPTION_ENABLE_ICU'
        as a compiler flag. There are a couple of libraries that are required
        for ICU. You can query those using the ICU tool 'icu-config'. A command 
        line call to this tool with '--ldflags' delivers all libraries that need
        to be linked. A typical list is '-lpthread -lm -L/usr/lib -licui18n -licuuc 
        -licudata'. DEFAULT = `<disabled>` 

.. cmdoption:: -b, --bytes-per-ucs-code-point [1, 2, 4, wchar_t]

        With this option the internal representation of character is specified. It 
        determines the bytes per character, which compose the lexeme strings
        and on which the lexical analyzer engine internally operates. The byte number
        should at least suffice to carry the desired input coding space. You can
        only specify ``1`` byte, ``2`` byte or ``4`` byte per character. If ``wchar_t`` is specified
        quex automatically adapts to the correspondent type of the operating
        system environment where the target code is compiled. 
        Use this, if option ``--iconv`` or ``--icu`` is used and you are in 
        doubt. 
        
        DEFAULT = ``2``

.. cmdoption:: --endian  [little, big, <system>]
        
        There are two types of byte ordering for integer number for different CPUs.
        For creating a lexical analyzer engine on the same CPU type as quex runs
        then this option is not required, since quex finds this out by its own.
        If you create an engine for a different plattform, you must know its byte ordering
        scheme, i.e. little endian or big endian, and specify it after `--endian`'. 
        
        DEFAULT=`"<system>"`

For version information pass option `--version`' or `-v`'. The
options `--help` and `-h`' are reserved for requesting a help text. Those
are the options for using quex in the 'normal' mode where it creates
lexical analyzers. However, quex provides some services to query and 
test character sets. If one of those options is called, then quex does not
create a lexical analyzer but responds with some information requested 
by the user. Those options are the following.

.. cmdoption:: --property name

   If ``name`` is specified, then information about the property with the given
   name is displayed. Note, that ``name`` can also be a property alias. If ``name``
   is not specified, then brief information about all available unicode
   properties is displayed.

.. cmdoption:: --set-by-property setting

   For binary properties only the property name has to be specified. All other
   properties require a term of the form ``property-name = value``. Quex then
   displays the set of character that has this particular property.

.. cmdoption:: --set-by-expression expression

   Character set expressions that are ususally specified in ``[: ... :]`` brackets
   can be specified as expression. Quex then displays the set of characters that results
   from it.

.. cmdoption:: --property-match wildcard-expression

   Quex allows the use of wildcards in property values. Using this option allows
   display of the list of values to which the given wildcard expression 
   expands. Example: The wildcard-expression ``Name=*LATIN*`` gives all settings of property ``Name`` that
   contain the string ``LATIN``.

.. cmdoption:: --numeric

   If this option is specified the numeric character codes are displayed rather
   then the utf8 characters.

.. cmdoption:: --intervals

   This option disables the display of single character or single character codes.
   In this case sets of adjacent characters are displayed as intervals. This provides
   a somewhat more abbreviated display.

Additionally, quex provides the ability to display transition diagrams of
produced state machines graphically. The following command line options support
this feature:

.. cmdoption:: --plot graphic-format

        Runs quex in the plotting mode. Rather than producing source code, quex
        produces transition diagrams of the defined modes. For querying possible graphic
        formats, run quex with the ``--plot-format-list`` command line option.
        Note, for this option to work, the graphviz package needs to be installed 
        (see www.graphviz.org).

.. cmdoption:: --plot-format-list

        Lists all possible graphic formats for which quex can produce transition
        graphs.

