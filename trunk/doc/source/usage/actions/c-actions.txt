C/C++ Code Segments
===================

Alternatively to the convenient definition of actions in terms of token sending
and mode transition, more sophisticated behavior can be specified by inserting
directly code fragments as pattern-actions or event handlers. The syntax for 
such definitions is simply to enclose them in curly brackets as in the following
example 

.. code-block:: cpp

    mode SOMETHING {
        ...

        {P_STRING_DELIMITER} {
            self << STRING_READER; 
            self.send(QUEX_TKN_EVENT_MODE_CHANGE);
            return;
        }

        ...

        [a-z]+ {
            self.send(QUEX_TKN_IDENTIFIER, Lexeme);
            self.allow_opening_indentation_f = true;
            return;
        }
    }

The patterns ``P_IF_KEYWORD`` and ``P_STRING_DELIMITER`` are supposed to be
defined in a ``define`` section. The functions used in this example are
subsequently explained. The lexical analyzer object can be accessed via

.. data:: self

   which is a reference to the analyzer inside pattern actions and event handlers.

The are member functions starting with ``send``. They work similar to the brackets
in the previous token senders. The first argument is the token-id and the
remaining arguments are arguments as they are passed to the constructor of the
token class. In particular they are the following:

.. cfunction:: .send(QUEX_TYPE_TOKEN_ID)

    Which sends one token to the caller of the lexical analyzer with the given 
    token-id.

.. cfunction:: .send_n(size_t N, QUEX_TYPE_TOKEN_ID)

    Sends a token with the given token-id ``N`` times.

.. cfunction:: .send(QUEX_TYPE_TOKEN_ID, ContentT)

    This is a templated function. It calls the ``.set`` function of the token
    class that corresponds the type ``ContentT``. For example::

        [a-z]+ {
             ...
             self.send(TKN_IDENTIFIER, Lexeme);
        }

    sends a token with the id ``TKN_IDENTIFIER`` and the content of the current
    lexeme to the caller of the lexical analyzer.


Modes can be switched with the ``<<``-operator, as shown in the example, or
``enter_mode``. For example

.. code-block:: cpp

        {P_STRING_DELIMITER} {
            self.enter_mode(STRING_READER); 
            return;
        }

causes a mode transition to the ``STRING_READER`` mode as soon as a string
delimiter arrives.

.. warning::

   As long as the default token policy (See section :ref:`sec-token-policies`)
   is used all token sending functions are available and can be used without a
   lot of caution. The same is true for token policies that are queue based.
   The token policy ``users_token``, though, allows only *one single* token to
   be sent for a pattern match. With this token policy no tokens can be sent
   inside event handlers and the ``send_n()`` is not implemented.
