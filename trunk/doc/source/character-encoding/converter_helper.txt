
Converter Helper Functions
--------------------------

The lexical analyzer engine generated by quex runs on a buffer that has 
potentially a different coding than what the user actually requires. 
When using converters (see :ref:`sec-converters`) the internal engine
runs on Unicode characters. When the internal engine is designed using
``--codec`` then the buffer is coded in some dedicated character encoding.
The ``Lexeme`` that is presented to the user has exactly the coding
of the internal buffer. Precisely, it is a chain of ``QUEX_TYPE_CHARACTER``
objects that are encoded in the buffer's character encoding. Note, that
the following discussion is most likely pointless, if the analyzer 
runs on plain ASCII files.

At least for debugging, a strange character coding might not be suitable for
display on the debug terminal. When analyzers are to be plugged into larger
software, it is likely that this software frame does not understand the very
special character encoding.  To help out with this, quex by itself provides
converter helpers that convert the engine's codec into UTF8 and ``wchar_t``.
Most terminals understand UTF8 and modern software frameworks are coded 
relying on the wide character type ``wchar_t``. The conversion functions
for C++ are 

.. code-block:: cpp

    std::string   QUEX_NAME(CODEC_to_utf8_string)(Input);
    std::wstring  QUEX_NAME(CODEC_to_wstring)(Input);

The name ``CODEC`` represents the name of the buffer's codec. It is ``unicode``
in case of converters, or whenever the buffer's codec is normal unicode (i.e.
also when it is ASCII). For ISO8859-7, it is ``iso8859_7``
Both functions reside in the analyzer's namespace (by default ``::quex``).  The
type of argument ``Input`` is

.. code-block:: cpp

   const std::basic_string<QUEX_TYPE_CHARACTER>&

For more low level string manipulation, and for plain C usage, the following 
interfaces are provided:

.. code-block:: cpp

    void QUEX_NAME(CODEC_to_utf8_string)(const QUEX_TYPE_CHARACTER**  source_pp, 
                                         const QUEX_TYPE_CHARACTER*   SourceEnd, 
                                         uint8_t**                    drain_pp,  
                                         const uint8_t*               DrainEnd);
    void QUEX_NAME(CODEC_to_wstring)(const QUEX_TYPE_CHARACTER**  source_pp, 
                                     const QUEX_TYPE_CHARACTER*   SourceEnd, 
                                     wchar_t**                    drain_pp,  
                                     const wchar_t*               DrainEnd);

When the command line option ``--codec`` is used, quex automatically generates
a set of converters that may be used to convert strings of the given codec to
unicode characters. The converters are located in a header file named::

   MyEngine-converter-MyCodec
  
where ``MyEngine`` is the engine name as passed via command line option ``-o``
and ``MyCodec`` is the name of the codec as passed via command line option
``--codec``. 

The following functions allow to convert a single character from the specified
coding to UTF8, UTF16, UCS2, and UCS4:

.. code-block:: cpp

    QUEX_INLINE uint8_t*
    Quex_MyCodec_to_utf8(QUEX_TYPE_CHARACTER input, uint8_t* output);

    QUEX_INLINE uint32_t
    Quex_MyCodec_to_ucs4(QUEX_TYPE_CHARACTER input);

    QUEX_INLINE uint16_t*
    Quex_MyCodec_to_utf16(QUEX_TYPE_CHARACTER input, uint16_t* p);

    QUEX_INLINE uint16_t
    Quex_MyCodec_to_ucs2(QUEX_TYPE_CHARACTER input);

The first two functions return the incremented output pointer. This is so, since
the number of generated bytes depend on the given ``input`` character code. Using
the returned value repeatedly allows to fill a buffer step by step. The last
two functions provide character codes of fixed size encodings. Thus they simply
communicate the converter character code via the return value. A whole string
can be converted via the following functions:

.. code-block:: cpp

    QUEX_INLINE uint8_t*
    Quex_MyCodec_to_utf8_string(QUEX_TYPE_CHARACTER* Source, 
                                  size_t SourceSize, uint8_t *Drain, size_t DrainSize);

    QUEX_INLINE uint16_t*
    Quex_MyCodec_to_utf16_string(QUEX_TYPE_CHARACTER* Source, size_t SourceSize, 
                                   uint16_t *Drain, size_t DrainSize);

    QUEX_INLINE uint16_t*
    Quex_MyCodec_to_ucs2_string(QUEX_TYPE_CHARACTER* Source, size_t SourceSize, 
                                  uint16_t *Drain, size_t DrainSize);

    QUEX_INLINE uint32_t*
    Quex_MyCodec_to_ucs4_string(QUEX_TYPE_CHARACTER* Source, size_t SourceSize, 
                                  uint32_t *Drain, size_t DrainSize);


The functions are designed for streaming. They return the end of the filled drain 
region, so that it can be used for the next call to the converter. Standard C++
library strings can be converted using the following function set.

.. code-block:: cpp

    QUEX_INLINE std::string
    Quex_MyCodec_to_utf8_string(const std::basic_string<QUEX_TYPE_CHARACTER>& Source);

    QUEX_INLINE std::basic_string<uint16_t>
    Quex_MyCodec_to_utf16_string(const std::basic_string<QUEX_TYPE_CHARACTER>& Source);

    QUEX_INLINE std::basic_string<uint16_t>
    Quex_MyCodec_to_ucs2_string(const std::basic_string<QUEX_TYPE_CHARACTER>& Source);

    QUEX_INLINE std::basic_string<uint32_t>
    Quex_MyCodec_to_ucs4_string(const std::basic_string<QUEX_TYPE_CHARACTER>& Source);

