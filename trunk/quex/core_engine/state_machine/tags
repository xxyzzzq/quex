!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
DEBUG_print	core.py	/^        def DEBUG_print(elementary_trigger_list):$/;"	m	class:StateMachine
EpsilonTransition	core.py	/^class EpsilonTransition:$/;"	c
SetRecorder	OLD/NFA-_to_DFA-old-approach.py	/^    class SetRecorder:$/;"	c
StateInfo	core.py	/^class StateInfo:$/;"	c
StateMachine	core.py	/^class StateMachine:$/;"	c
StateOriginInfo	core.py	/^class StateOriginInfo:$/;"	c
SubsetCombinator	OLD/NFA-_to_DFA-old-approach.py	/^class SubsetCombinator:$/;"	c
Transition	core.py	/^class Transition:$/;"	c
X	TEST/MISC/python-bug/core.py	/^class X:$/;"	c
__add_optional_free_pass	parallelize.py	/^    def __add_optional_free_pass(result_state_machine,$/;"	f	file:
__check_state_combination_consistency	OLD/NFA_to_DFA-old-stuff.py	/^def __check_state_combination_consistency(combination):$/;"	f	file:
__get_code	core.py	/^    def __get_code(self, TriggerMap, Language, NoIndentF = False):$/;"	f	file:
__increment_cursor	OLD/NFA-_to_DFA-old-approach.py	/^    def __increment_cursor(self):$/;"	m	class:SubsetCombinator	file:
__init__	OLD/NFA-_to_DFA-old-approach.py	/^        def __init__(self):$/;"	m	class:SetRecorder
__init__	OLD/NFA-_to_DFA-old-approach.py	/^    def __init__(self, IndexList):$/;"	m	class:SubsetCombinator
__init__	TEST/HWUT.py	/^    def __init__(self, FileName, SectionTitle, Title):$/;"	m	class:test_program
__init__	TEST/MISC/python-bug/core.py	/^	def __init__(self):$/;"	m	class:X
__init__	core.py	/^    	    def __init__(self, Position, ChangeF, TargetIdx):$/;"	m	class:history_item
__init__	core.py	/^    def __init__(self):$/;"	m	class:EpsilonTransition
__init__	core.py	/^    def __init__(self, AcceptanceF=False):$/;"	m	class:StateInfo
__init__	core.py	/^    def __init__(self, InitStateIndex=None, AcceptanceF=False):$/;"	m	class:StateMachine
__init__	core.py	/^    def __init__(self, StateMachineIdx, StateIdx):$/;"	m	class:StateOriginInfo
__init__	core.py	/^    def __init__(self, TriggerSet, TargetStateIdx):$/;"	m	class:Transition
__repr__	core.py	/^            def __repr__(self):		$/;"	m	class:history_item	file:
__repr__	core.py	/^    def __repr__(self):$/;"	f	file:
__repr__	core.py	/^    def __repr__(self):$/;"	m	class:StateMachine	file:
add_epsilon_target_state	core.py	/^    def add_epsilon_target_state(self, TargetStateIdx):$/;"	m	class:StateInfo
add_epsilon_transition	core.py	/^    def add_epsilon_transition(self, StartStateIdx, TargetStateIdx=None, RaiseAcceptanceF=False):$/;"	m	class:StateMachine
add_origin	core.py	/^    def add_origin(self, StateMachineID, StateIdx):$/;"	m	class:StateInfo
add_origin_list	core.py	/^    def add_origin_list(self, OriginList):$/;"	m	class:StateInfo
add_program	TEST/HWUT.py	/^    def add_program(name, section, title):$/;"	f
add_transition	core.py	/^    def add_transition(self, $/;"	m	class:StateInfo
add_transition	core.py	/^    def add_transition(self, $/;"	m	class:StateMachine
append_macro_state_transitions	OLD/NFA_to_DFA-old-stuff.py	/^def append_macro_state_transitions(start_combination):$/;"	f
clone	core.py	/^    def clone(self):$/;"	m	class:StateMachine
clone	core.py	/^    def clone(self, ReplacementDictionary=None):$/;"	m	class:StateInfo
compare_path	core.py	/^    def compare_path(self, TargetStateIdx):$/;"	m	class:Transition
consider	core.py	/^	def consider(target_state_index, trigger_set):$/;"	m	class:StateInfo
consistency	TEST/MISC/test-NFA-to-DFA-b.py	/^def consistency(combination):$/;"	f
consistency	TEST/MISC/test-NFA-to-DFA-b.py.bak	/^def consistency(combination):$/;"	f
create_DFA	core.py	/^    def create_DFA(self):$/;"	m	class:StateMachine
create_new_init_state	core.py	/^    def create_new_init_state(self, AcceptanceF=False):$/;"	m	class:StateMachine
create_new_state	core.py	/^    def create_new_state(self, AcceptanceF=False, StateIdx=None):$/;"	m	class:StateMachine
delete_duplicate_states	core.py	/^    def delete_duplicate_states(self):$/;"	m	class:StateMachine
delete_epsilon_target_state	core.py	/^    def delete_epsilon_target_state(self, TargetStateIdx):$/;"	m	class:StateInfo
delete_epsilon_transition	core.py	/^    def delete_epsilon_transition(self, StartStateIdx, TargetStateIdx):$/;"	m	class:StateMachine
do	OLD/NFA-_to_DFA-old-approach.py	/^        def do(self, trigger_set, combination):$/;"	m	class:SetRecorder
do	OLD/NFA_to_DFA-old-stuff.py	/^def do(StateMachines):$/;"	f
do	TEST/HWUT.py	/^def do(TestProgramList, CreateOnlyOutputF=False):$/;"	f
do	TEST/MISC/test_machine.py	/^def do(InpStr, state_machine):$/;"	f
do	parallelize.py	/^def do(the_state_machines):$/;"	f
do	repeat.py	/^def do(the_state_machine, min_repetition_n = 0, max_repetition_n = -1):$/;"	f
do	sequentialize.py	/^def do(the_state_machines, LeaveIntermediateAcceptanceStatesF=False):$/;"	f
finalize	core.py	/^    def finalize(self):$/;"	f
finalize	core.py	/^    def finalize(self):$/;"	m	class:StateMachine
find	TEST/HWUT.py	/^def find(Dir, OptionStr):$/;"	f
get	index.py	/^def get():$/;"	f
get_acceptance_state_list	core.py	/^    def get_acceptance_state_list(self, $/;"	m	class:StateMachine
get_aux_state	core.py	/^	def get_aux_state(StateIdx, StateSetList):$/;"	m	class:StateMachine
get_code	core.py	/^    def get_code(self):$/;"	m	class:StateMachine
get_code	core.py	/^    def get_code(self, Language = "C"):$/;"	f
get_elementary_trigger_sets	OLD/NFA-_to_DFA-old-approach.py	/^def get_elementary_trigger_sets(TriggerDict):$/;"	f
get_elementary_trigger_sets	core.py	/^    def get_elementary_trigger_sets(self, StateIdxList):$/;"	m	class:StateMachine
get_epsilon_closure	core.py	/^    def get_epsilon_closure(self, StateIdx, _considered_state_indices=None):$/;"	m	class:StateMachine
get_epsilon_closure_of_state_set	core.py	/^    def get_epsilon_closure_of_state_set(self, StateIdxList):$/;"	m	class:StateMachine
get_epsilon_target_state_indices	core.py	/^    def get_epsilon_target_state_indices(self):$/;"	m	class:StateInfo
get_epsilon_trigger_set	core.py	/^    def get_epsilon_trigger_set(self):$/;"	m	class:StateInfo
get_follow_state_combinations	OLD/NFA_to_DFA-old-stuff.py	/^def get_follow_state_combinations(state_combination):$/;"	f
get_hopkins_optimization	core.py	/^    def get_hopkins_optimization(self):$/;"	m	class:StateMachine
get_macro_state_transition	OLD/NFA_to_DFA-old-stuff.py	/^def get_macro_state_transition(StateCombination0, StateCombination1):$/;"	f
get_new_state_index	core.py	/^	def get_new_state_index(state_set_index):$/;"	m	class:StateMachine
get_next_combination	OLD/NFA-_to_DFA-old-approach.py	/^    def get_next_combination(self):$/;"	m	class:SubsetCombinator
get_normal_target_states	core.py	/^    def get_normal_target_states(self):$/;"	m	class:StateInfo
get_origin_list	core.py	/^    def get_origin_list(self):$/;"	m	class:StateInfo
get_program_list	TEST/HWUT.py	/^def get_program_list():$/;"	f
get_result_list	core.py	/^    def get_result_list(self, Trigger):$/;"	m	class:StateInfo
get_result_state_index	core.py	/^    def get_result_state_index(self, StateIdx, Trigger):$/;"	m	class:StateMachine
get_result_state_index	core.py	/^    def get_result_state_index(self, Trigger):$/;"	m	class:StateInfo
get_state_indices	core.py	/^    def get_state_indices(self):$/;"	m	class:StateMachine
get_state_set_containing_state_index	core.py	/^	def get_state_set_containing_state_index(StateIdx, StateSetList):$/;"	m	class:StateMachine
get_string	core.py	/^    def get_string(self):$/;"	m	class:EpsilonTransition
get_string	core.py	/^    def get_string(self, ElseTransitionF=False):$/;"	m	class:Transition
get_target_state_indices	core.py	/^    def get_target_state_indices(self):$/;"	m	class:StateInfo
get_target_state_indices	core.py	/^    def get_target_state_indices(self, StateIdx):$/;"	m	class:StateMachine
get_transitions	core.py	/^    def get_transitions(self):$/;"	m	class:StateInfo
get_transitions_of_state_set	core.py	/^    def get_transitions_of_state_set(StateIndices):$/;"	m	class:StateMachine
get_trigger_dictionary	core.py	/^    def get_trigger_dictionary(self, ConsiderEpsilonTransition=False):$/;"	m	class:StateInfo
get_trigger_map	core.py	/^    def get_trigger_map(self):$/;"	f
get_trigger_set	core.py	/^    def get_trigger_set(self, StartIdx, TargetIdx):$/;"	m	class:StateMachine
get_trigger_set	core.py	/^    def get_trigger_set(self, TargetIdx=None):$/;"	m	class:StateInfo
get_trigger_set_line_up	core.py	/^    def get_trigger_set_line_up(self):$/;"	m	class:StateInfo
has_only_one_target_for_trigger_set	core.py	/^    def has_only_one_target_for_trigger_set(self, TriggerSet, TargetIdx):$/;"	f
has_start_state_index	core.py	/^    def has_start_state_index(self, StartIdx):$/;"	m	class:StateMachine
has_state_index	core.py	/^    def has_state_index(self, StateIdx):$/;"	m	class:StateMachine
history_item	core.py	/^        class history_item:$/;"	c
increment	OLD/NFA_to_DFA-old-stuff.py	/^    def increment(cursor):$/;"	f
is_DFA_compliant	core.py	/^    def is_DFA_compliant(self):$/;"	f
is_acceptance	core.py	/^    def is_acceptance(self):$/;"	m	class:StateInfo
is_acceptance	core.py	/^    def is_acceptance(self, StartIdx):$/;"	m	class:StateMachine
is_empty	core.py	/^    def is_empty(self):$/;"	m	class:EpsilonTransition
is_empty	core.py	/^    def is_empty(self):$/;"	m	class:StateInfo
is_empty	core.py	/^    def is_empty(self):$/;"	m	class:StateMachine
kleene_closure	repeat.py	/^def kleene_closure(the_state_machine):$/;"	f
map_state_combination_to_index	OLD/NFA_to_DFA-old-stuff.py	/^def map_state_combination_to_index(combination):$/;"	f
map_state_combination_to_index	index.py	/^def map_state_combination_to_index(combination):$/;"	f
mark_state_origins	core.py	/^    def mark_state_origins(self):$/;"	m	class:StateMachine
mount_to_acceptance_states	core.py	/^    def mount_to_acceptance_states(self, MountedStateIdx, $/;"	m	class:StateMachine
mount_to_initial_state	core.py	/^    def mount_to_initial_state(self, TargetStateIdx):$/;"	m	class:StateMachine
not_so_simple	TEST/MISC/python-bug/core.py	/^def not_so_simple():$/;"	f
perform_test	TEST/HWUT.py	/^def perform_test(test_program, CreateOnlyOutputF=False):    $/;"	f
query_trigger_map	core.py	/^	def query_trigger_map(EndPosition, TargetIdx):$/;"	f
raise_write_protection	TEST/HWUT.py	/^def raise_write_protection(Dir):$/;"	f
register_state_machine	index.py	/^def register_state_machine(StateMachineRef):$/;"	f
replace_target_index	core.py	/^    def replace_target_index(self, OriginalIdx, NewTargetIdx):$/;"	m	class:StateInfo
run_program	TEST/HWUT.py	/^def run_program(program_name, args=[]):$/;"	f
set	core.py	/^    def set(self, TriggerSet=None, TargetIdx=None):$/;"	m	class:Transition
set_acceptance	core.py	/^    def set_acceptance(self, StateIdx, StatusF=True):$/;"	m	class:StateMachine
simple	TEST/MISC/python-bug/core.py	/^def simple():$/;"	f
split_state_set	core.py	/^	def split_state_set(AuxliaryStateSet, TriggerSet, TargetIdx):$/;"	m	class:StateMachine
test	TEST/MISC/test-NFA-to-DFA-b.py	/^def test(combination_0):$/;"	f
test	TEST/MISC/test-NFA-to-DFA-b.py.bak	/^def test(combination_0):$/;"	f
test	TEST/MISC/test-NFA-to-DFA-c.py	/^def test(combination_0):$/;"	f
test	TEST/MISC/test-NFA-to-DFA-c.py.bak	/^def test(combination_0):$/;"	f
test	TEST/MISC/test-map_utf8_set-all.py	/^def test(TestString):$/;"	f
test	TEST/MISC/test-map_utf8_set-all.py.bak	/^def test(TestString):$/;"	f
test	TEST/MISC/test-map_utf8_set.py	/^def test(TestString):$/;"	f
test	TEST/MISC/test-map_utf8_set.py.bak	/^def test(TestString):$/;"	f
test_program	TEST/HWUT.py	/^class test_program:$/;"	c
