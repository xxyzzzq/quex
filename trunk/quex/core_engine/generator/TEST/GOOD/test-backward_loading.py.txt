(*) Lexical Analyser Patterns:
     "0xxxxxxx"/"a"/ --> 0xxxxxxx / a
           [0a-z]{2} --> IDENTIFIER
            [ \t\n]+ --> WHITESPACE
## (1) code generation
## (2) compiling generated engine code and test
g++  ./tmp.cpp -I./. -I$QUEX_PATH -o ./tmp.cpp.exe -D__QUEX_OPTION_UNIT_TEST_ISOLATED_CODE_GENERATION -ggdb ##
## (3) running the test
(*) test string: 
'   0xxxxxxalola 0xxxxxxxa'
(*) result:
LOAD BACKWARD(entry)
|CS:       || BLC
|[   0xxxxx||
         WHITESPACE  '   '
         IDENTIFIER  '0x'
         IDENTIFIER  'xx'
         IDENTIFIER  'xx'
LOAD FORWARD(entry)
|[ :       S| BLC
|[   0xxxxx||
LOAD FORWARD(exit)
|| CS      || 'x'
||xxxalola ||
         IDENTIFIER  'xa'
         IDENTIFIER  'lo'
         IDENTIFIER  'la'
LOAD FORWARD(entry)
|| :      SC| BLC
||xxxalola ||
LOAD FORWARD(exit)
|| S       || ' '
||a 0xxxxxx||
         WHITESPACE  ' '
         IDENTIFIER  '0x'
         IDENTIFIER  'xx'
         IDENTIFIER  'xx'
LOAD FORWARD(entry)
|| :      SC| BLC
||a 0xxxxxx||
LOAD FORWARD(exit)
|| S       || 'x'
||xxxa]||||||
         IDENTIFIER  'xx'
LOAD BACKWARD(entry)
|C : S     || BLC
||xxxa]||||||
LOAD BACKWARD(exit)
|| : C  S  || 'x'
||xxxxxxa]|||
LOAD BACKWARD(entry)
|C :    S  || BLC
||xxxxxxa]|||
LOAD BACKWARD(exit)
|| :C     S|| 'x'
||0xxxxxxxa||
LOAD FORWARD(entry)
|| :      SC| BLC
||0xxxxxxxa||
LOAD FORWARD(exit)
|| S       || 'a'
||xa]||||||||
LOAD FORWARD(entry)
|| SC      || BLC
||xa]||||||||
       0xxxxxxx / a  'a'
  ''

## (4) cleaning up
