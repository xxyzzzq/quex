// -*- C++ -*- vim: set syntax=cpp: 
start = MAIN;

header {
#include <fstream>
}

body {
    std::string directory;
    size_t      include_depth;

    void  space(size_t Offset = 0) {
        for(size_t i=0; i<self.include_depth + Offset; ++i) std::cout << "    ";
    }
}

init {
    self.include_depth = 0;
    self.directory     = "example/";
}

memento {
}

memento_pack {
    self.include_depth += 1;
}

memento_unpack {
    self.space();
    std::cout << "<< Memento " << std::endl;
    self.include_depth -= 1;
    /* Lexer overtook ownership for 'included_sh', so no explicit 
     *
     *       included_sh->close() 
     *       delete (included_sh);
     *
     * is necessary.                                  */
}

token {
   INCLUDE;
   IDENTIFIER;
   STRING;
}

mode END_INCLUDED_FILE {
    <<EOF>> { 
       if( self.include_pop() ) RETURN;
       self_send(QUEX_TKN_TERMINATION);
       RETURN;
    }

    [ \t\r\n]+  { }
}

mode OPEN_INCLUDED_FILE : END_INCLUDED_FILE {
    [a-zA-Z0-9_.]+ { 
        {
            std::string    Filename = self.directory + (const char*)Lexeme;
            std::ifstream* input_handle = new std::ifstream(Filename.c_str(), std::ios::binary);

            if( ! input_handle || input_handle->fail() ) {
                delete input_handle;
                self.space(1);
                printf("%s: file '%s' cannot be opened.\n", self.input_name, Filename.c_str());
            }
            else {
                /* Pop the previous mode, so that the right mode is setup when one
                 * returns from the included file.                                 */
                self.pop_mode();

                self.space(1);
                std::cout << ">> Memento " << std::endl;

                self.space(1);
                printf("%s:%i: include '%s'.\n", self.input_name, (int)self.line_number(), Filename.c_str());

                self.include_push(Filename.c_str(), input_handle);
            }
        }
        /* IMPORTANT */
        RETURN;
    }


    . { 
        printf("%s: missing file name after 'include'.", self.input_name);
        exit(-1);
    }
}

mode MAIN : END_INCLUDED_FILE
{
    "include"       => GOSUB(OPEN_INCLUDED_FILE); 
    [_a-zA-Z0-9.]+  => QUEX_TKN_IDENTIFIER(Lexeme); 
}



