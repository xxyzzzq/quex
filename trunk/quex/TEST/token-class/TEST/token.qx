/* -*- C++ -*- vim:set syntax=cpp */
header {
#include <vector>
#include <string>
#include <iostream>
}

token_type {
   name = europa::deutschland::baden_wuertemberg::ispringen::MeinToken;

   standard {
        id            :    unsigned;
        line_number   :    unsigned;
        column_number :    unsigned;
   }
   distinct {
       name        :  std::basic_string<QUEX_TYPE_CHARACTER>;
       number_list :  std::vector<int>;
   }
   union {
       { 
          mini_x       : int8_t;
          mini_y       : int8_t;
       }
       { 
          big_x        : int16_t;
          big_y        : int16_t;
       }
       who_is_that     : uint16_t;
   }
   inheritable;
   constructor { std::cout << "Constructor\n"; }
   destructor  { std::cout << "Destructor\n"; }
   body        { int __nonsense__; }
   copy        { 
       std::cout << "Copy\n"; 
       /* Copy core elements: id, line, and column number */
       self._id         = Other._id;
#      ifdef QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#      ifdef QUEX_OPTION_LINE_NUMBER_COUNTING
              self._line_n = Other._line_n;
#      endif
#      ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
              self._column_n = Other._column_n;
#      endif
#      endif

       /* copy all members */
       self.name        = Other.name;
       self.number_list = Other.number_list;
       /* plain content copy of the union content */
       self.content     = Other.content;
   }
}

token {
    N1a;
    N1b;
    N1c;

    N2a;
    N2b;
    N2c;

    N3a;
    N3b;
    N3c;

    WHO;
}

