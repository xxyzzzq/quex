The Lexeme macro does some safety checks when compiled with
QUEX_OPTION_ASSERTS. These checks are sometimes nonsense in
generated code. This test checks that no code is generated
that referes to the Lexeme macros.

/home/fschaef/prj/quex/trunk/quex/core.py:146:        txt += "                \"    Proposal: Define 'on_failure' and analyze 'Lexeme'.\\n\");\n"
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:360:    /* Lexeme setup: 
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:363:     * references to the 'Lexeme'. 'LexemeNull' provides a reference to an empty
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:685:    ObjectName = "Lexeme"
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:705:        # Note: The variable must be named 'exactly' like the given name. 'xLexeme' or 'Lexemey'
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:706:        #       shall not trigger a treatment of 'Lexeme'.
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:251:        #  QUEX_TKN_XYZ(Lexeme)     --> call take_text(Lexeme, LexemeEnd)
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:259:            if argument_list[0] == "Lexeme":
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:266:                error_msg("When one unnamed argument is specified it must be 'Lexeme'\n"
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:276:                      "     one argument:   'Lexeme'   =>  token.take_text(..., LexemeBegin, LexemeEnd);\n"
