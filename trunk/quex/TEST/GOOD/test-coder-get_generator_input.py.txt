/*
** 10  0 [_a-zA-Z]+
**  8  0 [ \t\n]+
*/

self.pattern           = '[_a-zA-Z]+'
self.action            = 'std::cout << "IDENTIFIER" << std::endl;\n'
self.filename          = ''
self.line_n            = -1
self.inheritance_level = 10
self.pattern_index     = 0
self.priority_mark_f   = False
self.deletion_f        = False

self.pattern           = '[ \\t\\n]+'
self.action            = 'std::cout << "WHITESPACE" << std::endl;\n'
self.filename          = ''
self.line_n            = -1
self.inheritance_level = 8
self.pattern_index     = 0
self.priority_mark_f   = False
self.deletion_f        = False

ActionInfo:
   state machine of pattern = 
      init-state = 0L
      00000() <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      
   action = 
      {
      self.counter.__shift_end_values_to_start_values();
      self.counter.count_NoNewline(LexemeL);
      
      #line -1 ""
      std::cout << "IDENTIFIER" << std::endl;
      /* POST-ADAPTION: FILL IN APPROPRIATE LINE PRAGMA */
      
      }
ActionInfo:
   state machine of pattern = 
      init-state = 0L
      00000() <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      
   action = 
      {
      self.counter.__shift_end_values_to_start_values();
      self.counter.count(Lexeme, LexemeEnd);
      
      #line -1 ""
      std::cout << "WHITESPACE" << std::endl;
      /* POST-ADAPTION: FILL IN APPROPRIATE LINE PRAGMA */
      
      }
