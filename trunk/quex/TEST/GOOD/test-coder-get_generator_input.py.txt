/*

MODE: TEST

    PATTERN-ACTION PAIRS:
      (  4) TEST: [_a-zA-Z]+
      (  9) TEST: [ \t\n]+

*/

self.mode_name         = 'TEST'
self.pattern           = '[_a-zA-Z]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      self.action            = '{\n#   ifdef __QUEX_OPTION_COUNTER\n__QUEX_IF_COUNT_LINES(self.counter._line_number_at_begin     = self.counter._line_number_at_end);\n__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_begin = self.counter._column_number_at_end);\n__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += ((size_t)(self.buffer._input_p - self.buffer._lexeme_start_p)));\n__QUEX_ASSERT_COUNTER_CONSISTENCY(&self.counter);\n#   endif\nstd::cout << "IDENTIFIER" << std::endl;\n\n}'
self.pattern_index     = 4L

self.mode_name         = 'TEST'
self.pattern           = '[ \\t\\n]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      self.action            = '{\n#   ifdef __QUEX_OPTION_COUNTER\n__QUEX_IF_COUNT_LINES(self.counter._line_number_at_begin     = self.counter._line_number_at_end);\n__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_begin = self.counter._column_number_at_end);\nQUEX_NAME(Counter_count)(&self.counter, self.buffer._lexeme_start_p, self.buffer._input_p);\n__QUEX_ASSERT_COUNTER_CONSISTENCY(&self.counter);\n#   endif\nstd::cout << "WHITESPACE" << std::endl;\n\n}'
self.pattern_index     = 9L

[self.mode_name         = 'TEST'
self.pattern           = '[_a-zA-Z]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      self.action            = '{\n#   ifdef __QUEX_OPTION_COUNTER\n__QUEX_IF_COUNT_LINES(self.counter._line_number_at_begin     = self.counter._line_number_at_end);\n__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_begin = self.counter._column_number_at_end);\n__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += ((size_t)(self.buffer._input_p - self.buffer._lexeme_start_p)));\n__QUEX_ASSERT_COUNTER_CONSISTENCY(&self.counter);\n#   endif\nstd::cout << "IDENTIFIER" << std::endl;\n\n}'
self.pattern_index     = 4L
, self.mode_name         = 'TEST'
self.pattern           = '[ \\t\\n]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      self.action            = '{\n#   ifdef __QUEX_OPTION_COUNTER\n__QUEX_IF_COUNT_LINES(self.counter._line_number_at_begin     = self.counter._line_number_at_end);\n__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_begin = self.counter._column_number_at_end);\nQUEX_NAME(Counter_count)(&self.counter, self.buffer._lexeme_start_p, self.buffer._input_p);\n__QUEX_ASSERT_COUNTER_CONSISTENCY(&self.counter);\n#   endif\nstd::cout << "WHITESPACE" << std::endl;\n\n}'
self.pattern_index     = 9L
]
{}
