Involved states in First = 1L
Involved states in Second = 2L
=> when First triggers to 1L and Second to 2L, then both
   are recursive and no distinction needs to be made.
DoorTree(A):
    [0]: (1<-1) (1<-7777) 
    parent: [None]
    
DoorTree(B):
    [0]: (2<-1) (2<-2) (2<-7777) 
    parent: [None]
    
(Straight)---------------------------------------

StateA: [1L]
  [INTERVAL]   [TARGET/STATE [1]]
  [-oo, 9]     MST:(1)
  [10, oo]     MST:(2)
StateB: [2L]
  [INTERVAL]   [TARGET/STATE [2]]
  [-oo, oo]    MST:(2)

DoorTree(A|B):
    [1]: (2<-1) (2<-7777) 
            state_key = 1;
    parent: [0]
    
    [3]: (1<-7777) 
            state_key = 0;
    parent: [0]
    
    [0]: (1<-1) (2<-2) 
    parent: [None]
    
Result
  [INTERVAL]   [TARGET/STATE [1, 2]]
  [-oo, 9]     MST:DoorID(s=0, d=0)
  [10, oo]     MST:scheme((2, 2))
BorderN        = 1
Target Schemes = (2, 2)



(Vice Versa)-------------------------------------

StateA: [2L]
  [INTERVAL]   [TARGET/STATE [2]]
  [-oo, oo]    MST:(2)
StateB: [1L]
  [INTERVAL]   [TARGET/STATE [1]]
  [-oo, 9]     MST:(1)
  [10, oo]     MST:(2)

DoorTree(A|B):
    [1]: (2<-1) (2<-7777) 
            state_key = 0;
    parent: [0]
    
    [3]: (1<-7777) 
            state_key = 1;
    parent: [0]
    
    [0]: (1<-1) (2<-2) 
    parent: [None]
    
Result
  [INTERVAL]   [TARGET/STATE [2, 1]]
  [-oo, 9]     MST:DoorID(s=1, d=0)
  [10, oo]     MST:scheme((2, 2))
BorderN        = 1
Target Schemes = (2, 2)


