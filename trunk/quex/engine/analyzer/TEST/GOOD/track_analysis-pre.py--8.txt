init-state = 0L
00000 (1, 2), (2, 6), (3, 51)
     == 'a' ==> 00001
     == 'b' ==> 00005
    
00001 (1, 3, A, pre=bol), (3, 53)
     == 'b' ==> 00002
    
00002 (3, 52)
     == 'c' ==> 00003
    
00003 (3, 54)
     == 'd' ==> 00004
    
00004 (3, 55, A)
    
00005 (2, 7, A, pre=bol), (3, 52)
     == 'c' ==> 00003
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    if BeginOfLine:  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
        if      BeginOfLine: last_acceptance = Pattern1
        else: last_acceptance = Failure
    .from 5:
        if      BeginOfLine: last_acceptance = Pattern2
        else: last_acceptance = Failure
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos -= 2;  goto Pattern1;
        case 2: pos -= 1;  goto Pattern2;


State 4:
  .entry:
    .from 3:
  .drop_out:
     goto Pattern3;


State 5:
  .entry:
    .from 0:
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 0:
        [FAILURE]: NONE/set([0L])

State 1:
        [FAILURE]: NONE/set([0L])
        [      1]: BEGIN_OF_LINE/set([1L])

State 2:
        [FAILURE]: NONE/set([0L])
        [      1]: BEGIN_OF_LINE/set([1L])

State 3:
        [FAILURE]: NONE/set([0L])
        [      1]: BEGIN_OF_LINE/set([1L])
        [      2]: BEGIN_OF_LINE/set([5L])

State 4:
        [      3]: NONE/set([4L])

State 5:
        [FAILURE]: NONE/set([0L])
        [      2]: BEGIN_OF_LINE/set([5L])

