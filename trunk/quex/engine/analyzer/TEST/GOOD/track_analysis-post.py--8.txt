init-state = 0L
00000 (17, 45), (8, 21), (44, 119)
     == 'x' ==> 00001
    
00001 (8, 22, S), (17, 46, S), (44, 120)
     == 'a' ==> 00002
     == 'b' ==> 00006
    
00002 (8, 23, A, R), (44, 122)
     == 'a' ==> 00002
     == 'c' ==> 00003
    
00003 (44, 123)
     == 'd' ==> 00004
    
00004 (44, 124)
     == 'e' ==> 00005
    
00005 (44, 125, A)
    
00006 (17, 47, A, R), (44, 121)
     == 'b' ==> 00006
     == 'c' ==> 00003
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .accepter:
        last_acceptance = Pattern8
    .positioner:
        .from 1:
             position[PostContext_8]  = input_p;
             position[PostContext_17]  = input_p;
        .from 2: <nothing>
  .drop_out:
    pos = position[PostContext_8] ; goto Pattern8;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
        .from 6: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos = position[PostContext_8] ; goto Pattern8;
        case 17: pos = position[PostContext_17] ; goto Pattern17;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos = position[PostContext_8] ; goto Pattern8;
        case 17: pos = position[PostContext_17] ; goto Pattern17;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
     goto Pattern44;


State 6:
  .entry:
    .accepter:
        last_acceptance = Pattern17
    .positioner:
        .from 1:
             position[PostContext_8]  = input_p;
             position[PostContext_17]  = input_p;
        .from 6: <nothing>
  .drop_out:
    pos = position[PostContext_17] ; goto Pattern17;


