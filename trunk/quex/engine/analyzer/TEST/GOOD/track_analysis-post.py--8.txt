init-state = 0L
00000 (2, 45), (1, 21), (3, 119)
     == 'x' ==> 00001
    
00001 (1, 22, S), (2, 46, S), (3, 120)
     == 'a' ==> 00002
     == 'b' ==> 00006
    
00002 (1, 23, A, R), (3, 122)
     == 'a' ==> 00002
     == 'c' ==> 00003
    
00003 (3, 123)
     == 'd' ==> 00004
    
00004 (3, 124)
     == 'e' ==> 00005
    
00005 (3, 125, A)
    
00006 (2, 47, A, R), (3, 121)
     == 'b' ==> 00006
     == 'c' ==> 00003
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1: position[PostContext_8]  = input_p;
    .from 2:
  .drop_out:
    pos = position[PostContext_8] ; goto Pattern1;


State 3:
  .entry:
    .from 2: last_acceptance = Pattern1
    .from 6: last_acceptance = Pattern2
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 1: pos = position[PostContext_8] ; goto Pattern1;
        case 2: pos = position[PostContext_17] ; goto Pattern2;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 1: pos = position[PostContext_8] ; goto Pattern1;
        case 2: pos = position[PostContext_17] ; goto Pattern2;


State 5:
  .entry:
    .from 4:
  .drop_out:
     goto Pattern3;


State 6:
  .entry:
    .from 1: position[PostContext_17]  = input_p;
    .from 6:
  .drop_out:
    pos = position[PostContext_17] ; goto Pattern2;



--- Optimized States ---

State 2:
  .entry:
    .from 1: position[PostContext_0]  = input_p;
    .from 2:
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern1;


State 3:
  .entry:
    .from 2: last_acceptance = Pattern1
    .from 6: last_acceptance = Pattern2
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 1: pos = position[PostContext_0] ; goto Pattern1;
        case 2: pos = position[PostContext_0] ; goto Pattern2;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 1: pos = position[PostContext_0] ; goto Pattern1;
        case 2: pos = position[PostContext_0] ; goto Pattern2;


State 6:
  .entry:
    .from 1: position[PostContext_0]  = input_p;
    .from 6:
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern2;


