╔════╗  a   ╔════╗  b   ╔════╗  c   ╔════╗  d   ╔════╗
║ 71 ║ ───▶ ║ 72 ║ ───▶ ║ 76 ║ ───▶ ║ 74 ║ ───▶ ║ 75 ║
╚════╝      ╚════╝      ╚════╝      ╚════╝      ╚════╝
  │                                   ▲
  │ b                                 │
  ▼                                   │
╔════╗  c                             │
║ 73 ║ ───────────────────────────────┘
╚════╝
init-state = 71L
00071() <~ (21, 50), (2, 5)
      == 'a' ==> 00072
      == 'b' ==> 00073
      <no epsilon>
00072(A, S, bol) <~ (2, 6, A, S, bol), (21, 52)
      == 'b' ==> 00076
      <no epsilon>
00076() <~ (21, 51)
      == 'c' ==> 00074
      <no epsilon>
00074() <~ (21, 53)
      == 'd' ==> 00075
      <no epsilon>
00075(A, S) <~ (21, 54, A, S)
      <no epsilon>
00073(A, S, bol) <~ (2, 6, A, S, bol), (21, 51)
      == 'c' ==> 00074
      <no epsilon>

State 71:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 72:
  .entry:
    Positioner:
    if 'BeginOfLine': Position[Acceptance] = input_p;
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 73:
  .entry:
    Positioner:
    if 'BeginOfLine': Position[Acceptance] = input_p;
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 74:
  .entry:
  .drop_out:
    if BeginOfLine: pos = Position[Acceptance]; goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 75:
  .entry:
  .drop_out:
     goto Pattern21;


State 76:
  .entry:
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


