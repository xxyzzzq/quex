init-state = 0L
00000 
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 A(1,pre=1)
     == 'd' ==> 00002
    
00002 S4
     == 'e' ==> 00003
    
00003 A(3,pre=3), A(4,pre=4,R4)
    
00004 A(2,pre=2)
     == 'b' ==> 00005
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00005 
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00006 
     == 'd' ==> 00002
    

State 0:
  .entry:
    .from BEFORE_ENTRY: last_acceptance = Failure

.drop_out:
pos = lexeme_start_p + 1;  goto Failure;

State 1:
  .entry:
    .from 0: if PreContext_1:  last_acceptance = Pattern1

.drop_out:
if PreContext_1: goto Pattern1;
pos = lexeme_start_p + 1;  goto Failure;

State 2:
  .entry:
    .from 1: 
    .from 4: if 'PreContext_2': position[PostContext_2]  = input_p;
    .from 5: 
    .from 6: 

.drop_out:
on last_acceptance:
case 1: pos -= 1;  goto Pattern1;
case 2: pos = position[PostContext_2] ; goto Pattern2;
case Failure: pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
        if PreContext_3:  last_acceptance = Pattern3
        else if PreContext_4:  last_acceptance = Pattern4

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 1: pos -= 2;  goto Pattern1;
case 2: pos = position[PostContext_2] ; goto Pattern2;
case 3: goto Pattern3;
case 4: pos -= 1;  goto Pattern4;


State 4:
  .entry:
    .from 0: if PreContext_2:  last_acceptance = Pattern2

.drop_out:
if PreContext_2: goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;

State 5:
  .entry:
    .from 4: if 'PreContext_2': position[PostContext_2]  = input_p;

.drop_out:
if PreContext_2: pos -= 1;  goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;

State 6:
  .entry:
    .from 4: if 'PreContext_2': position[PostContext_2]  = input_p;
    .from 5: 

.drop_out:
if PreContext_2: pos = position[PostContext_2] ; goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;


--- Optimized States ---

State 2:
  .entry:
    .from 1: 
    .from 4: if 'PreContext_2': position[PostContext_0]  = input_p;
    .from 5: 
    .from 6: 

.drop_out:
on last_acceptance:
case 1: pos -= 1;  goto Pattern1;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case Failure: pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
        if PreContext_3:  last_acceptance = Pattern3
        else if PreContext_4:  last_acceptance = Pattern4

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 1: pos -= 2;  goto Pattern1;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case 3: goto Pattern3;
case 4: pos -= 1;  goto Pattern4;


State 5:
  .entry:
    .from 4: if 'PreContext_2': position[PostContext_0]  = input_p;

.drop_out:
if PreContext_2: pos -= 1;  goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;

State 6:
  .entry:
    .from 4: if 'PreContext_2': position[PostContext_0]  = input_p;
    .from 5: 

.drop_out:
if PreContext_2: pos = position[PostContext_0] ; goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;

