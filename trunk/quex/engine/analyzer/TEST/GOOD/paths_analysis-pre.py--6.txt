init-state = 0L
00000 
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 A(1)
     == 'b' ==> 00002
    
00002 
     == 'c' ==> 00003
    
00003 A(3,pre=1)
    
00004 A(2)
     == 'b' ==> 00005
    
00005 
     == 'c' ==> 00006
    
00006 A(4,pre=2)
    

State 0:
  .entry:
    .from BEFORE_ENTRY: 

.drop_out:
pos = lexeme_start_p + 1;  goto Failure;

State 1:
  .entry:
    .from 0: 

.drop_out:
goto Pattern1;

State 2:
  .entry:
    .from 1: 

.drop_out:
pos -= 1;  goto Pattern1;

State 3:
  .entry:
    .from 2: 

.drop_out:
if PreContext_1: goto Pattern3;
pos -= 2;  goto Pattern1;

State 4:
  .entry:
    .from 0: 

.drop_out:
goto Pattern2;

State 5:
  .entry:
    .from 4: 

.drop_out:
pos -= 1;  goto Pattern2;

State 6:
  .entry:
    .from 5: 

.drop_out:
if PreContext_2: goto Pattern4;
pos -= 2;  goto Pattern2;

State 0:
        [MATCH_FAILURE]: NONE/set([0L])

State 1:
        [      1]: NONE/set([1L])

State 2:
        [      1]: NONE/set([1L])

State 3:
        [      1]: NONE/set([1L])
        [      3]: 1/set([3L])

State 4:
        [      2]: NONE/set([4L])

State 5:
        [      2]: NONE/set([4L])

State 6:
        [      2]: NONE/set([4L])
        [      4]: 2/set([6L])

