init-state = 0L
00000 (11, 29), (23, 62)
     == 'a' ==> 00001
    
00001 (11, 30, S), (23, 63, S)
     == 'b' ==> 00002
    
00002 (11, 31), (23, 64)
     == 'b' ==> 00002
     == 'd' ==> 00003
     == 'e' ==> 00004
    
00003 (11, 32, A, R)
    
00004 (23, 65, A, R)
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1:
             position[PostContext_11]  = input_p;
             position[PostContext_23]  = input_p;
        .from 2: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos = position[PostContext_11] ; goto Pattern11;


State 4:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos = position[PostContext_23] ; goto Pattern23;



--- Optimized States ---

State 2:
  .entry:
    .positioner:
        .from 1: position[PostContext_0]  = input_p;
        .from 2: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern11;


State 4:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern23;


