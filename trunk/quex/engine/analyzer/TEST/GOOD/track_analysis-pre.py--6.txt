init-state = 0L
00000() <~ (3, 6), (33, 74), (18, 39), (1, 2)
      == 'a' ==> 00001
      == 'b' ==> 00004
      <no epsilon>
00001(A, S) <~ (1, 3, A, S), (18, 40)
      == 'b' ==> 00002
      <no epsilon>
00002() <~ (18, 41)
      == 'c' ==> 00003
      <no epsilon>
00003(A, S, pre=16) <~ (18, 42, A, S, pre=16)
      <no epsilon>
00004(A, S) <~ (3, 7, A, S), (33, 75)
      == 'b' ==> 00005
      <no epsilon>
00005() <~ (33, 76)
      == 'c' ==> 00006
      <no epsilon>
00006(A, S, pre=31) <~ (33, 77, A, S, pre=31)
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern1;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern1;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_16:  goto Pattern18;
    pos -= 2;  goto Pattern1;


State 4:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern3;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern3;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
    if PreContext_31:  goto Pattern33;
    pos -= 2;  goto Pattern3;


