init-state = 0L
00000 (25, 59), (17, 40), (8, 18)
     == 'a' ==> 00001
     == 'b' ==> 00004
     == 'c' ==> 00007
    
00001 (8, 19, S)
     == 'b' ==> 00002
    
00002 (8, 20)
     == 'c' ==> 00003
    
00003 (8, 21, A, R)
    
00004 (17, 41, S)
     == 'b' ==> 00005
    
00005 (17, 42)
     == 'c' ==> 00006
    
00006 (17, 43, A, R)
    
00007 (25, 60)
     == 'b' ==> 00008
    
00008 (25, 61)
     == 'c' ==> 00009
    
00009 (25, 62, A)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    pos -= 2;  goto Pattern8;


State 4:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .from 4:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .from 5:
  .drop_out:
    pos -= 2;  goto Pattern17;


State 7:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 8:
  .entry:
    .from 7:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 9:
  .entry:
    .from 8:
  .drop_out:
     goto Pattern25;


