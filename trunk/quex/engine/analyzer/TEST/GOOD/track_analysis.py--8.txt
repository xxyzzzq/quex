init-state = 0L
00000 (31, 85), (4, 12), (6, 17)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (4, 13, A), (31, 87)
     == 'a' ==> 00001
     == 'd' ==> 00002
    
00002 (31, 88)
     == 'e' ==> 00003
    
00003 (31, 89, A)
    
00004 (6, 18, A), (31, 86)
     == 'c' ==> 00005
    
00005 (31, 90)
     == 'c' ==> 00005
     == 'd' ==> 00002
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
    .from 1:
  .drop_out:
     goto Pattern4;


State 2:
  .entry:
    .from 1: last_acceptance = Pattern4
    .from 5: last_acceptance = Pattern6
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 4: pos -= 1;  goto Pattern4;
        case 6: pos = position[PostContext_6] ; goto Pattern6;


State 3:
  .entry:
    .from 2:
  .drop_out:
     goto Pattern31;


State 4:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern6;


State 5:
  .entry:
    .from 4: position[PostContext_6]  = input_p;
    .from 5:
  .drop_out:
    pos = position[PostContext_6] ; goto Pattern6;



--- Optimized States ---

State 2:
  .entry:
    .from 1: last_acceptance = Pattern4
    .from 5: last_acceptance = Pattern6
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 4: pos -= 1;  goto Pattern4;
        case 6: pos = position[PostContext_0] ; goto Pattern6;


State 5:
  .entry:
    .from 4: position[PostContext_0]  = input_p;
    .from 5:
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern6;


