init-state = 0L
00000 (95, 345), (143, 506), (47, 182), (150, 526)
     == 'a' ==> 00001
    
00001 (47, 183), (95, 346), (143, 507), (150, 527, A, pre=153)
     == 'a' ==> 00002
    
00002 (47, 184), (95, 347), (143, 508)
     == 'b' ==> 00003
     == 'c' ==> 00008
    
00003 (47, 185), (95, 348), (143, 509)
     == '0' ==> 00004
     == '1' ==> 00006
    
00004 (47, 189), (95, 350, A, pre=98), (143, 511)
     == '0' ==> 00005
    
00005 (47, 190), (95, 351), (143, 512)
     == '0' ==> 00002
    
00006 (47, 188), (95, 349), (143, 510, A, pre=146)
     == '1' ==> 00007
    
00007 (47, 191), (95, 352), (143, 513)
     == '1' ==> 00002
    
00008 (47, 186)
     == 'c' ==> 00009
    
00009 (47, 187, A, pre=50)
    

State 0:
  .entry:
    .from NONE: last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0: if      PreContext_153: last_acceptance = Pattern150
  .drop_out:
    if PreContext_153:  goto Pattern150;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1: if 'PreContext_153': position[PostContext_150]  = input_p;
    .from 5:
    .from 7:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_143] ; goto Pattern143;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 95: pos = position[PostContext_95] ; goto Pattern95;


State 3:
  .entry:
    .from 2:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_143] ; goto Pattern143;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 95: pos = position[PostContext_95] ; goto Pattern95;


State 4:
  .entry:
    .from 3: if      PreContext_98: last_acceptance = Pattern95
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_143] ; goto Pattern143;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 95: goto Pattern95;


State 5:
  .entry:
    .from 4: if 'PreContext_98': position[PostContext_95]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_143] ; goto Pattern143;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 95: pos -= 1;  goto Pattern95;


State 6:
  .entry:
    .from 3: if      PreContext_146: last_acceptance = Pattern143
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 95: pos = position[PostContext_95] ; goto Pattern95;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 143: goto Pattern143;


State 7:
  .entry:
    .from 6: if 'PreContext_146': position[PostContext_143]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 95: pos = position[PostContext_95] ; goto Pattern95;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 143: pos -= 1;  goto Pattern143;


State 8:
  .entry:
    .from 2:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_143] ; goto Pattern143;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 95: pos = position[PostContext_95] ; goto Pattern95;


State 9:
  .entry:
    .from 8: if      PreContext_50: last_acceptance = Pattern47
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 95: pos = position[PostContext_95] ; goto Pattern95;
        case 143: pos = position[PostContext_143] ; goto Pattern143;
        case 150: pos = position[PostContext_150] ; goto Pattern150;
        case 47: goto Pattern47;


State 0:
        [FAILURE]: NONE/set([0L])

State 1:
        [FAILURE]: NONE/set([0L])
        [    150]: 153/set([1L])

State 2:
        [FAILURE]: NONE/set([0L])
    (*) [     95]: 98/set([4L])
    (*) [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])

State 3:
        [FAILURE]: NONE/set([0L])
    (*) [     95]: 98/set([4L])
    (*) [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])

State 4:
        [FAILURE]: NONE/set([0L])
        [     95]: 98/set([4L])
    (*) [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])

State 5:
        [FAILURE]: NONE/set([0L])
        [     95]: 98/set([4L])
    (*) [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])

State 6:
        [FAILURE]: NONE/set([0L])
    (*) [     95]: 98/set([4L])
        [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])

State 7:
        [FAILURE]: NONE/set([0L])
    (*) [     95]: 98/set([4L])
        [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])

State 8:
        [FAILURE]: NONE/set([0L])
    (*) [     95]: 98/set([4L])
    (*) [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])

State 9:
        [FAILURE]: NONE/set([0L])
        [     47]: 50/set([9L])
    (*) [     95]: 98/set([4L])
    (*) [    143]: 146/set([6L])
    (*) [    150]: 153/set([1L])


--- Optimized States ---

State 2:
  .entry:
    .from 1: if 'PreContext_153': position[PostContext_1]  = input_p;
    .from 5:
    .from 7:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_2] ; goto Pattern143;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 95: pos = position[PostContext_0] ; goto Pattern95;


State 3:
  .entry:
    .from 2:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_2] ; goto Pattern143;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 95: pos = position[PostContext_0] ; goto Pattern95;


State 4:
  .entry:
    .from 3: if      PreContext_98: last_acceptance = Pattern95
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_2] ; goto Pattern143;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 95: goto Pattern95;


State 5:
  .entry:
    .from 4: if 'PreContext_98': position[PostContext_0]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_2] ; goto Pattern143;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 95: pos -= 1;  goto Pattern95;


State 6:
  .entry:
    .from 3: if      PreContext_146: last_acceptance = Pattern143
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 95: pos = position[PostContext_0] ; goto Pattern95;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 143: goto Pattern143;


State 7:
  .entry:
    .from 6: if 'PreContext_146': position[PostContext_2]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 95: pos = position[PostContext_0] ; goto Pattern95;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 143: pos -= 1;  goto Pattern143;


State 8:
  .entry:
    .from 2:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 143: pos = position[PostContext_2] ; goto Pattern143;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 95: pos = position[PostContext_0] ; goto Pattern95;


State 9:
  .entry:
    .from 8: if      PreContext_50: last_acceptance = Pattern47
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 95: pos = position[PostContext_0] ; goto Pattern95;
        case 143: pos = position[PostContext_2] ; goto Pattern143;
        case 150: pos = position[PostContext_1] ; goto Pattern150;
        case 47: goto Pattern47;


