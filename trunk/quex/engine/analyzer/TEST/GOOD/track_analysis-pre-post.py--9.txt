init-state = 0L
00000 (10, 20), (63, 154), (36, 83), (3, 6)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (3, 7, A, pre=6), (36, 85), (63, 155)
     == 'd' ==> 00002
    
00002 (36, 86), (63, 157, S)
     == 'e' ==> 00003
    
00003 (36, 87, A, pre=39), (63, 159, A, R, pre=66)
    
00004 (10, 21, A, pre=13), (36, 84), (63, 156)
     == 'b' ==> 00005
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00005 (36, 88), (63, 158)
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00006 (36, 85), (63, 155)
     == 'd' ==> 00002
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    if PreContext_6:  goto Pattern3;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
    .from 4: if 'PreContext_13': position[PostContext_10]  = input_p;
    .from 5:
    .from 6:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 10: pos = position[PostContext_10] ; goto Pattern10;
        case 3: pos -= 1;  goto Pattern3;


State 3:
  .entry:
    .from 2:
        if      PreContext_39: last_acceptance = Pattern36
        else if PreContext_66: last_acceptance = Pattern63
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 10: pos = position[PostContext_10] ; goto Pattern10;
        case 3: pos -= 2;  goto Pattern3;
        case 36: goto Pattern36;
        case 63: pos -= 1;  goto Pattern63;


State 4:
  .entry:
    .from 0:
  .drop_out:
    if PreContext_13:  goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .from 4: if 'PreContext_13': position[PostContext_10]  = input_p;
  .drop_out:
    if PreContext_13: pos -= 1;  goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .from 4: if 'PreContext_13': position[PostContext_10]  = input_p;
    .from 5:
  .drop_out:
    if PreContext_13: pos = position[PostContext_10] ; goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;



--- Optimized States ---

State 2:
  .entry:
    .from 1:
    .from 4: if 'PreContext_13': position[PostContext_0]  = input_p;
    .from 5:
    .from 6:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 10: pos = position[PostContext_0] ; goto Pattern10;
        case 3: pos -= 1;  goto Pattern3;


State 3:
  .entry:
    .from 2:
        if      PreContext_39: last_acceptance = Pattern36
        else if PreContext_66: last_acceptance = Pattern63
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 10: pos = position[PostContext_0] ; goto Pattern10;
        case 3: pos -= 2;  goto Pattern3;
        case 36: goto Pattern36;
        case 63: pos -= 1;  goto Pattern63;


State 5:
  .entry:
    .from 4: if 'PreContext_13': position[PostContext_0]  = input_p;
  .drop_out:
    if PreContext_13: pos -= 1;  goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .from 4: if 'PreContext_13': position[PostContext_0]  = input_p;
    .from 5:
  .drop_out:
    if PreContext_13: pos = position[PostContext_0] ; goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


