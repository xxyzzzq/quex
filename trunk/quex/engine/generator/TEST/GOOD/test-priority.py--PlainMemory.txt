(*) test string: 
'AxZ Ax xY'
(*) result:
              OTHER  'A'
              X / Z  'x'
              OTHER  'Z'
         WHITESPACE  ' '
              OTHER  'A'
              [A-Z]  'x'
         WHITESPACE  ' '
           X / [YZ]  'x'
              OTHER  'Y'
  ''
(*) test string: 
'xZxY'
(*) result:
                 XZ  'xZ'
           X / [ZY]  'x'
              [A-Z]  'Y'
  ''
(*) test string: 
'AxyzzAxyAxyz'
(*) result:
              OTHER  'A'
            XY / Z+  'xy'
              OTHER  'z'
              OTHER  'z'
              OTHER  'A'
           A / XY /  'xy'
              OTHER  'A'
                XYZ  'xyz'
  ''
==========================================================================

(1) Same Length of Core Pattern
    -- 'x' preceedes 'A/x/' thus 'A/x/' shall never trigger
    -- 'x' preceedes 'x/Z', but 'x/Z' is a post conditioned pattern
       => 'x/Z' succeeds.
    -- 'x/Z' preceeds 'x/[YZ]', thus for 'xZ' the second shall never match.

(*) Lexical Analyser Patterns:
                 "x" --> [A-Z]
               [A-Z] --> OTHER
             "x"/"Z" --> X / Z
            "A"/"x"/ --> A / X /
                 [ ] --> WHITESPACE
            "x"/[YZ] --> X / [YZ]
## (1) code generation
## (2) compiling generated engine code and test
## (3) running the test
## (4) cleaning up
==========================================================================

(2) Precedence of Post Condition
    -- 'xZ' preceeds 'x/[YZ]'.
    -- 'x/[YZ]' preceeds 'x/Y', the second shall never match.

(*) Lexical Analyser Patterns:
               [A-Z] --> [A-Z]
                "xZ" --> XZ
           "x"/[ZY]" --> X / [ZY]
             "x"/"Y" --> X / Y
## (1) code generation
## (2) compiling generated engine code and test
## (3) running the test
## (4) cleaning up
==========================================================================

(3) Length Decides (Independent of Pre or Post Condition
    -- 'xyz' is outruled by 'xy/z+'.
    -- The core pattern of 'A/xy' is shorter than 'xy/z+' thus
       in case of 'xyz' the second one shall trigger.
    -- ...

(*) Lexical Analyser Patterns:
            [a-zA-Z] --> OTHER
               A/xy/ --> A / XY /
               "xyz" --> XYZ
               xy/z+ --> XY / Z+
## (1) code generation
## (2) compiling generated engine code and test
## (3) running the test
## (4) cleaning up
