(*) Lexical Analyser Patterns:
          ABC/hello/ --> ABC/hello/
    A([bB]+)C/world/ --> A([bB]+)C/world/
    AB(C+)/[a-z]{5}/ --> AB(C+)/[a-z]{5}/
  (abc|ABC)/worldly/ --> (abc|ABC)/worldly/
    (X+)Y(Z+)/hello/ --> (X+)Y(Z+)/hello/
 [xX][yY][zZ]/world/ --> [xX][yY][zZ]/world/
       XYZ/[a-z]{5}/ --> XYZ/[a-z]{5}/
  (X(Y)+Z)+/worldly/ --> (X(Y)+Z)+/worldly/
            [ \t\n]+ --> [ \\t\\n]+
             ABC|XYZ --> ABC|XYZ
## (1) code generation
## (2) compiling generated engine code and test
g++  ./tmp.cpp -I./. -I$QUEX_PATH -o ./tmp.cpp.exe -D__QUEX_OPTION_UNIT_TEST_ISOLATED_CODE_GENERATION -ggdb ##
## (3) running the test
(*) test string: 
'
  ABChelloABCworldABCworldly
  XYZhelloXYZworldXYZworldly
  ABCworldlyXYZhelloABCworld
  XYZworldXYZworldlyABCworld
'
(*) result:
         [ \t\n]+  '
  '
            ABC|XYZ  'ABC'
         ABC/hello/  'hello'
            ABC|XYZ  'ABC'
   A([bB]+)C/world/  'world'
            ABC|XYZ  'ABC'
 (abc|ABC)/worldly/  'worldly'
         [ \t\n]+  '
  '
            ABC|XYZ  'XYZ'
   (X+)Y(Z+)/hello/  'hello'
            ABC|XYZ  'XYZ'
[xX][yY][zZ]/world/  'world'
            ABC|XYZ  'XYZ'
 (X(Y)+Z)+/worldly/  'worldly'
         [ \t\n]+  '
  '
            ABC|XYZ  'ABC'
 (abc|ABC)/worldly/  'worldly'
            ABC|XYZ  'XYZ'
   (X+)Y(Z+)/hello/  'hello'
            ABC|XYZ  'ABC'
   A([bB]+)C/world/  'world'
         [ \t\n]+  '
  '
            ABC|XYZ  'XYZ'
[xX][yY][zZ]/world/  'world'
            ABC|XYZ  'XYZ'
 (X(Y)+Z)+/worldly/  'worldly'
            ABC|XYZ  'ABC'
   A([bB]+)C/world/  'world'
         [ \t\n]+  '
'
  ''

## (4) cleaning up
