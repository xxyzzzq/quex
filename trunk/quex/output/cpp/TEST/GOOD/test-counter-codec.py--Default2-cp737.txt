static void
TEST_MODE_character_counter(QUEX_TYPE_ANALYZER* me, const QUEX_TYPE_CHARACTER* LexemeBegin, const QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    const QUEX_TYPE_CHARACTER* iterator = (void*)0;

    for(iterator=LexemeBegin; iterator < LexemeEnd; ++iterator) {
        if( (*iterator) < 0xE ) {
            switch( (*iterator) ) {
                case 0x0: 
                case 0x1: 
                case 0x2: 
                case 0x3: 
                case 0x4: 
                case 0x5: 
                case 0x6: 
                case 0x7: 
                case 0x8: self.counter._column_number_at_end += 1;
                break;
                case 0x9: self.counter._column_number_at_end &= ~ ((size_t)0x3);
                self.counter._column_number_at_end += 4;                break;
                case 0xA: 
                case 0xB: 
                case 0xC: self.counter._line_number_at_end   += 1;
                self.counter._column_number_at_end = 1;
                break;
                case 0xD: self.counter._column_number_at_end = 1;
                break;

            }
        } else {
            if( (*iterator) < 0x46 ) {
                self.counter._column_number_at_end += 1;

            } else if( (*iterator) == 0x46 ) {
                self.counter._column_number_at_end += 2;

            } else if( (*iterator) < 0x80 ) {
                self.counter._column_number_at_end += 1;

            } else {
                QUEX_ERROR_EXIT("Unexpected character for codec 'cp737'.\n"
                                "May be, codec transformation file from unicode contains errors.");
            }
        }
    }
    __quex_assert(iterator == End); /* Otherwise, lexeme violates codec character boundaries. */
#   undef self
}

