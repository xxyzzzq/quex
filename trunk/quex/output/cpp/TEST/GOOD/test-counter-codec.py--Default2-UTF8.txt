#spec 
       [\x0A\x0b\x0c\x85\X2028\X2029]      => newline 1;
       [\x0d]                                   => newline 0;
       [\t]                                     => grid    4;
       [\X0600-\X06FF]                         => space   3;
       [\U010000-\U10FFFF]                     => space   2;
    
<string>:7:warning: No '\else' defined in counter setup. Assume '\else => space 1;'
<string>:7:warning: ('--suppress 12' to avoid this message)
###ifdef __QUEX_OPTION_COUNTER
##void
##QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_CHARACTER* LexemeBegin, QUEX_TYPE_CHARACTER* LexemeEnd)
##{
###   define self (*me)
##    QUEX_TYPE_CHARACTER            input                          = (QUEX_TYPE_CHARACTER)(0x00);
##    (void)me;
##    __QUEX_IF_COUNT_SHIFT_VALUES();
##    /* Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)
##     * => Caller does not need to check
##     * BUT, if so quit immediately after 'shift values'. */
##    __quex_assert(LexemeBegin <= LexemeEnd);
##    if(LexemeBegin == LexemeEnd) return;
##    me->buffer._input_p = LexemeBegin;
## /* (132 from NONE) */
##    input = *(me->buffer._input_p);
##    me->buffer._lexeme_start_p = me->buffer._input_p;
##
##_69:
##
##    __quex_debug("Init State\n");
##    __quex_debug_state(132);
##    if( input < 0xE0 ) {
##        if( input < 0x80 ) {
##            if( input >= 0xE ) {
##                goto _6;
##            
##} else if( input == 0xD ) {
##                goto _15;
##            
##} else if( input >= 0xA ) {
##                goto _7;
##            
##} else if( input == 0x9 ) {
##                goto _17;
##            } else {
##                goto _6;
##            
##}
##        } else {
##            switch( input ) {
##                case 0xC2: goto _4;
##                case 0xC3: 
##                case 0xC4: 
##                case 0xC5: 
##                case 0xC6: 
##                case 0xC7: 
##                case 0xC8: 
##                case 0xC9: 
##                case 0xCA: 
##                case 0xCB: 
##                case 0xCC: 
##                case 0xCD: 
##                case 0xCE: 
##                case 0xCF: 
##                case 0xD0: 
##                case 0xD1: 
##                case 0xD2: 
##                case 0xD3: 
##                case 0xD4: 
##                case 0xD5: 
##                case 0xD6: 
##                case 0xD7: goto _14;
##                case 0xD8: 
##                case 0xD9: 
##                case 0xDA: 
##                case 0xDB: goto _5;
##                case 0xDC: 
##                case 0xDD: 
##                case 0xDE: 
##                case 0xDF: goto _14;
##
##            }
##        
##}
##    } else {
##        switch( input ) {
##            case 0xE0: goto _11;
##            case 0xE1: goto _8;
##            case 0xE2: goto _16;
##            case 0xE3: 
##            case 0xE4: 
##            case 0xE5: 
##            case 0xE6: 
##            case 0xE7: 
##            case 0xE8: 
##            case 0xE9: 
##            case 0xEA: 
##            case 0xEB: 
##            case 0xEC: 
##            case 0xED: 
##            case 0xEE: 
##            case 0xEF: goto _8;
##            case 0xF0: goto _3;
##            case 0xF1: goto _13;
##            case 0xF2: 
##            case 0xF3: goto _10;
##            case 0xF4: goto _9;
##            case 0xF5: 
##            case 0xF6: 
##            case 0xF7: goto _12;
##
##        }
##    
##}
##
##    __quex_debug_drop_out(132);
##goto _1;
##
##
##    __quex_assert_no_passage();
##_68: /* (132 from 191) */
##    me->buffer._lexeme_start_p = me->buffer._input_p;
##    goto _69;
##
##
##
##    __quex_assert_no_passage();
##_3: /* (133 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _71;
##
##_71:
##
##    __quex_debug_state(133);
##    switch( input ) {
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: goto _35;
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: goto _34;
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: 
##        case 0xBF: goto _22;
##
##    }
##
##    __quex_debug_drop_out(133);
##goto _72;
##
##    __quex_assert_no_passage();
##_4: /* (134 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _73;
##
##_73:
##
##    __quex_debug_state(134);
##    switch( input ) {
##        case 0x80: 
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: goto _6;
##        case 0x85: goto _7;
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: 
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: 
##        case 0xBF: goto _6;
##
##    }
##
##    __quex_debug_drop_out(134);
##goto _72;
##
##    __quex_assert_no_passage();
##_5: /* (135 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _74;
##
##_74:
##
##    __quex_debug_state(135);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _33;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(135);
##goto _72;
##
##    __quex_assert_no_passage();
##_6: /* (136 from 145) (136 from 168) (136 from 132) (136 from 156) (136 from 134) (136 from 157) (136 from 166) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _75;
##
##_75:
##
##    __quex_debug_state(136);
##    __quex_debug_drop_out(136);
##goto _77;
##
##    __quex_assert_no_passage();
##_7: /* (137 from 132) (137 from 157) (137 from 134) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _78;
##
##_78:
##
##    __quex_debug_state(137);
##    __quex_debug_drop_out(137);
##goto _80;
##
##    __quex_assert_no_passage();
##_8: /* (138 from 132) (138 from 142) (138 from 139) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _81;
##
##_81:
##
##    __quex_debug_state(138);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _14;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(138);
##goto _72;
##
##    __quex_assert_no_passage();
##_9: /* (139 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _82;
##
##_82:
##
##    __quex_debug_state(139);
##    switch( input ) {
##        case 0x80: 
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: goto _30;
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: 
##        case 0xBF: goto _8;
##
##    }
##
##    __quex_debug_drop_out(139);
##goto _72;
##
##    __quex_assert_no_passage();
##_10: /* (140 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _83;
##
##_83:
##
##    __quex_debug_state(140);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _18;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(140);
##goto _72;
##
##    __quex_assert_no_passage();
##_11: /* (141 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _84;
##
##_84:
##
##    __quex_debug_state(141);
##    switch( input ) {
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: 
##        case 0xBF: goto _14;
##
##    }
##
##    __quex_debug_drop_out(141);
##goto _72;
##
##    __quex_assert_no_passage();
##_12: /* (142 from 180) (142 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _85;
##
##_85:
##
##    __quex_debug_state(142);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _8;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(142);
##goto _72;
##
##    __quex_assert_no_passage();
##_13: /* (144 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _86;
##
##_86:
##
##    __quex_debug_state(144);
##    switch( input ) {
##        case 0x80: 
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: 
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: goto _22;
##        case 0xBF: goto _23;
##
##    }
##
##    __quex_debug_drop_out(144);
##goto _72;
##
##    __quex_assert_no_passage();
##_14: /* (145 from 138) (145 from 132) (145 from 141) (145 from 149) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _87;
##
##_87:
##
##    __quex_debug_state(145);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _6;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(145);
##goto _72;
##
##    __quex_assert_no_passage();
##_15: /* (148 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _88;
##
##_88:
##
##    __quex_debug_state(148);
##    __quex_debug_drop_out(148);
##goto _90;
##
##    __quex_assert_no_passage();
##_16: /* (149 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _91;
##
##_91:
##
##    __quex_debug_state(149);
##    switch( input ) {
##        case 0x80: goto _21;
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: 
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: 
##        case 0xBF: goto _14;
##
##    }
##
##    __quex_debug_drop_out(149);
##goto _72;
##
##    __quex_assert_no_passage();
##_17: /* (151 from 132) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _92;
##
##_92:
##
##    __quex_debug_state(151);
##    __quex_debug_drop_out(151);
##goto _94;
##
##    __quex_assert_no_passage();
##_18: /* (154 from 140) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _95;
##
##_95:
##
##    __quex_debug_state(154);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _19;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(154);
##goto _72;
##
##    __quex_assert_no_passage();
##_19: /* (155 from 154) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _96;
##
##_96:
##
##    __quex_debug_state(155);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _20;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(155);
##goto _72;
##
##    __quex_assert_no_passage();
##_20: /* (156 from 155) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _97;
##
##_97:
##
##    __quex_debug_state(156);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _6;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(156);
##goto _98;
##
##    __quex_assert_no_passage();
##_21: /* (157 from 149) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _99;
##
##_99:
##
##    __quex_debug_state(157);
##    switch( input ) {
##        case 0x80: 
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: 
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: goto _6;
##        case 0xA8: 
##        case 0xA9: goto _7;
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: 
##        case 0xBF: goto _6;
##
##    }
##
##    __quex_debug_drop_out(157);
##goto _72;
##
##    __quex_assert_no_passage();
##_22: /* (161 from 144) (161 from 133) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _100;
##
##_100:
##
##    __quex_debug_state(161);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _25;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(161);
##goto _72;
##
##    __quex_assert_no_passage();
##_23: /* (162 from 144) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _101;
##
##_101:
##
##    __quex_debug_state(162);
##    switch( input ) {
##        case 0x80: 
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: 
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: goto _25;
##        case 0xBF: goto _24;
##
##    }
##
##    __quex_debug_drop_out(162);
##goto _72;
##
##    __quex_assert_no_passage();
##_24: /* (163 from 162) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _102;
##
##_102:
##
##    __quex_debug_state(163);
##    switch( input ) {
##        case 0x80: 
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: 
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: goto _26;
##        case 0xBF: goto _28;
##
##    }
##
##    __quex_debug_drop_out(163);
##goto _72;
##
##    __quex_assert_no_passage();
##_25: /* (164 from 162) (164 from 161) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _103;
##
##_103:
##
##    __quex_debug_state(164);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _26;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(164);
##goto _72;
##
##    __quex_assert_no_passage();
##_26: /* (165 from 164) (165 from 163) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _104;
##
##_104:
##
##    __quex_debug_state(165);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _27;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(165);
##goto _98;
##
##    __quex_assert_no_passage();
##_27: /* (166 from 165) (166 from 167) (166 from 190) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _105;
##
##_105:
##
##    __quex_debug_state(166);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _6;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(166);
##goto _77;
##
##    __quex_assert_no_passage();
##_28: /* (167 from 163) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _106;
##
##_106:
##
##    __quex_debug_state(167);
##    switch( input ) {
##        case 0x80: 
##        case 0x81: 
##        case 0x82: 
##        case 0x83: 
##        case 0x84: 
##        case 0x85: 
##        case 0x86: 
##        case 0x87: 
##        case 0x88: 
##        case 0x89: 
##        case 0x8A: 
##        case 0x8B: 
##        case 0x8C: 
##        case 0x8D: 
##        case 0x8E: 
##        case 0x8F: 
##        case 0x90: 
##        case 0x91: 
##        case 0x92: 
##        case 0x93: 
##        case 0x94: 
##        case 0x95: 
##        case 0x96: 
##        case 0x97: 
##        case 0x98: 
##        case 0x99: 
##        case 0x9A: 
##        case 0x9B: 
##        case 0x9C: 
##        case 0x9D: 
##        case 0x9E: 
##        case 0x9F: 
##        case 0xA0: 
##        case 0xA1: 
##        case 0xA2: 
##        case 0xA3: 
##        case 0xA4: 
##        case 0xA5: 
##        case 0xA6: 
##        case 0xA7: 
##        case 0xA8: 
##        case 0xA9: 
##        case 0xAA: 
##        case 0xAB: 
##        case 0xAC: 
##        case 0xAD: 
##        case 0xAE: 
##        case 0xAF: 
##        case 0xB0: 
##        case 0xB1: 
##        case 0xB2: 
##        case 0xB3: 
##        case 0xB4: 
##        case 0xB5: 
##        case 0xB6: 
##        case 0xB7: 
##        case 0xB8: 
##        case 0xB9: 
##        case 0xBA: 
##        case 0xBB: 
##        case 0xBC: 
##        case 0xBD: 
##        case 0xBE: goto _27;
##        case 0xBF: goto _29;
##
##    }
##
##    __quex_debug_drop_out(167);
##goto _98;
##
##    __quex_assert_no_passage();
##_29: /* (168 from 167) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _107;
##
##_107:
##
##    __quex_debug_state(168);
##    if( input >= 0xBF ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _6;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(168);
##goto _77;
##
##    __quex_assert_no_passage();
##_30: /* (172 from 139) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _108;
##
##_108:
##
##    __quex_debug_state(172);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _31;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(172);
##goto _72;
##
##    __quex_assert_no_passage();
##_31: /* (175 from 172) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _109;
##
##_109:
##
##    __quex_debug_state(175);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _32;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(175);
##goto _72;
##
##    __quex_assert_no_passage();
##_32: /* (176 from 175) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _110;
##
##_110:
##
##    __quex_debug_state(176);
##    __quex_debug_drop_out(176);
##goto _98;
##
##    __quex_assert_no_passage();
##_33: /* (177 from 135) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _112;
##
##_112:
##
##    __quex_debug_state(177);
##    __quex_debug_drop_out(177);
##goto _114;
##
##    __quex_assert_no_passage();
##_34: /* (178 from 133) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _115;
##
##_115:
##
##    __quex_debug_state(178);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _36;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(178);
##goto _72;
##
##    __quex_assert_no_passage();
##_35: /* (180 from 133) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _116;
##
##_116:
##
##    __quex_debug_state(180);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _12;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(180);
##goto _72;
##
##    __quex_assert_no_passage();
##_36: /* (188 from 178) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _117;
##
##_117:
##
##    __quex_debug_state(188);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _37;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(188);
##goto _72;
##
##    __quex_assert_no_passage();
##_37: /* (190 from 188) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _118;
##
##_118:
##
##    __quex_debug_state(190);
##    if( input >= 0xC0 ) {
##
##    
##} else if( input >= 0x80 ) {
##        goto _27;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(190);
##goto _72;
##    /* (*) Terminal states _______________________________________________________
##     *
##     * States that implement actions of the 'winner patterns.                     */
##_80: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_LINES_ADD((size_t)1);
##__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
##if( me->buffer._input_p != LexemeEnd ) goto _68;;
##goto _1;
##_90: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
##if( me->buffer._input_p != LexemeEnd ) goto _68;;
##goto _1;
##_94: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= (self.counter._column_number_at_end % (4)));
##__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4);
##if( me->buffer._input_p != LexemeEnd ) goto _68;;
##goto _1;
##_114: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);
##if( me->buffer._input_p != LexemeEnd ) goto _68;;
##goto _1;
##_98: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);
##if( me->buffer._input_p != LexemeEnd ) goto _68;;
##goto _1;
##_77: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
##if( me->buffer._input_p != LexemeEnd ) goto _68;;
##goto _1;
##_119: __quex_debug("* TERMINAL <BEYOND>\n");
##    me->buffer._input_p = me->buffer._lexeme_start_p;
##goto _1;
##_72:
##    goto _119;
##_1:
##    __quex_assert(me->buffer._input_p == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
##   return;
###  undef self
##}
###endif /* __QUEX_OPTION_COUNTER */
##
_____________________________________________________________________________
file:     './data/example.utf8';
char_size: 1;
byte_n:    1605;
column_n:  1298;
line_n:    6;
## gcc -Wall -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf8"'  -DDEF_CHARACTER_TYPE=uint8_t  -o test
