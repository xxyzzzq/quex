#spec 
       [\x0A\x0b\x0c\x85\X2028\X2029]      => newline 1;
       [\x0d]                                   => newline 0;
       [\t]                                     => grid    4;
       [\X0600-\X06FF]                         => space   3;
       [\U010000-\U10FFFF]                     => space   2;
    
<string>:7:warning: No '\else' defined in counter setup. Assume '\else => space 1;'
<string>:7:warning: ('--suppress 12' to avoid this message)
###ifdef __QUEX_OPTION_COUNTER
##void
##QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_CHARACTER* LexemeBegin, QUEX_TYPE_CHARACTER* LexemeEnd)
##{
###   define self (*me)
##    QUEX_TYPE_CHARACTER            input                          = (QUEX_TYPE_CHARACTER)(0x00);
##    (void)me;
##    __QUEX_IF_COUNT_SHIFT_VALUES();
##    /* Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)
##     * => Caller does not need to check
##     * BUT, if so quit immediately after 'shift values'. */
##    __quex_assert(LexemeBegin <= LexemeEnd);
##    if(LexemeBegin == LexemeEnd) return;
##    me->buffer._read_p = LexemeBegin;
## /* (33 from NONE) */
##    input = *(me->buffer._read_p);
##    me->buffer._lexeme_start_p = me->buffer._read_p;
##
##_14:
##
##    __quex_debug("Init State\n");
##    __quex_debug_state(33);
##    if( input < 0x600 ) {
##        if( input < 0xD ) {
##            switch( input ) {
##                case 0x0: 
##                case 0x1: 
##                case 0x2: 
##                case 0x3: 
##                case 0x4: 
##                case 0x5: 
##                case 0x6: 
##                case 0x7: 
##                case 0x8: goto _5;
##                case 0x9: goto _9;
##                case 0xA: 
##                case 0xB: 
##                case 0xC: goto _6;
##
##            }
##        } else {
##            if( input == 0xD ) {
##                goto _8;
##            
##} else if( input < 0x85 ) {
##                goto _5;
##            
##} else if( input == 0x85 ) {
##                goto _6;
##            } else {
##                goto _5;
##            
##}
##        
##}
##    } else {
##        if( input < 0xD800 ) {
##            if( input < 0x700 ) {
##                goto _3;
##            
##} else if( input < 0x2028 ) {
##                goto _5;
##            
##} else if( input < 0x202A ) {
##                goto _6;
##            } else {
##                goto _5;
##            
##}
##        } else {
##            if( input < 0xDC00 ) {
##                goto _4;
##            
##} else if( input < 0xE000 ) {
##
##            
##} else if( input < 0x10000 ) {
##                goto _5;
##            } else {
##
##            
##}
##        
##}
##    
##}
##
##    __quex_debug_drop_out(33);
##goto _1;
##
##
##    __quex_assert_no_passage();
##_13: /* (33 from 44) */
##    me->buffer._lexeme_start_p = me->buffer._read_p;
##    goto _14;
##
##
##
##    __quex_assert_no_passage();
##_3: /* (34 from 33) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _16;
##
##_16:
##
##    __quex_debug_state(34);
##    __quex_debug_drop_out(34);
##goto _18;
##
##    __quex_assert_no_passage();
##_4: /* (35 from 33) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _19;
##
##_19:
##
##    __quex_debug_state(35);
##    if( input >= 0xE000 ) {
##
##    
##} else if( input >= 0xDC00 ) {
##        goto _10;
##    } else {
##
##    
##}
##
##    __quex_debug_drop_out(35);
##goto _20;
##
##    __quex_assert_no_passage();
##_5: /* (36 from 33) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _21;
##
##_21:
##
##    __quex_debug_state(36);
##    __quex_debug_drop_out(36);
##goto _23;
##
##    __quex_assert_no_passage();
##_6: /* (37 from 33) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _24;
##
##_24:
##
##    __quex_debug_state(37);
##    __quex_debug_drop_out(37);
##goto _26;
##
##    __quex_assert_no_passage();
## /* (38 from 33) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _27;
##
##_27:
##
##    __quex_debug_state(38);
##    __quex_debug_drop_out(38);
##goto _29;
##
##    __quex_assert_no_passage();
##_8: /* (41 from 33) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _30;
##
##_30:
##
##    __quex_debug_state(41);
##    __quex_debug_drop_out(41);
##goto _32;
##
##    __quex_assert_no_passage();
##_9: /* (42 from 33) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _33;
##
##_33:
##
##    __quex_debug_state(42);
##    __quex_debug_drop_out(42);
##goto _35;
##
##    __quex_assert_no_passage();
##_10: /* (43 from 35) */
##    ++(me->buffer._read_p);
##    input = *(me->buffer._read_p);
##    goto _36;
##
##_36:
##
##    __quex_debug_state(43);
##    __quex_debug_drop_out(43);
##goto _38;
##    /* (*) Terminal states _______________________________________________________
##     *
##     * States that implement actions of the 'winner patterns.                     */
##_26: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_LINES_ADD((size_t)1);
##__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
##if( me->buffer._read_p != LexemeEnd ) goto _13;;
##goto _1;
##_32: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
##if( me->buffer._read_p != LexemeEnd ) goto _13;;
##goto _1;
##_35: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= (self.counter._column_number_at_end % (4)));
##__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4);
##if( me->buffer._read_p != LexemeEnd ) goto _13;;
##goto _1;
##_18: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);
##if( me->buffer._read_p != LexemeEnd ) goto _13;;
##goto _1;
##_38: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);
##if( me->buffer._read_p != LexemeEnd ) goto _13;;
##goto _1;
##_23: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
##if( me->buffer._read_p != LexemeEnd ) goto _13;;
##goto _1;
##_29: __quex_debug("* TERMINAL <BEYOND>\n");
##    me->buffer._read_p = me->buffer._lexeme_start_p;
##goto _1;
##_20:
##    goto _29;
##_1:
##    __quex_assert(me->buffer._read_p == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
##   return;
###  undef self
##}
###endif /* __QUEX_OPTION_COUNTER */
##
_____________________________________________________________________________
file:     './data/example.utf16le';
char_size: 2;
byte_n:    809;
column_n:  1298;
line_n:    6;
## gcc -Wall -Werror -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf16le"'  -DDEF_CHARACTER_TYPE=uint16_t  -o test
