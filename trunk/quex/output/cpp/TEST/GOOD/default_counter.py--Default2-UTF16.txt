#spec 
       [\x0A\x0b\x0c\x85\X2028\X2029]      => newline 1;
       [\x0d]                                   => newline 0;
       [\t]                                     => grid    4;
       [\X0600-\X06FF]                         => space   3;
       [\U010000-\U10FFFF]                     => space   2;
    
#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, const QUEX_TYPE_CHARACTER* LexemeBegin, const QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    const QUEX_TYPE_CHARACTER* iterator    = (const QUEX_TYPE_CHARACTER*)0;
    QUEX_TYPE_CHARACTER        input       = (QUEX_TYPE_CHARACTER)0;

    __QUEX_IF_COUNT_SHIFT_VALUES();

    for(iterator=LexemeBegin; iterator < LexemeEnd; ) {
        input = *iterator;
        __quex_debug("Init State\n");
        __quex_debug_state(73);
        if( input < 0x600 ) {
            if( input < 0xD ) {
                switch( input ) {
                    case 0x0: 
                    case 0x1: 
                    case 0x2: 
                    case 0x3: 
                    case 0x4: 
                    case 0x5: 
                    case 0x6: 
                    case 0x7: 
                    case 0x8: goto _79;
                    case 0x9: goto _74;
                    case 0xA: 
                    case 0xB: 
                    case 0xC: goto _75;

                }
            } else {
                if( input == 0xD ) {
                    goto _78;
                } else if( input < 0x85 ) {
                    goto _79;
                } else if( input == 0x85 ) {
                    goto _75;
                } else {
                    goto _79;
                }
            }
        } else {
            if( input < 0xD800 ) {
                if( input < 0x700 ) {
                    goto _76;
                } else if( input < 0x2028 ) {
                    goto _79;
                } else if( input < 0x202A ) {
                    goto _75;
                } else {
                    goto _79;
                }
            } else {
                if( input < 0xDC00 ) {
                    goto _77;
                } else if( input < 0xE000 ) {

                } else if( input < 0x10000 ) {
                    goto _79;
                } else {

                }
            }
        }
        __quex_debug_drop_out(73);
        
        goto _84; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_82: /* (82 from 77) */

        ++iterator;
        __quex_debug_state(82);
        __quex_debug_drop_out(82);
        goto TERMINAL_15;

        __quex_assert_no_passage();
_74: /* (74 from 73) */

        ++iterator;
        __quex_debug_state(74);
        __quex_debug_drop_out(74);
        goto TERMINAL_11;

        __quex_assert_no_passage();
_75: /* (75 from 73) */

        ++iterator;
        __quex_debug_state(75);
        __quex_debug_drop_out(75);
        goto TERMINAL_14;

        __quex_assert_no_passage();
_76: /* (76 from 73) */

        ++iterator;
        __quex_debug_state(76);
        __quex_debug_drop_out(76);
        goto TERMINAL_12;

        __quex_assert_no_passage();
_77: /* (77 from 73) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(77);
        if( input >= 0xE000 ) {

        } else if( input >= 0xDC00 ) {
            goto _82;
        } else {

        }
        __quex_debug_drop_out(77);
        
        goto _84; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_78: /* (78 from 73) */

        ++iterator;
        __quex_debug_state(78);
        __quex_debug_drop_out(78);
        goto TERMINAL_10;

        __quex_assert_no_passage();
_79: /* (79 from 73) */

        ++iterator;
        __quex_debug_state(79);
        __quex_debug_drop_out(79);
        goto TERMINAL_13;
TERMINAL_10:
        __quex_debug("* terminal 10:   \n");
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);

        continue;

TERMINAL_11:
        __quex_debug("* terminal 11:   \n");
                __QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end &= ~ ((size_t)0x3));
        __QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4);

        continue;

TERMINAL_12:
        __quex_debug("* terminal 12:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);

        continue;

TERMINAL_13:
        __quex_debug("* terminal 13:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);

        continue;

TERMINAL_14:
        __quex_debug("* terminal 14:   \n");
        __QUEX_IF_COUNT_LINES_ADD((size_t)1);
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);

        continue;

TERMINAL_15:
        __quex_debug("* terminal 15:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);

        continue;

_84: /* TERMINAL: FAILURE */
        QUEX_ERROR_EXIT("State machine failed.");
    }
    __quex_assert(iterator == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
#   undef self
}
#endif /* __QUEX_OPTION_COUNTER */
_____________________________________________________________________________
file:     './data/example.utf16le';
char_size: 2;
byte_n:    809;
column_n:  1298;
line_n:    6;
## gcc -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf16le"'  -DDEF_CHARACTER_TYPE=uint16_t  -o test
