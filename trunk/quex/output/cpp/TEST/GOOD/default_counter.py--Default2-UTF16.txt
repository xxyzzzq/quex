#spec 
       [\x0A\x0b\x0c\x85\X2028\X2029]      => newline 1;
       [\x0d]                                   => newline 0;
       [\t]                                     => grid    4;
       [\X0600-\X06FF]                         => space   3;
       [\U010000-\U10FFFF]                     => space   2;
    
#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_CHARACTER* LexemeBegin, QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    QUEX_TYPE_CHARACTER            input                          = (QUEX_TYPE_CHARACTER)(0x00);
    (void)me; (void)LexemeBegin; (void)LexemeEnd;
    __QUEX_IF_COUNT_SHIFT_VALUES();
    __quex_assert(LexemeBegin <= LexemeEnd);
    me->buffer._input_p = LexemeBegin;
_3: /* (37 from NONE) (37 from 48) */
    input = *(me->buffer._input_p);



    __quex_debug("Init State\n");
    __quex_debug_state(37);
    if( input < 0x600 ) {
        if( input < 0xD ) {
            switch( input ) {
                case 0x0: 
                case 0x1: 
                case 0x2: 
                case 0x3: 
                case 0x4: 
                case 0x5: 
                case 0x6: 
                case 0x7: 
                case 0x8: goto _6;
                case 0x9: goto _9;
                case 0xA: 
                case 0xB: 
                case 0xC: goto _5;

            }
        } else {
            if( input == 0xD ) {
                goto _4;
            
} else if( input < 0x85 ) {
                goto _6;
            
} else if( input == 0x85 ) {
                goto _5;
            } else {
                goto _6;
            
}
        
}
    } else {
        if( input < 0xD800 ) {
            if( input < 0x700 ) {
                goto _8;
            
} else if( input < 0x2028 ) {
                goto _6;
            
} else if( input < 0x202A ) {
                goto _5;
            } else {
                goto _6;
            
}
        } else {
            if( input < 0xDC00 ) {
                goto _7;
            
} else if( input < 0xE000 ) {

            
} else if( input < 0x10000 ) {
                goto _6;
            } else {

            
}
        
}
    
}

    __quex_debug_drop_out(37);
    __quex_debug("Character counting terminated.\n");
    goto _2;


    __quex_assert_no_passage();


    __quex_assert_no_passage();
_4: /* (38 from 37) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _15;

_15:

    __quex_debug_state(38);
    __quex_debug_drop_out(38);
goto _17;

    __quex_assert_no_passage();
_5: /* (39 from 37) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _18;

_18:

    __quex_debug_state(39);
    __quex_debug_drop_out(39);
goto _20;

    __quex_assert_no_passage();
_6: /* (40 from 37) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _21;

_21:

    __quex_debug_state(40);
    __quex_debug_drop_out(40);
goto _23;

    __quex_assert_no_passage();
_7: /* (41 from 37) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _24;

_24:

    __quex_debug_state(41);
    if( input >= 0xE000 ) {

    
} else if( input >= 0xDC00 ) {
        goto _10;
    } else {

    
}

    __quex_debug_drop_out(41);
goto _2;

    __quex_assert_no_passage();
_8: /* (43 from 37) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _25;

_25:

    __quex_debug_state(43);
    __quex_debug_drop_out(43);
goto _27;

    __quex_assert_no_passage();
_9: /* (45 from 37) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _28;

_28:

    __quex_debug_state(45);
    __quex_debug_drop_out(45);
goto _30;

    __quex_assert_no_passage();
_10: /* (46 from 41) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _31;

_31:

    __quex_debug_state(46);
    __quex_debug_drop_out(46);
goto _33;
    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_23: __quex_debug("* TERMINAL [0000, 0008] [000E, 0084] [0086, 05FF] [0700, 2027] [202A, D7FF] [E000, FFFF] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_33: __quex_debug("* TERMINAL [10000, 10FFFF] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_27: __quex_debug("* TERMINAL [0600, 06FF] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_30: __quex_debug("* TERMINAL [0009] \n");
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end &= ~ ((size_t)0x3));
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_17: __quex_debug("* TERMINAL [000D] \n");
__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_20: __quex_debug("* TERMINAL [000A, 000C] [0085] [2028, 2029] \n");
__QUEX_IF_COUNT_LINES_ADD((size_t)1);
__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_2: __quex_debug("* TERMINAL -- Exit --\n");
goto _1;
_1:
    __quex_assert(me->buffer._input_p == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
   return;
#  undef self
}
#endif /* __QUEX_OPTION_COUNTER */

_____________________________________________________________________________
file:     './data/example.utf16le';
char_size: 2;
byte_n:    809;
column_n:  1298;
line_n:    6;
## gcc -Wall -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf16le"'  -DDEF_CHARACTER_TYPE=uint16_t  -o test
