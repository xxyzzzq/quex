#spec 
       [\x0A\x0b\x0c\x85\X2028\X2029]      => newline 1;
       [\x0d]                                   => newline 0;
       [\t]                                     => grid    4;
       [\X0600-\X06FF]                         => space   3;
       [\U010000-\U10FFFF]                     => space   2;
    
#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_CHARACTER* LexemeBegin, QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    QUEX_TYPE_CHARACTER* iterator    = LexemeBegin;
    QUEX_TYPE_CHARACTER  input       = (QUEX_TYPE_CHARACTER)0;
    __QUEX_IF_COUNT_SHIFT_VALUES();

    __quex_assert(LexemeBegin <= LexemeEnd);
    for(iterator=LexemeBegin; iterator < LexemeEnd; ) {
    input = *((iterator));
    __quex_debug("Init State\n");
    __quex_debug_state(83);
    if( input < 0x600 ) {
        if( input < 0xD ) {
            switch( input ) {
                case 0x0: 
                case 0x1: 
                case 0x2: 
                case 0x3: 
                case 0x4: 
                case 0x5: 
                case 0x6: 
                case 0x7: 
                case 0x8: goto _84;
                case 0x9: goto _88;
                case 0xA: 
                case 0xB: 
                case 0xC: goto _89;

            }
        } else {
            if( input == 0xD ) {
                goto _86;
            } else if( input < 0x85 ) {
                goto _84;
            } else if( input == 0x85 ) {
                goto _89;
            } else {
                goto _84;
            }
        }
    } else {
        if( input < 0xD800 ) {
            if( input < 0x700 ) {
                goto _87;
            } else if( input < 0x2028 ) {
                goto _84;
            } else if( input < 0x202A ) {
                goto _89;
            } else {
                goto _84;
            }
        } else {
            if( input < 0xDC00 ) {
                goto _85;
            } else if( input < 0xE000 ) {

            } else if( input < 0x10000 ) {
                goto _84;
            } else {

            }
        }
    }
    __quex_debug_drop_out(83);

goto _92; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_90: /* (90 from 85) */

    ++((iterator));
    __quex_debug_state(90);
    __quex_debug_drop_out(90);
goto TERMINAL_17;

    __quex_assert_no_passage();
_84: /* (84 from 83) */

    ++((iterator));
    __quex_debug_state(84);
    __quex_debug_drop_out(84);
goto TERMINAL_20;

    __quex_assert_no_passage();
_85: /* (85 from 83) */

    ++((iterator));
    input = *((iterator));
    __quex_debug_state(85);
    if( input >= 0xE000 ) {

    } else if( input >= 0xDC00 ) {
        goto _90;
    } else {

    }
    __quex_debug_drop_out(85);

goto _92; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_86: /* (86 from 83) */

    ++((iterator));
    __quex_debug_state(86);
    __quex_debug_drop_out(86);
goto TERMINAL_18;

    __quex_assert_no_passage();
_87: /* (87 from 83) */

    ++((iterator));
    __quex_debug_state(87);
    __quex_debug_drop_out(87);
goto TERMINAL_16;

    __quex_assert_no_passage();
_88: /* (88 from 83) */

    ++((iterator));
    __quex_debug_state(88);
    __quex_debug_drop_out(88);
goto TERMINAL_21;

    __quex_assert_no_passage();
_89: /* (89 from 83) */

    ++((iterator));
    __quex_debug_state(89);
    __quex_debug_drop_out(89);
goto TERMINAL_19;
TERMINAL_16:
        __quex_debug("* terminal 16:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);
            continue;
TERMINAL_17:
        __quex_debug("* terminal 17:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);
            continue;
TERMINAL_18:
        __quex_debug("* terminal 18:   \n");
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
            continue;
TERMINAL_19:
        __quex_debug("* terminal 19:   \n");
        __QUEX_IF_COUNT_LINES_ADD((size_t)1);
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
            continue;
TERMINAL_20:
        __quex_debug("* terminal 20:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
            continue;
TERMINAL_21:
        __quex_debug("* terminal 21:   \n");
                __QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end &= ~ ((size_t)0x3));
        __QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4);
            continue;
    }
    __quex_assert(iterator == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
   return;
_92:
    QUEX_ERROR_EXIT("State machine failed.");
#  undef self
}
#endif /* __QUEX_OPTION_COUNTER */
_____________________________________________________________________________
file:     './data/example.utf16le';
char_size: 2;
byte_n:    809;
column_n:  1298;
line_n:    6;
## gcc -Wall -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf16le"'  -DDEF_CHARACTER_TYPE=uint16_t  -o test
