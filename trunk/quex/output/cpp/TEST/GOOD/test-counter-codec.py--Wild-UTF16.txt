#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_CHARACTER* LexemeBegin, QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    QUEX_TYPE_CHARACTER            input                          = (QUEX_TYPE_CHARACTER)(0x00);
    (void)me;
    __QUEX_IF_COUNT_SHIFT_VALUES();
    /* Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)
     * => Caller does not need to check
     * BUT, if so quit immediately after 'shift values'. */
    __quex_assert(LexemeBegin <= LexemeEnd);
    if(LexemeBegin == LexemeEnd) return;
    me->buffer._input_p = LexemeBegin;
_3: /* (54 from 67) (54 from NONE) */
    input = *(me->buffer._input_p);



    __quex_debug("Init State\n");
    __quex_debug_state(54);
    if( input < 0x40 ) {
        switch( input ) {
            case 0x0: 
            case 0x1: 
            case 0x2: 
            case 0x3: 
            case 0x4: 
            case 0x5: 
            case 0x6: 
            case 0x7: 
            case 0x8: 
            case 0x9: goto _6;
            case 0xA: goto _9;
            case 0xB: 
            case 0xC: 
            case 0xD: 
            case 0xE: 
            case 0xF: 
            case 0x10: 
            case 0x11: 
            case 0x12: 
            case 0x13: 
            case 0x14: 
            case 0x15: 
            case 0x16: 
            case 0x17: 
            case 0x18: 
            case 0x19: 
            case 0x1A: 
            case 0x1B: 
            case 0x1C: 
            case 0x1D: 
            case 0x1E: 
            case 0x1F: 
            case 0x20: 
            case 0x21: 
            case 0x22: 
            case 0x23: 
            case 0x24: 
            case 0x25: 
            case 0x26: 
            case 0x27: 
            case 0x28: 
            case 0x29: 
            case 0x2A: 
            case 0x2B: 
            case 0x2C: 
            case 0x2D: 
            case 0x2E: 
            case 0x2F: 
            case 0x30: 
            case 0x31: 
            case 0x32: 
            case 0x33: 
            case 0x34: 
            case 0x35: 
            case 0x36: 
            case 0x37: 
            case 0x38: 
            case 0x39: 
            case 0x3A: 
            case 0x3B: goto _6;
            case 0x3C: goto _10;
            case 0x3D: goto _6;
            case 0x3E: goto _7;
            case 0x3F: goto _8;

        }
    } else {
        if( input < 0xD809 ) {
            if( input < 0xD800 ) {
                goto _6;
            
} else if( input < 0xD808 ) {
                goto _4;
            } else {
                goto _5;
            
}
        } else {
            if( input < 0xDC00 ) {
                goto _4;
            
} else if( input < 0xE000 ) {

            
} else if( input < 0x10000 ) {
                goto _6;
            } else {

            
}
        
}
    
}

    __quex_debug_drop_out(54);
    __quex_debug("Character counting terminated.\n");
    goto _2;


    __quex_assert_no_passage();


    __quex_assert_no_passage();
_4: /* (64 from 54) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _16;

_16:

    __quex_debug_state(64);
    if( input >= 0xE000 ) {

    
} else if( input >= 0xDC00 ) {
        goto _6;
    } else {

    
}

    __quex_debug_drop_out(64);
goto _2;

    __quex_assert_no_passage();
_5: /* (55 from 54) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _17;

_17:

    __quex_debug_state(55);
    if( input < 0xDC02 ) {
        switch( input ) {
            case 0xDC00: goto _10;
            case 0xDC01: goto _6;

        }
    } else {
        if( input == 0xDC02 ) {
            goto _7;
        
} else if( input == 0xDC03 ) {
            goto _8;
        
} else if( input < 0xE000 ) {
            goto _6;
        } else {

        
}
    
}

    __quex_debug_drop_out(55);
goto _2;

    __quex_assert_no_passage();
_6: /* (56 from 64) (56 from 55) (56 from 54) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _18;

_18:

    __quex_debug_state(56);
    __quex_debug_drop_out(56);
goto _20;

    __quex_assert_no_passage();
_7: /* (57 from 54) (57 from 55) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _21;

_21:

    __quex_debug_state(57);
    __quex_debug_drop_out(57);
goto _23;

    __quex_assert_no_passage();
_8: /* (58 from 55) (58 from 54) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _24;

_24:

    __quex_debug_state(58);
    __quex_debug_drop_out(58);
goto _26;

    __quex_assert_no_passage();
_9: /* (59 from 54) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _27;

_27:

    __quex_debug_state(59);
    __quex_debug_drop_out(59);
goto _29;

    __quex_assert_no_passage();
_10: /* (62 from 55) (62 from 54) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _30;

_30:

    __quex_debug_state(62);
    __quex_debug_drop_out(62);
goto _32;
    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_32: __quex_debug("* TERMINAL [003C] [12000] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)0);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_20: __quex_debug("* TERMINAL [0000, 0009] [000B, 003B] [003D] [0040, D7FF] [E000, 11FFF] [12001] [12004, 10FFFF] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_23: __quex_debug("* TERMINAL [003E] [12002] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_26: __quex_debug("* TERMINAL [003F] [12003] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_29: __quex_debug("* TERMINAL [000A] \n");
__QUEX_IF_COUNT_LINES_ADD((size_t)1);
__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
if( me->buffer._input_p == LexemeEnd ) goto _1;;
goto _3;
_2: __quex_debug("* TERMINAL -- Exit --\n");
goto _1;
_1:
    __quex_assert(me->buffer._input_p == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
   return;
#  undef self
}
#endif /* __QUEX_OPTION_COUNTER */

_____________________________________________________________________________
file:     './data/example.utf16le';
char_size: 2;
byte_n:    809;
column_n:  544;
line_n:    1;
## gcc -Wall -Werror -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf16le"'  -DDEF_CHARACTER_TYPE=uint16_t  -o test
