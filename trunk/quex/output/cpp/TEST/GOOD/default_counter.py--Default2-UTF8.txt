#spec 
       [\x0A\x0b\x0c\x85\X2028\X2029]      => newline 1;
       [\x0d]                                   => newline 0;
       [\t]                                     => grid    4;
       [\X0600-\X06FF]                         => space   3;
       [\U010000-\U10FFFF]                     => space   2;
    
#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, const QUEX_TYPE_CHARACTER* LexemeBegin, const QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    const QUEX_TYPE_CHARACTER* iterator    = (const QUEX_TYPE_CHARACTER*)0;
    QUEX_TYPE_CHARACTER        input       = (QUEX_TYPE_CHARACTER)0;

    __QUEX_IF_COUNT_SHIFT_VALUES();

    for(iterator=LexemeBegin; iterator < LexemeEnd; ) {
        input = *iterator;
        __quex_debug("Init State\n");
        __quex_debug_state(172);
        if( input < 0xE0 ) {
            if( input < 0x80 ) {
                if( input >= 0xE ) {
                    goto _185;
                } else if( input == 0xD ) {
                    goto _183;
                } else if( input >= 0xA ) {
                    goto _177;
                } else if( input == 0x9 ) {
                    goto _175;
                } else {
                    goto _185;
                }
            } else {
                if( input < 0xC2 ) {
                    goto _231;
                } else if( input == 0xC2 ) {
                    goto _182;
                } else if( input < 0xD8 ) {
                    goto _174;
                } else if( input < 0xDC ) {
                    goto _187;
                } else {
                    goto _174;
                }
            }
        } else {
            if( input < 0xF1 ) {
                switch( input ) {
                    case 0xE0: goto _178;
                    case 0xE1: goto _176;
                    case 0xE2: goto _190;
                    case 0xE3: 
                    case 0xE4: 
                    case 0xE5: 
                    case 0xE6: 
                    case 0xE7: 
                    case 0xE8: 
                    case 0xE9: 
                    case 0xEA: 
                    case 0xEB: 
                    case 0xEC: 
                    case 0xED: 
                    case 0xEE: 
                    case 0xEF: goto _176;
                    case 0xF0: goto _184;

                }
            } else {
                if( input == 0xF1 ) {
                    goto _188;
                } else if( input < 0xF4 ) {
                    goto _173;
                } else if( input == 0xF4 ) {
                    goto _189;
                } else if( input < 0xF8 ) {
                    goto _180;
                } else {
                    goto _231;
                }
            }
        }
_231:
        __quex_debug_drop_out(172);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_185: /* (185 from 209) (185 from 207) (185 from 182) (185 from 174) (185 from 172) (185 from 194) (185 from 229) */

        ++iterator;
        __quex_debug_state(185);
        __quex_debug_drop_out(185);
        goto TERMINAL_13;

        __quex_assert_no_passage();
_174: /* (174 from 190) (174 from 172) (174 from 178) (174 from 176) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(174);
        if( input >= 0xC0 ) {
            goto _234;
        } else if( input >= 0x80 ) {
            goto _185;
        } else {
            goto _234;
        }
_234:
        __quex_debug_drop_out(174);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_207: /* (207 from 208) (207 from 218) (207 from 206) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(207);
        if( input >= 0xC0 ) {
            goto _235;
        } else if( input >= 0x80 ) {
            goto _185;
        } else {
            goto _235;
        }
_235:
        __quex_debug_drop_out(207);
        goto TERMINAL_13;

        __quex_assert_no_passage();
_176: /* (176 from 172) (176 from 180) (176 from 189) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(176);
        if( input >= 0xC0 ) {
            goto _236;
        } else if( input >= 0x80 ) {
            goto _174;
        } else {
            goto _236;
        }
_236:
        __quex_debug_drop_out(176);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_177: /* (177 from 194) (177 from 182) (177 from 172) */

        ++iterator;
        __quex_debug_state(177);
        __quex_debug_drop_out(177);
        goto TERMINAL_14;

        __quex_assert_no_passage();
_202: /* (202 from 184) (202 from 188) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(202);
        if( input >= 0xC0 ) {
            goto _238;
        } else if( input >= 0x80 ) {
            goto _205;
        } else {
            goto _238;
        }
_238:
        __quex_debug_drop_out(202);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_205: /* (205 from 203) (205 from 202) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(205);
        if( input >= 0xC0 ) {
            goto _239;
        } else if( input >= 0x80 ) {
            goto _206;
        } else {
            goto _239;
        }
_239:
        __quex_debug_drop_out(205);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_206: /* (206 from 205) (206 from 204) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(206);
        if( input >= 0xC0 ) {
            goto _240;
        } else if( input >= 0x80 ) {
            goto _207;
        } else {
            goto _240;
        }
_240:
        __quex_debug_drop_out(206);
        goto TERMINAL_15;

        __quex_assert_no_passage();
_180: /* (180 from 172) (180 from 211) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(180);
        if( input >= 0xC0 ) {
            goto _241;
        } else if( input >= 0x80 ) {
            goto _176;
        } else {
            goto _241;
        }
_241:
        __quex_debug_drop_out(180);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_194: /* (194 from 190) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(194);
        if( input >= 0xC0 ) {
            goto _242;
        } else if( input >= 0xAA ) {
            goto _185;
        } else if( input >= 0xA8 ) {
            goto _177;
        } else if( input >= 0x80 ) {
            goto _185;
        } else {
            goto _242;
        }
_242:
        __quex_debug_drop_out(194);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_195: /* (195 from 189) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(195);
        if( input >= 0xC0 ) {
            goto _243;
        } else if( input >= 0x80 ) {
            goto _199;
        } else {
            goto _243;
        }
_243:
        __quex_debug_drop_out(195);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_199: /* (199 from 195) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(199);
        if( input >= 0xC0 ) {
            goto _244;
        } else if( input >= 0x80 ) {
            goto _200;
        } else {
            goto _244;
        }
_244:
        __quex_debug_drop_out(199);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_200: /* (200 from 199) */

        ++iterator;
        __quex_debug_state(200);
        __quex_debug_drop_out(200);
        goto TERMINAL_15;

        __quex_assert_no_passage();
_203: /* (203 from 188) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(203);
        if( input >= 0xC0 ) {
            goto _246;
        } else if( input == 0xBF ) {
            goto _204;
        } else if( input >= 0x80 ) {
            goto _205;
        } else {
            goto _246;
        }
_246:
        __quex_debug_drop_out(203);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_204: /* (204 from 203) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(204);
        if( input >= 0xC0 ) {
            goto _247;
        } else if( input == 0xBF ) {
            goto _208;
        } else if( input >= 0x80 ) {
            goto _206;
        } else {
            goto _247;
        }
_247:
        __quex_debug_drop_out(204);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_208: /* (208 from 204) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(208);
        if( input >= 0xC0 ) {
            goto _248;
        } else if( input == 0xBF ) {
            goto _209;
        } else if( input >= 0x80 ) {
            goto _207;
        } else {
            goto _248;
        }
_248:
        __quex_debug_drop_out(208);
        goto TERMINAL_15;

        __quex_assert_no_passage();
_209: /* (209 from 208) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(209);
        if( input >= 0xBF ) {
            goto _249;
        } else if( input >= 0x80 ) {
            goto _185;
        } else {
            goto _249;
        }
_249:
        __quex_debug_drop_out(209);
        goto TERMINAL_13;

        __quex_assert_no_passage();
_210: /* (210 from 187) */

        ++iterator;
        __quex_debug_state(210);
        __quex_debug_drop_out(210);
        goto TERMINAL_12;

        __quex_assert_no_passage();
_211: /* (211 from 184) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(211);
        if( input >= 0xC0 ) {
            goto _251;
        } else if( input >= 0x80 ) {
            goto _180;
        } else {
            goto _251;
        }
_251:
        __quex_debug_drop_out(211);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_213: /* (213 from 184) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(213);
        if( input >= 0xC0 ) {
            goto _252;
        } else if( input >= 0x80 ) {
            goto _216;
        } else {
            goto _252;
        }
_252:
        __quex_debug_drop_out(213);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_216: /* (216 from 213) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(216);
        if( input >= 0xC0 ) {
            goto _253;
        } else if( input >= 0x80 ) {
            goto _218;
        } else {
            goto _253;
        }
_253:
        __quex_debug_drop_out(216);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_218: /* (218 from 216) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(218);
        if( input >= 0xC0 ) {
            goto _254;
        } else if( input >= 0x80 ) {
            goto _207;
        } else {
            goto _254;
        }
_254:
        __quex_debug_drop_out(218);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_226: /* (226 from 173) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(226);
        if( input >= 0xC0 ) {
            goto _255;
        } else if( input >= 0x80 ) {
            goto _228;
        } else {
            goto _255;
        }
_255:
        __quex_debug_drop_out(226);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_228: /* (228 from 226) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(228);
        if( input >= 0xC0 ) {
            goto _256;
        } else if( input >= 0x80 ) {
            goto _229;
        } else {
            goto _256;
        }
_256:
        __quex_debug_drop_out(228);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_229: /* (229 from 228) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(229);
        if( input >= 0xC0 ) {
            goto _257;
        } else if( input >= 0x80 ) {
            goto _185;
        } else {
            goto _257;
        }
_257:
        __quex_debug_drop_out(229);
        goto TERMINAL_15;

        __quex_assert_no_passage();
_173: /* (173 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(173);
        if( input >= 0xC0 ) {
            goto _258;
        } else if( input >= 0x80 ) {
            goto _226;
        } else {
            goto _258;
        }
_258:
        __quex_debug_drop_out(173);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_175: /* (175 from 172) */

        ++iterator;
        __quex_debug_state(175);
        __quex_debug_drop_out(175);
        goto TERMINAL_11;

        __quex_assert_no_passage();
_178: /* (178 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(178);
        if( input >= 0xC0 ) {
            goto _260;
        } else if( input >= 0xA0 ) {
            goto _174;
        } else {
            goto _260;
        }
_260:
        __quex_debug_drop_out(178);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_182: /* (182 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(182);
        if( input >= 0xC0 ) {
            goto _261;
        } else if( input >= 0x86 ) {
            goto _185;
        } else if( input == 0x85 ) {
            goto _177;
        } else if( input >= 0x80 ) {
            goto _185;
        } else {
            goto _261;
        }
_261:
        __quex_debug_drop_out(182);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_183: /* (183 from 172) */

        ++iterator;
        __quex_debug_state(183);
        __quex_debug_drop_out(183);
        goto TERMINAL_10;

        __quex_assert_no_passage();
_184: /* (184 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(184);
        if( input >= 0xC0 ) {
            goto _263;
        } else if( input >= 0x90 ) {
            goto _202;
        } else if( input >= 0x88 ) {
            goto _213;
        } else if( input >= 0x84 ) {
            goto _211;
        } else {
            goto _263;
        }
_263:
        __quex_debug_drop_out(184);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_187: /* (187 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(187);
        if( input >= 0xC0 ) {
            goto _264;
        } else if( input >= 0x80 ) {
            goto _210;
        } else {
            goto _264;
        }
_264:
        __quex_debug_drop_out(187);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_188: /* (188 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(188);
        if( input >= 0xC0 ) {
            goto _265;
        } else if( input == 0xBF ) {
            goto _203;
        } else if( input >= 0x80 ) {
            goto _202;
        } else {
            goto _265;
        }
_265:
        __quex_debug_drop_out(188);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_189: /* (189 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(189);
        if( input >= 0xC0 ) {
            goto _266;
        } else if( input >= 0x90 ) {
            goto _176;
        } else if( input >= 0x80 ) {
            goto _195;
        } else {
            goto _266;
        }
_266:
        __quex_debug_drop_out(189);
        
        goto _232; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_190: /* (190 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(190);
        if( input >= 0xC0 ) {
            goto _267;
        } else if( input >= 0x81 ) {
            goto _174;
        } else if( input == 0x80 ) {
            goto _194;
        } else {
            goto _267;
        }
_267:
        __quex_debug_drop_out(190);
        
        goto _232; /* TERMINAL_FAILURE */
TERMINAL_10:
        __quex_debug("* terminal 10:   \n");
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);

        continue;

TERMINAL_11:
        __quex_debug("* terminal 11:   \n");
                __QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end &= ~ ((size_t)0x3));
        __QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4);

        continue;

TERMINAL_12:
        __quex_debug("* terminal 12:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);

        continue;

TERMINAL_13:
        __quex_debug("* terminal 13:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);

        continue;

TERMINAL_14:
        __quex_debug("* terminal 14:   \n");
        __QUEX_IF_COUNT_LINES_ADD((size_t)1);
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);

        continue;

TERMINAL_15:
        __quex_debug("* terminal 15:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);

        continue;

_232: /* TERMINAL: FAILURE */
        QUEX_ERROR_EXIT("State machine failed.");
    }
    __quex_assert(iterator == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
#   undef self
}
#endif /* __QUEX_OPTION_COUNTER */
_____________________________________________________________________________
file:     './data/example.utf8';
char_size: 1;
byte_n:    1605;
column_n:  1298;
line_n:    6;
## gcc -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf8"'  -DDEF_CHARACTER_TYPE=uint8_t  -o test
