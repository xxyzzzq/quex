#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, const QUEX_TYPE_CHARACTER* LexemeBegin, const QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    const QUEX_TYPE_CHARACTER* iterator    = (const QUEX_TYPE_CHARACTER*)0;
    QUEX_TYPE_CHARACTER        input       = (QUEX_TYPE_CHARACTER)0;

    __QUEX_IF_COUNT_LINES(self.counter._line_number_at_begin     = self.counter._line_number_at_end);
    __QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_begin = self.counter._column_number_at_end);

    for(iterator=LexemeBegin; iterator < LexemeEnd; ) {
        input = *iterator;
        __quex_debug("Init State\n");
        __quex_debug_state(153);
        if( input < 0x80 ) {
            if( input < 0x3D ) {
                switch( input ) {
                    case 0x0: 
                    case 0x1: 
                    case 0x2: 
                    case 0x3: 
                    case 0x4: 
                    case 0x5: 
                    case 0x6: 
                    case 0x7: 
                    case 0x8: 
                    case 0x9: goto _168;
                    case 0xA: goto _166;
                    case 0xB: 
                    case 0xC: 
                    case 0xD: 
                    case 0xE: 
                    case 0xF: 
                    case 0x10: 
                    case 0x11: 
                    case 0x12: 
                    case 0x13: 
                    case 0x14: 
                    case 0x15: 
                    case 0x16: 
                    case 0x17: 
                    case 0x18: 
                    case 0x19: 
                    case 0x1A: 
                    case 0x1B: 
                    case 0x1C: 
                    case 0x1D: 
                    case 0x1E: 
                    case 0x1F: 
                    case 0x20: 
                    case 0x21: 
                    case 0x22: 
                    case 0x23: 
                    case 0x24: 
                    case 0x25: 
                    case 0x26: 
                    case 0x27: 
                    case 0x28: 
                    case 0x29: 
                    case 0x2A: 
                    case 0x2B: 
                    case 0x2C: 
                    case 0x2D: 
                    case 0x2E: 
                    case 0x2F: 
                    case 0x30: 
                    case 0x31: 
                    case 0x32: 
                    case 0x33: 
                    case 0x34: 
                    case 0x35: 
                    case 0x36: 
                    case 0x37: 
                    case 0x38: 
                    case 0x39: 
                    case 0x3A: 
                    case 0x3B: goto _168;
                    case 0x3C: goto _157;

                }
            } else {
                if( input == 0x3D ) {
                    goto _168;
                } else if( input == 0x3E ) {
                    goto _155;
                } else if( input == 0x3F ) {
                    goto _159;
                } else {
                    goto _168;
                }
            }
        } else {
            switch( input ) {
                case 0xC2: 
                case 0xC3: 
                case 0xC4: 
                case 0xC5: 
                case 0xC6: 
                case 0xC7: 
                case 0xC8: 
                case 0xC9: 
                case 0xCA: 
                case 0xCB: 
                case 0xCC: 
                case 0xCD: 
                case 0xCE: 
                case 0xCF: 
                case 0xD0: 
                case 0xD1: 
                case 0xD2: 
                case 0xD3: 
                case 0xD4: 
                case 0xD5: 
                case 0xD6: 
                case 0xD7: 
                case 0xD8: 
                case 0xD9: 
                case 0xDA: 
                case 0xDB: 
                case 0xDC: 
                case 0xDD: 
                case 0xDE: 
                case 0xDF: goto _156;
                case 0xE0: goto _164;
                case 0xE1: 
                case 0xE2: 
                case 0xE3: 
                case 0xE4: 
                case 0xE5: 
                case 0xE6: 
                case 0xE7: 
                case 0xE8: 
                case 0xE9: 
                case 0xEA: 
                case 0xEB: 
                case 0xEC: 
                case 0xED: 
                case 0xEE: 
                case 0xEF: goto _154;
                case 0xF0: goto _158;
                case 0xF1: goto _165;
                case 0xF2: 
                case 0xF3: goto _160;
                case 0xF4: 
                case 0xF5: 
                case 0xF6: 
                case 0xF7: goto _161;

            }
        }
        __quex_debug_drop_out(153);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_176: /* (176 from 175) (176 from 177) (176 from 181) (176 from 204) (176 from 203) (176 from 205) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(176);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _168;
        } else {

        }
        __quex_debug_drop_out(176);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_175: /* (175 from 202) (175 from 173) (175 from 174) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(175);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _176;
        } else {

        }
        __quex_debug_drop_out(175);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_168: /* (168 from 176) (168 from 178) (168 from 153) (168 from 156) */

        ++iterator;
        __quex_debug_state(168);
        __quex_debug_drop_out(168);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_171: /* (171 from 165) (171 from 158) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(171);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _174;
        } else {

        }
        __quex_debug_drop_out(171);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_174: /* (174 from 172) (174 from 171) (174 from 186) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(174);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _175;
        } else {

        }
        __quex_debug_drop_out(174);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_156: /* (156 from 164) (156 from 154) (156 from 153) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(156);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _168;
        } else {

        }
        __quex_debug_drop_out(156);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_154: /* (154 from 153) (154 from 161) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(154);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _156;
        } else {

        }
        __quex_debug_drop_out(154);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_160: /* (160 from 153) (160 from 158) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(160);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _180;
        } else {

        }
        __quex_debug_drop_out(160);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_161: /* (161 from 153) (161 from 187) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(161);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _154;
        } else {

        }
        __quex_debug_drop_out(161);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_172: /* (172 from 165) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(172);
        switch( input ) {
            case 0x80: 
            case 0x81: 
            case 0x82: 
            case 0x83: 
            case 0x84: 
            case 0x85: 
            case 0x86: 
            case 0x87: 
            case 0x88: 
            case 0x89: 
            case 0x8A: 
            case 0x8B: 
            case 0x8C: 
            case 0x8D: 
            case 0x8E: 
            case 0x8F: 
            case 0x90: 
            case 0x91: 
            case 0x92: 
            case 0x93: 
            case 0x94: 
            case 0x95: 
            case 0x96: 
            case 0x97: 
            case 0x98: 
            case 0x99: 
            case 0x9A: 
            case 0x9B: 
            case 0x9C: 
            case 0x9D: 
            case 0x9E: 
            case 0x9F: 
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: goto _174;
            case 0xBF: goto _173;

        }
        __quex_debug_drop_out(172);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_173: /* (173 from 172) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(173);
        switch( input ) {
            case 0x80: 
            case 0x81: 
            case 0x82: 
            case 0x83: 
            case 0x84: 
            case 0x85: 
            case 0x86: 
            case 0x87: 
            case 0x88: 
            case 0x89: 
            case 0x8A: 
            case 0x8B: 
            case 0x8C: 
            case 0x8D: 
            case 0x8E: 
            case 0x8F: 
            case 0x90: 
            case 0x91: 
            case 0x92: 
            case 0x93: 
            case 0x94: 
            case 0x95: 
            case 0x96: 
            case 0x97: 
            case 0x98: 
            case 0x99: 
            case 0x9A: 
            case 0x9B: 
            case 0x9C: 
            case 0x9D: 
            case 0x9E: 
            case 0x9F: 
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: goto _175;
            case 0xBF: goto _177;

        }
        __quex_debug_drop_out(173);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_177: /* (177 from 173) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(177);
        switch( input ) {
            case 0x80: 
            case 0x81: 
            case 0x82: 
            case 0x83: 
            case 0x84: 
            case 0x85: 
            case 0x86: 
            case 0x87: 
            case 0x88: 
            case 0x89: 
            case 0x8A: 
            case 0x8B: 
            case 0x8C: 
            case 0x8D: 
            case 0x8E: 
            case 0x8F: 
            case 0x90: 
            case 0x91: 
            case 0x92: 
            case 0x93: 
            case 0x94: 
            case 0x95: 
            case 0x96: 
            case 0x97: 
            case 0x98: 
            case 0x99: 
            case 0x9A: 
            case 0x9B: 
            case 0x9C: 
            case 0x9D: 
            case 0x9E: 
            case 0x9F: 
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: goto _176;
            case 0xBF: goto _178;

        }
        __quex_debug_drop_out(177);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_178: /* (178 from 177) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(178);
        if( input >= 0xBF ) {

        } else if( input >= 0x80 ) {
            goto _168;
        } else {

        }
        __quex_debug_drop_out(178);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_180: /* (180 from 160) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(180);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _181;
        } else {

        }
        __quex_debug_drop_out(180);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_181: /* (181 from 180) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(181);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _176;
        } else {

        }
        __quex_debug_drop_out(181);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_186: /* (186 from 158) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(186);
        switch( input ) {
            case 0x80: goto _202;
            case 0x81: 
            case 0x82: 
            case 0x83: 
            case 0x84: 
            case 0x85: 
            case 0x86: 
            case 0x87: 
            case 0x88: 
            case 0x89: 
            case 0x8A: 
            case 0x8B: 
            case 0x8C: 
            case 0x8D: 
            case 0x8E: 
            case 0x8F: 
            case 0x90: 
            case 0x91: 
            case 0x92: 
            case 0x93: 
            case 0x94: 
            case 0x95: 
            case 0x96: 
            case 0x97: 
            case 0x98: 
            case 0x99: 
            case 0x9A: 
            case 0x9B: 
            case 0x9C: 
            case 0x9D: 
            case 0x9E: 
            case 0x9F: 
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: 
            case 0xBF: goto _174;

        }
        __quex_debug_drop_out(186);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_187: /* (187 from 158) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(187);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _161;
        } else {

        }
        __quex_debug_drop_out(187);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_202: /* (202 from 186) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(202);
        switch( input ) {
            case 0x80: goto _203;
            case 0x81: goto _175;
            case 0x82: goto _204;
            case 0x83: goto _205;
            case 0x84: 
            case 0x85: 
            case 0x86: 
            case 0x87: 
            case 0x88: 
            case 0x89: 
            case 0x8A: 
            case 0x8B: 
            case 0x8C: 
            case 0x8D: 
            case 0x8E: 
            case 0x8F: 
            case 0x90: 
            case 0x91: 
            case 0x92: 
            case 0x93: 
            case 0x94: 
            case 0x95: 
            case 0x96: 
            case 0x97: 
            case 0x98: 
            case 0x99: 
            case 0x9A: 
            case 0x9B: 
            case 0x9C: 
            case 0x9D: 
            case 0x9E: 
            case 0x9F: 
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: 
            case 0xBF: goto _175;

        }
        __quex_debug_drop_out(202);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_203: /* (203 from 202) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(203);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _176;
        } else {

        }
        __quex_debug_drop_out(203);
        goto TERMINAL_18;

        __quex_assert_no_passage();
_204: /* (204 from 202) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(204);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _176;
        } else {

        }
        __quex_debug_drop_out(204);
        goto TERMINAL_19;

        __quex_assert_no_passage();
_205: /* (205 from 202) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(205);
        if( input >= 0xC0 ) {

        } else if( input >= 0x80 ) {
            goto _176;
        } else {

        }
        __quex_debug_drop_out(205);
        goto TERMINAL_20;

        __quex_assert_no_passage();
_155: /* (155 from 153) */

        ++iterator;
        __quex_debug_state(155);
        __quex_debug_drop_out(155);
        goto TERMINAL_19;

        __quex_assert_no_passage();
_157: /* (157 from 153) */

        ++iterator;
        __quex_debug_state(157);
        __quex_debug_drop_out(157);
        goto TERMINAL_18;

        __quex_assert_no_passage();
_158: /* (158 from 153) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(158);
        switch( input ) {
            case 0x84: 
            case 0x85: 
            case 0x86: 
            case 0x87: goto _187;
            case 0x88: 
            case 0x89: 
            case 0x8A: 
            case 0x8B: 
            case 0x8C: 
            case 0x8D: 
            case 0x8E: 
            case 0x8F: goto _160;
            case 0x90: 
            case 0x91: goto _171;
            case 0x92: goto _186;
            case 0x93: 
            case 0x94: 
            case 0x95: 
            case 0x96: 
            case 0x97: 
            case 0x98: 
            case 0x99: 
            case 0x9A: 
            case 0x9B: 
            case 0x9C: 
            case 0x9D: 
            case 0x9E: 
            case 0x9F: 
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: 
            case 0xBF: goto _171;

        }
        __quex_debug_drop_out(158);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_159: /* (159 from 153) */

        ++iterator;
        __quex_debug_state(159);
        __quex_debug_drop_out(159);
        goto TERMINAL_20;

        __quex_assert_no_passage();
_164: /* (164 from 153) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(164);
        switch( input ) {
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: 
            case 0xBF: goto _156;

        }
        __quex_debug_drop_out(164);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_165: /* (165 from 153) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(165);
        switch( input ) {
            case 0x80: 
            case 0x81: 
            case 0x82: 
            case 0x83: 
            case 0x84: 
            case 0x85: 
            case 0x86: 
            case 0x87: 
            case 0x88: 
            case 0x89: 
            case 0x8A: 
            case 0x8B: 
            case 0x8C: 
            case 0x8D: 
            case 0x8E: 
            case 0x8F: 
            case 0x90: 
            case 0x91: 
            case 0x92: 
            case 0x93: 
            case 0x94: 
            case 0x95: 
            case 0x96: 
            case 0x97: 
            case 0x98: 
            case 0x99: 
            case 0x9A: 
            case 0x9B: 
            case 0x9C: 
            case 0x9D: 
            case 0x9E: 
            case 0x9F: 
            case 0xA0: 
            case 0xA1: 
            case 0xA2: 
            case 0xA3: 
            case 0xA4: 
            case 0xA5: 
            case 0xA6: 
            case 0xA7: 
            case 0xA8: 
            case 0xA9: 
            case 0xAA: 
            case 0xAB: 
            case 0xAC: 
            case 0xAD: 
            case 0xAE: 
            case 0xAF: 
            case 0xB0: 
            case 0xB1: 
            case 0xB2: 
            case 0xB3: 
            case 0xB4: 
            case 0xB5: 
            case 0xB6: 
            case 0xB7: 
            case 0xB8: 
            case 0xB9: 
            case 0xBA: 
            case 0xBB: 
            case 0xBC: 
            case 0xBD: 
            case 0xBE: goto _171;
            case 0xBF: goto _172;

        }
        __quex_debug_drop_out(165);
        
        goto _207; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_166: /* (166 from 153) */

        ++iterator;
        __quex_debug_state(166);
        __quex_debug_drop_out(166);
        goto TERMINAL_17;
TERMINAL_16:
        __quex_debug("* terminal 16:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);

        continue;

TERMINAL_17:
        __quex_debug("* terminal 17:   \n");
        __QUEX_IF_COUNT_LINES_ADD((size_t)1);
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);

        continue;

TERMINAL_18:
        __quex_debug("* terminal 18:   \n");
        
        continue;

TERMINAL_19:
        __quex_debug("* terminal 19:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);

        continue;

TERMINAL_20:
        __quex_debug("* terminal 20:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);

        continue;

_207: /* TERMINAL: FAILURE */
        QUEX_ERROR_EXIT("State machine failed.");
    }
    __quex_assert(iterator == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
#   undef self
}
#endif /* __QUEX_OPTION_COUNTER */
_____________________________________________________________________________
file:     './data/example.utf8';
char_size: 1;
byte_n:    1605;
column_n:  543;
line_n:    1;
## gcc -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf8"'  -DDEF_CHARACTER_TYPE=uint8_t  -o test
