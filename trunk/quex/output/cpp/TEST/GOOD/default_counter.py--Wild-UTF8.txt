#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, const QUEX_TYPE_CHARACTER* LexemeBegin, const QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    const QUEX_TYPE_CHARACTER* iterator    = (const QUEX_TYPE_CHARACTER*)0;
    QUEX_TYPE_CHARACTER        input       = (QUEX_TYPE_CHARACTER)0;
    __QUEX_IF_COUNT_SHIFT_VALUES();

    __quex_assert(LexemeBegin <= LexemeEnd);
    for(iterator=LexemeBegin; iterator < LexemeEnd; ) {
    input = *iterator;
    __quex_debug("Init State\n");
    __quex_debug_state(283);
    if( input < 0x80 ) {
        if( input < 0x3D ) {
            switch( input ) {
                case 0x0: 
                case 0x1: 
                case 0x2: 
                case 0x3: 
                case 0x4: 
                case 0x5: 
                case 0x6: 
                case 0x7: 
                case 0x8: 
                case 0x9: goto _285;
                case 0xA: goto _291;
                case 0xB: 
                case 0xC: 
                case 0xD: 
                case 0xE: 
                case 0xF: 
                case 0x10: 
                case 0x11: 
                case 0x12: 
                case 0x13: 
                case 0x14: 
                case 0x15: 
                case 0x16: 
                case 0x17: 
                case 0x18: 
                case 0x19: 
                case 0x1A: 
                case 0x1B: 
                case 0x1C: 
                case 0x1D: 
                case 0x1E: 
                case 0x1F: 
                case 0x20: 
                case 0x21: 
                case 0x22: 
                case 0x23: 
                case 0x24: 
                case 0x25: 
                case 0x26: 
                case 0x27: 
                case 0x28: 
                case 0x29: 
                case 0x2A: 
                case 0x2B: 
                case 0x2C: 
                case 0x2D: 
                case 0x2E: 
                case 0x2F: 
                case 0x30: 
                case 0x31: 
                case 0x32: 
                case 0x33: 
                case 0x34: 
                case 0x35: 
                case 0x36: 
                case 0x37: 
                case 0x38: 
                case 0x39: 
                case 0x3A: 
                case 0x3B: goto _285;
                case 0x3C: goto _289;

            }
        } else {
            if( input == 0x3D ) {
                goto _285;
            } else if( input == 0x3E ) {
                goto _293;
            } else if( input == 0x3F ) {
                goto _292;
            } else {
                goto _285;
            }
        }
    } else {
        switch( input ) {
            case 0xC2: 
            case 0xC3: 
            case 0xC4: 
            case 0xC5: 
            case 0xC6: 
            case 0xC7: 
            case 0xC8: 
            case 0xC9: 
            case 0xCA: 
            case 0xCB: 
            case 0xCC: 
            case 0xCD: 
            case 0xCE: 
            case 0xCF: 
            case 0xD0: 
            case 0xD1: 
            case 0xD2: 
            case 0xD3: 
            case 0xD4: 
            case 0xD5: 
            case 0xD6: 
            case 0xD7: 
            case 0xD8: 
            case 0xD9: 
            case 0xDA: 
            case 0xDB: 
            case 0xDC: 
            case 0xDD: 
            case 0xDE: 
            case 0xDF: goto _294;
            case 0xE0: goto _287;
            case 0xE1: 
            case 0xE2: 
            case 0xE3: 
            case 0xE4: 
            case 0xE5: 
            case 0xE6: 
            case 0xE7: 
            case 0xE8: 
            case 0xE9: 
            case 0xEA: 
            case 0xEB: 
            case 0xEC: 
            case 0xED: 
            case 0xEE: 
            case 0xEF: goto _284;
            case 0xF0: goto _288;
            case 0xF1: goto _286;
            case 0xF2: 
            case 0xF3: goto _295;
            case 0xF4: 
            case 0xF5: 
            case 0xF6: 
            case 0xF7: goto _290;

        }
    }
    __quex_debug_drop_out(283);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_298: /* (298 from 297) (298 from 306) (298 from 305) (298 from 304) (298 from 310) (298 from 307) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(298);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _285;
    } else {

    }
    __quex_debug_drop_out(298);
goto TERMINAL_21;

    __quex_assert_no_passage();
_305: /* (305 from 303) (305 from 309) (305 from 302) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(305);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _298;
    } else {

    }
    __quex_debug_drop_out(305);
goto TERMINAL_21;

    __quex_assert_no_passage();
_285: /* (285 from 294) (285 from 283) (285 from 298) (285 from 311) */

    ++iterator;
    __quex_debug_state(285);
    __quex_debug_drop_out(285);
goto TERMINAL_21;

    __quex_assert_no_passage();
_300: /* (300 from 286) (300 from 288) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(300);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _302;
    } else {

    }
    __quex_debug_drop_out(300);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_302: /* (302 from 301) (302 from 308) (302 from 300) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(302);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _305;
    } else {

    }
    __quex_debug_drop_out(302);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_294: /* (294 from 284) (294 from 283) (294 from 287) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(294);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _285;
    } else {

    }
    __quex_debug_drop_out(294);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_284: /* (284 from 283) (284 from 290) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(284);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _294;
    } else {

    }
    __quex_debug_drop_out(284);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_290: /* (290 from 283) (290 from 299) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(290);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _284;
    } else {

    }
    __quex_debug_drop_out(290);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_295: /* (295 from 288) (295 from 283) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(295);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _296;
    } else {

    }
    __quex_debug_drop_out(295);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_296: /* (296 from 295) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(296);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _297;
    } else {

    }
    __quex_debug_drop_out(296);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_297: /* (297 from 296) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(297);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _298;
    } else {

    }
    __quex_debug_drop_out(297);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_299: /* (299 from 288) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(299);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _290;
    } else {

    }
    __quex_debug_drop_out(299);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_301: /* (301 from 288) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(301);
    switch( input ) {
        case 0x80: goto _303;
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _302;

    }
    __quex_debug_drop_out(301);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_303: /* (303 from 301) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(303);
    switch( input ) {
        case 0x80: goto _306;
        case 0x81: goto _305;
        case 0x82: goto _304;
        case 0x83: goto _307;
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _305;

    }
    __quex_debug_drop_out(303);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_304: /* (304 from 303) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(304);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _298;
    } else {

    }
    __quex_debug_drop_out(304);
goto TERMINAL_23;

    __quex_assert_no_passage();
_306: /* (306 from 303) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(306);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _298;
    } else {

    }
    __quex_debug_drop_out(306);
goto TERMINAL_25;

    __quex_assert_no_passage();
_307: /* (307 from 303) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(307);
    if( input >= 0xC0 ) {

    } else if( input >= 0x80 ) {
        goto _298;
    } else {

    }
    __quex_debug_drop_out(307);
goto TERMINAL_24;

    __quex_assert_no_passage();
_308: /* (308 from 286) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(308);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _302;
        case 0xBF: goto _309;

    }
    __quex_debug_drop_out(308);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_309: /* (309 from 308) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(309);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _305;
        case 0xBF: goto _310;

    }
    __quex_debug_drop_out(309);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_310: /* (310 from 309) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(310);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _298;
        case 0xBF: goto _311;

    }
    __quex_debug_drop_out(310);
goto TERMINAL_21;

    __quex_assert_no_passage();
_311: /* (311 from 310) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(311);
    if( input >= 0xBF ) {

    } else if( input >= 0x80 ) {
        goto _285;
    } else {

    }
    __quex_debug_drop_out(311);
goto TERMINAL_21;

    __quex_assert_no_passage();
_286: /* (286 from 283) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(286);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _300;
        case 0xBF: goto _308;

    }
    __quex_debug_drop_out(286);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_287: /* (287 from 283) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(287);
    switch( input ) {
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _294;

    }
    __quex_debug_drop_out(287);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_288: /* (288 from 283) */

    ++iterator;
    input = *iterator;
    __quex_debug_state(288);
    switch( input ) {
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: goto _299;
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: goto _295;
        case 0x90: 
        case 0x91: goto _300;
        case 0x92: goto _301;
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _300;

    }
    __quex_debug_drop_out(288);

goto _313; /* TERMINAL_FAILURE */

    __quex_assert_no_passage();
_289: /* (289 from 283) */

    ++iterator;
    __quex_debug_state(289);
    __quex_debug_drop_out(289);
goto TERMINAL_25;

    __quex_assert_no_passage();
_291: /* (291 from 283) */

    ++iterator;
    __quex_debug_state(291);
    __quex_debug_drop_out(291);
goto TERMINAL_22;

    __quex_assert_no_passage();
_292: /* (292 from 283) */

    ++iterator;
    __quex_debug_state(292);
    __quex_debug_drop_out(292);
goto TERMINAL_24;

    __quex_assert_no_passage();
_293: /* (293 from 283) */

    ++iterator;
    __quex_debug_state(293);
    __quex_debug_drop_out(293);
goto TERMINAL_23;
TERMINAL_21:
        __quex_debug("* terminal 21:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
        continue;

TERMINAL_22:
        __quex_debug("* terminal 22:   \n");
        __QUEX_IF_COUNT_LINES_ADD((size_t)1);
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
        continue;

TERMINAL_23:
        __quex_debug("* terminal 23:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);
        continue;

TERMINAL_24:
        __quex_debug("* terminal 24:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);
        continue;

TERMINAL_25:
        __quex_debug("* terminal 25:   \n");
                continue;


_313: /* TERMINAL: FAILURE */
    
        QUEX_ERROR_EXIT("State machine failed.");

    }
    __quex_assert(iterator == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
#   undef self
}
#endif /* __QUEX_OPTION_COUNTER */
_____________________________________________________________________________
file:     './data/example.utf8';
char_size: 1;
byte_n:    1605;
column_n:  543;
line_n:    1;
## gcc -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf8"'  -DDEF_CHARACTER_TYPE=uint8_t  -o test
