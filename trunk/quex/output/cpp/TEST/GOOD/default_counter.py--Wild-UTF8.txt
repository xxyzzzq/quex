#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, const QUEX_TYPE_CHARACTER* LexemeBegin, const QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    const QUEX_TYPE_CHARACTER* iterator    = (const QUEX_TYPE_CHARACTER*)0;
    QUEX_TYPE_CHARACTER        input       = (QUEX_TYPE_CHARACTER)0;

    __QUEX_IF_COUNT_SHIFT_VALUES();

    for(iterator=LexemeBegin; iterator < LexemeEnd; ) {
        input = *iterator;
        __quex_debug("Init State\n");
        __quex_debug_state(168);
        if( input < 0x80 ) {
            if( input < 0x3D ) {
                switch( input ) {
                    case 0x0: 
                    case 0x1: 
                    case 0x2: 
                    case 0x3: 
                    case 0x4: 
                    case 0x5: 
                    case 0x6: 
                    case 0x7: 
                    case 0x8: 
                    case 0x9: goto _175;
                    case 0xA: goto _174;
                    case 0xB: 
                    case 0xC: 
                    case 0xD: 
                    case 0xE: 
                    case 0xF: 
                    case 0x10: 
                    case 0x11: 
                    case 0x12: 
                    case 0x13: 
                    case 0x14: 
                    case 0x15: 
                    case 0x16: 
                    case 0x17: 
                    case 0x18: 
                    case 0x19: 
                    case 0x1A: 
                    case 0x1B: 
                    case 0x1C: 
                    case 0x1D: 
                    case 0x1E: 
                    case 0x1F: 
                    case 0x20: 
                    case 0x21: 
                    case 0x22: 
                    case 0x23: 
                    case 0x24: 
                    case 0x25: 
                    case 0x26: 
                    case 0x27: 
                    case 0x28: 
                    case 0x29: 
                    case 0x2A: 
                    case 0x2B: 
                    case 0x2C: 
                    case 0x2D: 
                    case 0x2E: 
                    case 0x2F: 
                    case 0x30: 
                    case 0x31: 
                    case 0x32: 
                    case 0x33: 
                    case 0x34: 
                    case 0x35: 
                    case 0x36: 
                    case 0x37: 
                    case 0x38: 
                    case 0x39: 
                    case 0x3A: 
                    case 0x3B: goto _175;
                    case 0x3C: goto _172;

                }
            } else {
                if( input == 0x3D ) {
                    goto _175;
                } else if( input == 0x3E ) {
                    goto _179;
                } else if( input == 0x3F ) {
                    goto _177;
                } else {
                    goto _175;
                }
            }
        } else {
            if( input < 0xF0 ) {
                if( input < 0xC2 ) {
                    goto _221;
                } else if( input < 0xE0 ) {
                    goto _180;
                } else if( input == 0xE0 ) {
                    goto _182;
                } else {
                    goto _176;
                }
            } else {
                if( input == 0xF0 ) {
                    goto _170;
                } else if( input == 0xF1 ) {
                    goto _169;
                } else if( input < 0xF4 ) {
                    goto _171;
                } else if( input < 0xF8 ) {
                    goto _173;
                } else {
                    goto _221;
                }
            }
        }
_221:
        __quex_debug_drop_out(168);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_190: /* (190 from 189) (190 from 219) (190 from 210) (190 from 209) (190 from 208) (190 from 202) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(190);
        if( input >= 0xC0 ) {
            goto _223;
        } else if( input >= 0x80 ) {
            goto _175;
        } else {
            goto _223;
        }
_223:
        __quex_debug_drop_out(190);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_202: /* (202 from 218) (202 from 201) (202 from 206) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(202);
        if( input >= 0xC0 ) {
            goto _224;
        } else if( input >= 0x80 ) {
            goto _190;
        } else {
            goto _224;
        }
_224:
        __quex_debug_drop_out(202);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_175: /* (175 from 168) (175 from 190) (175 from 220) (175 from 180) */

        ++iterator;
        __quex_debug_state(175);
        __quex_debug_drop_out(175);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_193: /* (193 from 169) (193 from 170) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(193);
        if( input >= 0xC0 ) {
            goto _226;
        } else if( input >= 0x80 ) {
            goto _201;
        } else {
            goto _226;
        }
_226:
        __quex_debug_drop_out(193);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_201: /* (201 from 193) (201 from 217) (201 from 198) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(201);
        if( input >= 0xC0 ) {
            goto _227;
        } else if( input >= 0x80 ) {
            goto _202;
        } else {
            goto _227;
        }
_227:
        __quex_debug_drop_out(201);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_180: /* (180 from 176) (180 from 182) (180 from 168) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(180);
        if( input >= 0xC0 ) {
            goto _228;
        } else if( input >= 0x80 ) {
            goto _175;
        } else {
            goto _228;
        }
_228:
        __quex_debug_drop_out(180);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_171: /* (171 from 168) (171 from 170) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(171);
        if( input >= 0xC0 ) {
            goto _229;
        } else if( input >= 0x80 ) {
            goto _188;
        } else {
            goto _229;
        }
_229:
        __quex_debug_drop_out(171);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_173: /* (173 from 194) (173 from 168) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(173);
        if( input >= 0xC0 ) {
            goto _230;
        } else if( input >= 0x80 ) {
            goto _176;
        } else {
            goto _230;
        }
_230:
        __quex_debug_drop_out(173);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_176: /* (176 from 168) (176 from 173) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(176);
        if( input >= 0xC0 ) {
            goto _231;
        } else if( input >= 0x80 ) {
            goto _180;
        } else {
            goto _231;
        }
_231:
        __quex_debug_drop_out(176);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_188: /* (188 from 171) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(188);
        if( input >= 0xC0 ) {
            goto _232;
        } else if( input >= 0x80 ) {
            goto _189;
        } else {
            goto _232;
        }
_232:
        __quex_debug_drop_out(188);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_189: /* (189 from 188) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(189);
        if( input >= 0xC0 ) {
            goto _233;
        } else if( input >= 0x80 ) {
            goto _190;
        } else {
            goto _233;
        }
_233:
        __quex_debug_drop_out(189);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_194: /* (194 from 170) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(194);
        if( input >= 0xC0 ) {
            goto _234;
        } else if( input >= 0x80 ) {
            goto _173;
        } else {
            goto _234;
        }
_234:
        __quex_debug_drop_out(194);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_198: /* (198 from 170) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(198);
        if( input >= 0xC0 ) {
            goto _235;
        } else if( input >= 0x81 ) {
            goto _201;
        } else if( input == 0x80 ) {
            goto _206;
        } else {
            goto _235;
        }
_235:
        __quex_debug_drop_out(198);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_206: /* (206 from 198) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(206);
        if( input < 0x82 ) {
            if( input == 0x81 ) {
                goto _202;
            } else if( input == 0x80 ) {
                goto _209;
            } else {
                goto _236;
            }
        } else {
            if( input == 0x82 ) {
                goto _210;
            } else if( input == 0x83 ) {
                goto _208;
            } else if( input < 0xC0 ) {
                goto _202;
            } else {
                goto _236;
            }
        }
_236:
        __quex_debug_drop_out(206);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_208: /* (208 from 206) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(208);
        if( input >= 0xC0 ) {
            goto _237;
        } else if( input >= 0x80 ) {
            goto _190;
        } else {
            goto _237;
        }
_237:
        __quex_debug_drop_out(208);
        goto TERMINAL_20;

        __quex_assert_no_passage();
_209: /* (209 from 206) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(209);
        if( input >= 0xC0 ) {
            goto _238;
        } else if( input >= 0x80 ) {
            goto _190;
        } else {
            goto _238;
        }
_238:
        __quex_debug_drop_out(209);
        goto TERMINAL_18;

        __quex_assert_no_passage();
_210: /* (210 from 206) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(210);
        if( input >= 0xC0 ) {
            goto _239;
        } else if( input >= 0x80 ) {
            goto _190;
        } else {
            goto _239;
        }
_239:
        __quex_debug_drop_out(210);
        goto TERMINAL_19;

        __quex_assert_no_passage();
_217: /* (217 from 169) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(217);
        if( input >= 0xC0 ) {
            goto _240;
        } else if( input == 0xBF ) {
            goto _218;
        } else if( input >= 0x80 ) {
            goto _201;
        } else {
            goto _240;
        }
_240:
        __quex_debug_drop_out(217);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_218: /* (218 from 217) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(218);
        if( input >= 0xC0 ) {
            goto _241;
        } else if( input == 0xBF ) {
            goto _219;
        } else if( input >= 0x80 ) {
            goto _202;
        } else {
            goto _241;
        }
_241:
        __quex_debug_drop_out(218);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_219: /* (219 from 218) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(219);
        if( input >= 0xC0 ) {
            goto _242;
        } else if( input == 0xBF ) {
            goto _220;
        } else if( input >= 0x80 ) {
            goto _190;
        } else {
            goto _242;
        }
_242:
        __quex_debug_drop_out(219);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_220: /* (220 from 219) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(220);
        if( input >= 0xBF ) {
            goto _243;
        } else if( input >= 0x80 ) {
            goto _175;
        } else {
            goto _243;
        }
_243:
        __quex_debug_drop_out(220);
        goto TERMINAL_16;

        __quex_assert_no_passage();
_169: /* (169 from 168) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(169);
        if( input >= 0xC0 ) {
            goto _244;
        } else if( input == 0xBF ) {
            goto _217;
        } else if( input >= 0x80 ) {
            goto _193;
        } else {
            goto _244;
        }
_244:
        __quex_debug_drop_out(169);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_170: /* (170 from 168) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(170);
        if( input < 0x90 ) {
            if( input >= 0x88 ) {
                goto _171;
            } else if( input >= 0x84 ) {
                goto _194;
            } else {
                goto _245;
            }
        } else {
            if( input < 0x92 ) {
                goto _193;
            } else if( input == 0x92 ) {
                goto _198;
            } else if( input < 0xC0 ) {
                goto _193;
            } else {
                goto _245;
            }
        }
_245:
        __quex_debug_drop_out(170);
        
        goto _222; /* TERMINAL_FAILURE */

        __quex_assert_no_passage();
_172: /* (172 from 168) */

        ++iterator;
        __quex_debug_state(172);
        __quex_debug_drop_out(172);
        goto TERMINAL_18;

        __quex_assert_no_passage();
_174: /* (174 from 168) */

        ++iterator;
        __quex_debug_state(174);
        __quex_debug_drop_out(174);
        goto TERMINAL_17;

        __quex_assert_no_passage();
_177: /* (177 from 168) */

        ++iterator;
        __quex_debug_state(177);
        __quex_debug_drop_out(177);
        goto TERMINAL_20;

        __quex_assert_no_passage();
_179: /* (179 from 168) */

        ++iterator;
        __quex_debug_state(179);
        __quex_debug_drop_out(179);
        goto TERMINAL_19;

        __quex_assert_no_passage();
_182: /* (182 from 168) */

        ++iterator;
        input = *iterator;
        __quex_debug_state(182);
        if( input >= 0xC0 ) {
            goto _250;
        } else if( input >= 0xA0 ) {
            goto _180;
        } else {
            goto _250;
        }
_250:
        __quex_debug_drop_out(182);
        
        goto _222; /* TERMINAL_FAILURE */
TERMINAL_16:
        __quex_debug("* terminal 16:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);

        continue;

TERMINAL_17:
        __quex_debug("* terminal 17:   \n");
        __QUEX_IF_COUNT_LINES_ADD((size_t)1);
        __QUEX_IF_COUNT_COLUMNS_SET((size_t)1);

        continue;

TERMINAL_18:
        __quex_debug("* terminal 18:   \n");
        
        continue;

TERMINAL_19:
        __quex_debug("* terminal 19:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);

        continue;

TERMINAL_20:
        __quex_debug("* terminal 20:   \n");
        __QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);

        continue;

_222: /* TERMINAL: FAILURE */
        QUEX_ERROR_EXIT("State machine failed.");
    }
    __quex_assert(iterator == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
#   undef self
}
#endif /* __QUEX_OPTION_COUNTER */
_____________________________________________________________________________
file:     './data/example.utf8';
char_size: 1;
byte_n:    1605;
column_n:  543;
line_n:    1;
## gcc -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf8"'  -DDEF_CHARACTER_TYPE=uint8_t  -o test
