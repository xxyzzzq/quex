/* -*- C++ -*- vim: set syntax=cpp: */
#ifndef __INCLUDE_GUARD_QUEX__CODE_BASE__MEMORY_MANAGER__
#define __INCLUDE_GUARD_QUEX__CODE_BASE__MEMORY_MANAGER__

#include <quex/code_base/definitions>
#include <quex/code_base/buffer/plain/BufferFiller_Plain>
#include <quex/code_base/buffer/converter/BufferFiller_Converter>
#if defined (QUEX_OPTION_ENABLE_ICU)
#   include <quex/code_base/buffer/converter/icu/Converter_ICU>
#endif
#if defined (QUEX_OPTION_ENABLE_ICONV)
#   include <quex/code_base/buffer/converter/iconv/Converter_IConv>
#endif
#ifdef QUEX_OPTION_POST_CATEGORIZER
#include <quex/code_base/analyzer/PostCategorizer>
#endif

#include <quex/code_base/temporary_macros_on>
 
QUEX_NAMESPACE_MAIN_OPEN

struct QUEX_NAME(BufferFiller_tag);

QUEX_INLINE QUEX_TYPE_CHARACTER*
QUEX_NAME(MemoryManager_BufferMemory_allocate)(const size_t ByteN);

QUEX_INLINE void
QUEX_NAME(MemoryManager_BufferMemory_free)(QUEX_TYPE_CHARACTER* memory);

TEMPLATE_IN(InputHandleT) void*
QUEX_NAME(MemoryManager_BufferFiller_allocate())(const size_t ByteN);

TEMPLATE_IN(InputHandleT) void
QUEX_NAME(MemoryManager_BufferFiller_free)(void* memory);

QUEX_INLINE uint8_t*  
QUEX_NAME(MemoryManager_BufferFiller_RawBuffer_allocate)(const size_t ByteN);

QUEX_INLINE void      
QUEX_NAME(MemoryManager_BufferFiller_RawBuffer_free)(uint8_t* memory);

#   ifdef QUEX_OPTION_STRING_ACCUMULATOR
QUEX_INLINE QUEX_TYPE_CHARACTER*
QUEX_NAME(MemoryManager_AccumulatorText_allocate)(const size_t Size);
QUEX_INLINE void
QUEX_NAME(MemoryManager_AccumulatorText_free)(QUEX_TYPE_CHARACTER* memory);
#   endif

#   if defined (QUEX_OPTION_ENABLE_ICONV)
QUEX_INLINE QuexConverter_IConv*  QUEX_NAME(MemoryManager_Converter_IConv_allocate())();
QUEX_INLINE void                  QUEX_NAME(MemoryManager_Converter_IConv_free)(QuexConverter_IConv* memory);
#   endif

#   if defined (QUEX_OPTION_ENABLE_ICU)
QUEX_INLINE QuexConverter_ICU*  QUEX_NAME(MemoryManager_Converter_ICU_allocate())();
QUEX_INLINE void                QUEX_NAME(MemoryManager_Converter_ICU_free)(QuexConverter_ICU* memory);
#   endif

#   ifdef QUEX_OPTION_POST_CATEGORIZER
QUEX_INLINE  QUEX_TYPE_POST_CATEGORIZER_NODE*  QUEX_NAME(MemoryManager_PostCategorizerNode_allocate)(size_t RemainderSize);
QUEX_INLINE  void                              QUEX_NAME(MemoryManager_PostCategorizerNode_free)(QUEX_TYPE_POST_CATEGORIZER_NODE*);
#   endif

QUEX_INLINE size_t
QUEX_NAME(MemoryManager_insert)(uint8_t* drain_begin_p,  uint8_t* drain_end_p,
                                uint8_t* source_begin_p, uint8_t* source_end_p);

QUEX_NAMESPACE_MAIN_CLOSE
 
#include <quex/code_base/temporary_macros_off>

#endif /* __INCLUDE_GUARD_QUEX__CODE_BASE__MEMORY_MANAGER__ */
