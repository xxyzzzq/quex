/* The following cannot be protected against multiple inclusion. It is possible
 * that it is defined multiple times for different lexical analyzers.
 */
#include <quex/code_base/definitions>

#ifdef QUEX_OPTION_INCLUDE_STACK
#   ifndef QUEX_TYPE_MEMENTO
#      error "File requires definition of macro QUEX_TYPE_MEMENTO"
#   endif
#   ifndef QUEX_TYPE_MEMENTO_TAG
#      error "File requires definition of macro QUEX_TYPE_MEMENTO_TAG"
#   endif
#endif
#ifdef __QUEX_OPTION_TOKEN_POLICY_IS_QUEUE_BASED
#   ifndef QUEX_TYPE_STR_TOKEN_COMPLETE
#      error "File requires definition of macro QUEX_TYPE_STR_TOKEN_COMPLETE"
#   endif
#endif

QUEX_NAMESPACE_COMPONENTS_OPEN

#ifdef __QUEX_OPTION_TOKEN_POLICY_IS_QUEUE_BASED
QUEX_INLINE QUEX_TYPE_TOKEN* 
QUEX_NAMER(MemoryManager_, QUEX_TYPE_STR_TOKEN_COMPLETE, _allocate)(const size_t N);

QUEX_INLINE void 
QUEX_NAMER(MemoryManager_, QUEX_TYPE_STR_TOKEN_COMPLETE, _free)(QUEX_TYPE_TOKEN* memory);
#endif

#ifdef QUEX_OPTION_INCLUDE_STACK
QUEX_INLINE  QUEX_TYPE_MEMENTO_TAG*
QUEX_NAMER(MemoryManager_, QUEX_TYPE_MEMENTO, _allocate)();

QUEX_INLINE void
QUEX_NAMER(MemoryManager_, QUEX_TYPE_MEMENTO, _free)(struct QUEX_TYPE_MEMENTO_TAG* memory);
#endif

QUEX_NAMESPACE_COMPONENTS_CLOSE


