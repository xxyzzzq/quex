token_type {
   header {
       #include <stdio.h>
       #include <string.h>

       #include <quex/code_base/definitions>
       #include <quex/code_base/asserts>
       #include <quex/code_base/unicode>
       #include <quex/code_base/compatibility/inttypes.h>
   }
   standard {
        id            : uint32_t;
        line_number   : size_t;
        column_number : size_t;
   }
   distinct {
       text   :  const QUEX_TYPE_CHARACTER*;
       number :  int;
   }

   inheritable;

   constructor {
       self.number = 0;
       self.text   = 0x0;
   }

   destructor {
       if( self.text != 0x0 ) {
           QUEX_NAME(MemoryManager_Text_free)((QUEX_TYPE_CHARACTER*)self.text);
           self.text = 0x0;
       }
   }

   copy {
        self._id  = Other._id;

        if( self.text != 0x0 ) {
            QUEX_NAME(MemoryManager_Text_free)((QUEX_TYPE_CHARACTER*)self.text);
        }
        if( Other.text != 0x0 ) {
            self.text = QUEX_NAME(MemoryManager_Text_allocate)(
                                    sizeof(QUEX_TYPE_CHARACTER) 
                                  * (QUEX_NAME(strlen)(Other.text) + 1));
            __QUEX_STD_memcpy((void*)self.text, (void*)Other.text, 
                                sizeof(QUEX_TYPE_CHARACTER) 
                              * (QUEX_NAME(strlen)(Other.text) + 1));
        }
        self.number = Other.number;
    #   ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
    #       ifdef QUEX_OPTION_LINE_NUMBER_COUNTING
            self._line_n   = Other._line_n;
    #       endif
    #       ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
            self._column_n = Other._column_n;
    #       endif
    #   endif
   }

   take_text {
        if( self.text != 0x0 ) {
            QUEX_NAME(MemoryManager_Text_free)((QUEX_TYPE_CHARACTER*)self.text);
        }
        self.text = QUEX_NAME(MemoryManager_Text_allocate)(
                              sizeof(QUEX_TYPE_CHARACTER) * (End - Begin + 1));
        __QUEX_STD_memcpy((void*)self.text, (void*)Begin, 
                          sizeof(QUEX_TYPE_CHARACTER) * (End - Begin + 1));
        return false;
   }

   body {

       /*
        */
   }

   repetition_set {
       self.number = N;
   }

   repetition_get {
       return self.number;
   }

   footer {
       /*
        */
   }
}

