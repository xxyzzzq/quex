token_type {
   header {
       #include <stdio.h>
       #include <string.h>

       extern const char* 
       QUEX_NAME_TOKEN(get_string)(const QUEX_TYPE_TOKEN*  me, 
                                   char*                   buffer, 
                                   size_t                  BufferSize); 

       extern const char* 
       QUEX_NAME_TOKEN(pretty_char_text)(const QUEX_TYPE_TOKEN*  me, 
                                        char*                    buffer, 
                                        size_t                   BufferSize); 

#      if ! defined(__QUEX_OPTION_WCHAR_T_DISABLED)
       extern const wchar_t* 
       QUEX_NAME_TOKEN(pretty_wchar_text)(const QUEX_TYPE_TOKEN*  me, 
                                          wchar_t*                buffer, 
                                          size_t                  BufferSize); 
#      endif
   }
   standard {
        id            : uint32_t;
        line_number   : size_t;
        column_number : size_t;
   }
   distinct {
       text   :  const QUEX_TYPE_CHARACTER*;
       number :  size_t;
   }

   inheritable;

   constructor {
       self.number = 0;
       self.text   = LexemeNull;
   }

   destructor {
       if( self.text != LexemeNull ) {
           QUEX_NAME(MemoryManager_Text_free)((QUEX_TYPE_CHARACTER*)self.text);
           self.text = LexemeNull;
       }
   }

   copy {
        self._id  = Other._id;

        if( self.text != LexemeNull ) {
            QUEX_NAME(MemoryManager_Text_free)((QUEX_TYPE_CHARACTER*)self.text);
        }
        if( Other.text != LexemeNull ) {
            self.text = QUEX_NAME(MemoryManager_Text_allocate)(
                                    sizeof(QUEX_TYPE_CHARACTER) 
                                  * (QUEX_NAME(strlen)(Other.text) + 1));
            __QUEX_STD_memcpy((void*)self.text, (void*)Other.text, 
                                sizeof(QUEX_TYPE_CHARACTER) 
                              * (QUEX_NAME(strlen)(Other.text) + 1));
        }
        self.number = Other.number;
    #   ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
        __QUEX_IF_COUNT_LINES(self._line_n     = Other._line_n);
        __QUEX_IF_COUNT_COLUMNS(self._column_n = Other._column_n);
    #   endif
   }

   take_text {

#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1" */
        {
            const QUEX_TYPE_CHARACTER* it = 0x0;
            printf("previous:  '");
            if( self.text != LexemeNull ) {
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
            printf("take_text: '");
            for(it = Begin; it != End; ++it) printf("%04X.", (int)*it);
            printf("%04X.", (int)*it);
            printf("'\n");
        }
#       endif

        if( self.text != LexemeNull ) {
            QUEX_NAME(MemoryManager_Text_free)((QUEX_TYPE_CHARACTER*)self.text);
        }
        if( Begin != LexemeNull ) {
            self.text = QUEX_NAME(MemoryManager_Text_allocate)(
                              sizeof(QUEX_TYPE_CHARACTER) * (size_t)(End - Begin + 1));
            __QUEX_STD_memcpy((void*)self.text, (void*)Begin, 
                              sizeof(QUEX_TYPE_CHARACTER) * (size_t)(End - Begin));
            /* The string is not necessarily zero terminated, so terminate it here. */
            *((QUEX_TYPE_CHARACTER*)(self.text + (End - Begin))) = (QUEX_TYPE_CHARACTER)0;
        } else {
            self.text = LexemeNull;
        }

#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1" */
        {
            const QUEX_TYPE_CHARACTER* it = 0x0;
            printf("after:     '");
            if( self.text != LexemeNull ) { 
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
        }
#       endif

        /* This token copied the text from the chunk into the string, 
         * so we do not claim owneship over it.                       */
        return false;
   }

   body {
       /*
        */
   }

   repetition_set {
       self.number = N;
   }

   repetition_get {
       return self.number;
   }

   footer {
        const char* 
        QUEX_NAME_TOKEN(get_string)(const QUEX_TYPE_TOKEN*  me, 
                                    char*                   buffer, 
                                    size_t                  BufferSize) 
        {
            const char*  token_type_str = QUEX_NAME_TOKEN(map_id_to_name)(me->_id);
            const char*  BufferEnd  = buffer + BufferSize;
            const char*  iterator   = 0;
            char*        writerator = 0;

            /* Token Type */
            iterator = token_type_str;
            writerator = buffer; 
            while( (*iterator) && writerator != BufferEnd ) {
                *writerator++ = *iterator++;
            }

            /* Opening Quote */
            if( BufferEnd - writerator > 2 ) {
                *writerator++ = ' ';
                *writerator++ = '\'';
            }

            /* The String */
            QUEX_NAME_TOKEN(pretty_char_text)(me, writerator, (size_t)(BufferEnd - writerator));

            while( *writerator ) {
                ++writerator;
            }

            /* Closing Quote */
            if( BufferEnd - writerator > 1 ) {
                *writerator++ = '\'';
            }
            *writerator = '\0';
            return buffer;
        }

        const char* 
        QUEX_NAME_TOKEN(pretty_char_text)(const QUEX_TYPE_TOKEN*  me, 
                                          char*                   buffer, 
                                          size_t                  BufferSize) 
        {
            const QUEX_TYPE_CHARACTER*  source    = me->text;
            char*                       drain     = buffer;
            const char*                 DrainEnd  = buffer + BufferSize;

            const QUEX_TYPE_CHARACTER*  SourceEnd = me->text + (size_t)(QUEX_NAME(strlen)(source)) + 1;
            __QUEX_CONVERTER_STRING(QUEX_SETTING_CHARACTER_CODEC, char)(&source, SourceEnd, &drain, DrainEnd);
            return buffer;
        }

#       if ! defined(__QUEX_OPTION_WCHAR_T_DISABLED)
        const wchar_t* 
        QUEX_NAME_TOKEN(pretty_wchar_text)(const QUEX_TYPE_TOKEN*  me, 
                                           wchar_t*                buffer, 
                                           size_t                  BufferSize) 
        {
            wchar_t*                    drain     = buffer;
            const wchar_t*              DrainEnd  = buffer + (ptrdiff_t)BufferSize;
            const QUEX_TYPE_CHARACTER*  source    = me->text;
            const QUEX_TYPE_CHARACTER*  SourceEnd = me->text + (ptrdiff_t)(QUEX_NAME(strlen)(source)) + 1;

            __QUEX_CONVERTER_STRING(QUEX_SETTING_CHARACTER_CODEC, wchar)(&source, SourceEnd, &drain, DrainEnd);
            return buffer;
        }
#       endif
   }
}

