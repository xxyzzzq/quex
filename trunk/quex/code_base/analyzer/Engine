/* -*- C++ -*- vim: set syntax=cpp: */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__ANALYSER
#define __QUEX_INCLUDE_GUARD__ANALYZER__ANALYSER
/****************************************************************************
 *
 * IMPORTANT NOTE:
 *
 * It is problematic to include 'Token' inside 'Analyzer'. This would create
 * problems with user defined token headers. Thus, we **must** include the
 * token class before header 'Analyser'                                     
 *
 ****************************************************************************/
#include <quex/code_base/definitions>
#include <quex/code_base/buffer/Buffer>
#include <quex/code_base/buffer/BufferFiller>

#include <quex/code_base/temporary_macros_on>

QUEX_NAMESPACE_COMPONENTS_OPEN
    struct QUEX_TYPE_MODE_TAG;

    /* The following presents a minimal structure for a lexical analyzer to work with the 
     * constructed engine. Actually, it should only be useful for unit tests. Else, it has
     * more a documentary character telling: This is the heart of the matter--anything else
     * is just decoration! Any 'real' lexical analyzer should be derived from this class. */
    typedef struct QuexAnalyzerEngine_tag {
        QuexBuffer                   buffer;

        /* Each mode has a dedicated analyzer function.  The function pointer
         * to the currently active mode's function is stored redundantly in 
         * 'current_analyzer_function' to accelerate the access to it.                    */
        struct QUEX_TYPE_MODE_TAG*   __current_mode_p; 
        QUEX_TYPE_ANALYZER_FUNCTION  current_analyzer_function;

#if    defined(QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE) \
    || defined(QUEX_OPTION_ASSERTS)
        /* When a mode change happens and the user does not 'return' but 'CONTINUE'
         * an error must be logged, since the following characters are still swallowed
         * by the current function and not the new one. For this one needs to return and
         * then continue further. */
        QUEX_TYPE_ANALYZER_FUNCTION  DEBUG_analyzer_function_at_entry;
#       endif

    } QuexAnalyzerEngine;

    TEMPLATE_IN(InputHandleT) void
    QuexAnalyzerEngine_construct(QuexAnalyzerEngine*          me,
                                 QUEX_TYPE_ANALYZER_FUNCTION  AnalyserFunction,
                                 InputHandleT*                input_handle,
                                 QUEX_TYPE_CHARACTER*         InputMemory,
                                 const size_t                 BufferMemorySize,
                                 const char*                  CharacterEncodingName, 
                                 const size_t                 TranslationBufferMemorySize,
                                 bool                         ByteOrderReversionF);

    QUEX_INLINE void
    QuexAnalyzerEngine_construct_for_direct_memory_access(QuexAnalyzerEngine*          me,
                                                          QUEX_TYPE_ANALYZER_FUNCTION  AnalyserFunction,
                                                          QUEX_TYPE_CHARACTER*         Memory,
                                                          const size_t                 MemorySize,
                                                          const char*                  CharacterEncodingName, 
                                                          const size_t                 TranslationBufferMemorySize);

    QUEX_INLINE void 
    QuexAnalyzerEngine_destruct(QuexAnalyzerEngine* me);

    TEMPLATE_IN(InputHandleT) void
    QuexAnalyzerEngine_reset(QuexAnalyzerEngine*                me,
                       QUEX_TYPE_ANALYZER_FUNCTION  AnalyserFunction,
                       InputHandleT*                input_handle, 
                       const char*                  CharacterEncodingName, 
                       const size_t                 TranslationBufferMemorySize);

    QUEX_INLINE bool 
    QuexAnalyzerEngine_buffer_reload_backward(QuexBuffer* buffer);

    QUEX_INLINE bool 
    QuexAnalyzerEngine_buffer_reload_forward(QuexBuffer* buffer, 
                                       QUEX_TYPE_CHARACTER_POSITION* last_acceptance_input_position,
                                       QUEX_TYPE_CHARACTER_POSITION* post_context_start_position,
                                       const size_t                  PostContextN);


QUEX_NAMESPACE_COMPONENTS_CLOSE

#include <quex/code_base/temporary_macros_off>

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__ANALYSER */
