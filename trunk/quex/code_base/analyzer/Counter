/* -*- C++ -*-   vim: set syntax=cpp:
 * (C) Frank-Rene Schaefer                               */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__BASE
#define __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__BASE

#if ! defined(__QUEX_OPTION_PLAIN_C)
#include <cstddef> 
#else
#include <stddef.h>
#endif

QUEX_NAMESPACE_MAIN_OPEN

#   if defined(__QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT)
    typedef struct {
        QUEX_TYPE_INDENTATION   begin[QUEX_SETTING_INDENTATION_STACK_SIZE];
        QUEX_TYPE_INDENTATION*  end;
        QUEX_TYPE_INDENTATION*  memory_end;
    } QUEX_NAME(IndentationStack);

	QUEX_INLINE void
	QUEX_NAME(IndentationStack_init)(QUEX_NAME(IndentationStack)* me);
	QUEX_INLINE void
	QUEX_NAME(IndentationStack_push)(QUEX_NAME(IndentationStack)* me, QUEX_TYPE_INDENTATION Indentation);
	QUEX_INLINE QUEX_TYPE_INDENTATION
	QUEX_NAME(IndentationStack_pop)(QUEX_NAME(IndentationStack)* me);
#   endif

    typedef struct {
#       ifdef  QUEX_OPTION_LINE_NUMBER_COUNTING
        size_t  _line_number_at_begin;    /* line where current pattern starts   */
        size_t  _line_number_at_end;      /* line after current pattern          */
#       endif
#       ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
        size_t  _column_number_at_begin;  /* column where current pattern starts */
        size_t  _column_number_at_end;    /* column after current pattern        */
#       endif
#       ifdef   __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
        QUEX_NAME(IndentationStack) _indentation_stack;
        QUEX_TYPE_INDENTATION       _indentation;
#       endif
    } QUEX_NAME(Counter);


    QUEX_INLINE void  QUEX_NAME(Counter_construct)(QUEX_NAME(Counter)*  me); 
    QUEX_INLINE void  QUEX_NAME(Counter_init)(QUEX_NAME(Counter)* me);
    QUEX_INLINE void  QUEX_NAME(Counter_reset)(QUEX_NAME(Counter)* me);
    QUEX_INLINE void  QUEX_NAME(Counter_copy_construct)(QUEX_NAME(Counter)*  me, 
                                                       const QUEX_NAME(Counter)*       That);

    QUEX_INLINE void  QUEX_NAME(Counter_count)(QUEX_NAME(Counter)*             me, 
                                                         QUEX_TYPE_CHARACTER*  Lexeme, 
                                                         QUEX_TYPE_CHARACTER*  LexemeEnd);
    QUEX_INLINE QUEX_TYPE_CHARACTER*
    QUEX_NAME(Counter_count_chars_to_newline_backwards)(QUEX_NAME(Counter)*   me, 
                                                        QUEX_TYPE_CHARACTER*  Begin,
                                                        QUEX_TYPE_CHARACTER*  End);

    QUEX_INLINE void  QUEX_NAME(Counter_print_this)(QUEX_NAME(Counter)* me);

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__BASE */

