/* -*- C++ -*-  vim:set syntax=cpp: 
 *
 * (C) 2004-2009 Frank-Rene Schaefer
 *
 * __QUEX_INCLUDE_GUARD__ANALYZER__QUEX_MODE may be undefined in case
 *    that multiple lexical analyzers are used. Then, the name of the
 *    QUEX_TYPE_ACCUMULATOR must be different.                             */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__QUEX_MODE
#define __QUEX_INCLUDE_GUARD__ANALYZER__QUEX_MODE

#ifndef   QUEX_TYPE_ANALYZER
#   error "Macro QUEX_TYPE_ANALYZER must be defined before inclusion of this file."
#endif

#ifndef   QUEX_TYPE_MODE
#   error "Macro QUEX_TYPE_MODE must be defined before inclusion of this file."
#endif

#ifndef   QUEX_TYPE_MODE_TAG
#   error "Macro QUEX_TYPE_MODE_TAG must be defined before inclusion of this file."
#endif

#include<quex/code_base/definitions>
#include<quex/code_base/analyzer/AnalyzerData>

#include<quex/code_base/temporary_macros_on>

#if ! defined(__QUEX_SETTING_PLAIN_C)
#    if defined(QUEX_OPTION_ASSERTS)
#       include<quex/code_base/buffer/MemoryPositionMimiker>
#    endif
#endif

QUEX_NAMESPACE_COMPONENTS_OPEN
    
    typedef struct QUEX_TYPE_MODE_TAG {  
        int                  id;
        const char*          name;
        QuexAnalyzerEngine*  the_lexer;

        QUEX_TYPE_ANALYZER_FUNCTION  analyzer_function;

#       ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT        
        void (*on_indentation)(QUEX_TYPE_ANALYZER_DATA*, const int Indentation);
#       endif
        void (*on_entry)(QUEX_TYPE_ANALYZER_DATA*, const struct QUEX_TYPE_MODE_TAG* FromMode);
        void (*on_exit)(QUEX_TYPE_ANALYZER_DATA*, const struct QUEX_TYPE_MODE_TAG* ToMode);
#       ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK        

        bool (*has_base)(const struct QUEX_TYPE_MODE_TAG* Mode);
        bool (*has_entry_from)(const struct QUEX_TYPE_MODE_TAG* Mode);
        bool (*has_exit_to)(const struct QUEX_TYPE_MODE_TAG* Mode);
#       endif
    } QUEX_TYPE_MODE;
    
    QUEX_INLINE void
    QuexMode_uncallable_analyzer_function(QUEX_TYPE_ANALYZER_DATA*)
    { __quex_assert(0); return; }

    QUEX_INLINE void
    QuexMode_on_indentation_null_function(QUEX_TYPE_ANALYZER_DATA*, const int) 
    { }

    QUEX_INLINE void
    QuexMode_on_entry_exit_null_function(QUEX_TYPE_ANALYZER_DATA*, const QUEX_TYPE_MODE*) 
    { }

QUEX_NAMESPACE_COMPONENTS_CLOSE

#include <quex/code_base/temporary_macros_off>

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__QUEX_MODE */
