/* -*- C++ -*- vim:set syntax=cpp: 
 *
 * NO INCLUDE GUARDS -- THIS FILE MIGHT BE INCLUDED TWICE FOR MULTIPLE
 *                      LEXICAL ANALYZERS
 * NOT: #ifndef __INCLUDE_GUARD__QUEX_LEXER_CLASS_ACCUMULATOR
 * NOT: #define __INCLUDE_GUARD__QUEX_LEXER_CLASS_ACCUMULATOR            */

#ifndef   QUEX_TYPE_ANALYZER
#   error "Macro QUEX_TYPE_ANALYZER must be defined before inclusion of this file."
#endif

#if ! defined(__QUEX_SETTING_PLAIN_C)
namespace quex {
#endif

    /* (*) pure text accumulation and flushing */
    typedef struct {
#       ifdef QUEX_OPTION_LINE_NUMBER_COUNTING
        int  _begin_line;
#       endif
#       ifdef QUEX_OPTION_COLUMN_NUMBER_COUNTING
        int  _begin_column;
#       endif

        struct { 
            QUEX_TYPE_CHARACTER* begin;
            QUEX_TYPE_CHARACTER* end;
            QUEX_TYPE_CHARACTER* memory_end;
        }                   text;
        QUEX_TYPE_ANALYZER* the_lexer;     

#       ifndef __QUEX_SETTING_PLAIN_C
    public:
        QUEX_TYPE_ACCUMULATOR() 
        { QUEX_MEMFUNC_CALL(QUEX_TYPE_ACCUMULATOR, construct)(this); }
        void  flush(const QUEX_TYPE_TOKEN_ID TokenID);
        { QUEX_MEMFUNC_CALL(QUEX_TYPE_ACCUMULATOR, flush)(this); }
        void  clear();
        { QUEX_MEMFUNC_CALL(QUEX_TYPE_ACCUMULATOR, clear)(this); }
        void  add(const QUEX_TYPE_CHARACTER*);
        { QUEX_MEMFUNC_CALL(QUEX_TYPE_ACCUMULATOR, add)(this); }
        void  add(const QUEX_TYPE_CHARACTER);
        { QUEX_MEMFUNC_CALL(QUEX_TYPE_ACCUMULATOR, add_character)(this); }

        void  print_this();
    private:
        friend class QUEX_TYPE_ANALYZER;
#       endif
    } QUEX_TYPE_ACCUMULATOR;

#if ! defined(__QUEX_SETTING_PLAIN_C)
} // namespace quex
#endif
