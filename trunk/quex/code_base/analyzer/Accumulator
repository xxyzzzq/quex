/* -*- C++ -*-  vim:set syntax=cpp: 
 *
 * (C) 2004-2009 Frank-Rene Schaefer
 *
 * __QUEX_INCLUDE_GUARD__ANALYZER__ACCUMULATOR may be undefined in case
 *    that multiple lexical analyzers are used. Then, the name of the
 *    QUEX_NAME(Accumulator) must be different.                             */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__ACCUMULATOR
#define __QUEX_INCLUDE_GUARD__ANALYZER__ACCUMULATOR


#include <quex/code_base/definitions>


QUEX_NAMESPACE_MAIN_OPEN

    /* (*) pure text accumulation and flushing */
    typedef struct {
#       ifdef QUEX_OPTION_LINE_NUMBER_COUNTING
        size_t  _begin_line;
#       endif
#       ifdef QUEX_OPTION_COLUMN_NUMBER_COUNTING
        size_t  _begin_column;
#       endif

        struct { 
            QUEX_TYPE_CHARACTER* begin;
            QUEX_TYPE_CHARACTER* end;
            QUEX_TYPE_CHARACTER* memory_end;
        }                   text;
        QUEX_TYPE_ANALYZER* the_lexer;     

#   ifndef __QUEX_OPTION_PLAIN_C
        friend class QUEX_TYPE_ANALYZER;
#   endif
    } QUEX_NAME(Accumulator);

#   define self_accumulator_add(Begin, End)      QUEX_NAME(Accumulator_add)(&self, Begin, End)
#   define self_accumulator_add_character(Char)  QUEX_NAME(Accumulator_add_character)(&self, Char)
#   define self_accumulator_clear()              QUEX_NAME(Accumulator_add)(&self)

#   define self_accumulator_flush(TokenID)                                            \
    do {                                                                              \
        /* All functions must ensure: there is one cell to store terminating zero. */ \
        __quex_assert(self.accumulator.text.end < self.accumulator.text.memory_end);  \
                                                                                      \
        /* If no text is to be flushed, return undone */                              \
        if( self.accumulator.text.begin == self.accumulator.text.end ) break;         \
                                                                                      \
        *(self.accumulator.text.end) = (QUEX_TYPE_CHARACTER)0; /* see above */        \
                                                                                      \
        self_token_set_id(TokenID);                                                   \
        if( QUEX_NAME_TOKEN(take_text)(__QUEX_CURRENT_TOKEN_P, &self,                 \
                                       self.accumulator.text.begin,                   \
                                       self.accumulator.text.end) == false ) {        \
            /* The called function does not need the memory chunk, we reuse it. */    \
            QUEX_NAME(Accumulator_clear)(me);                                         \
        } else {                                                                      \
            /* The called function wants to use the memory, so we get some new. */    \
            QUEX_NAME(Accumulator_init_memory)(me);                                   \
        }                                                                             \
        QUEX_TOKEN_POLICY_PREPARE_NEXT();                                             \
    } while(0)


    QUEX_INLINE void
    QUEX_NAME(Accumulator_construct)(QUEX_NAME(Accumulator)*, QUEX_TYPE_ANALYZER*);

    QUEX_INLINE void
    QUEX_NAME(Accumulator_destruct)(QUEX_NAME(Accumulator)* me);

    QUEX_INLINE bool
    QUEX_NAME(Accumulator_extend)(QUEX_NAME(Accumulator)* me, size_t MinAddSize);

    QUEX_INLINE void
    QUEX_NAME(Accumulator_clear)(QUEX_NAME(Accumulator)* me);

    QUEX_INLINE void 
    QUEX_NAME(Accumulator_add)(QUEX_NAME(Accumulator)*    me,
                               const QUEX_TYPE_CHARACTER* Begin, const QUEX_TYPE_CHARACTER* End);

    QUEX_INLINE void 
    QUEX_NAME(Accumulator_add_character)(QUEX_NAME(Accumulator)*     me,
                                         const QUEX_TYPE_CHARACTER  Character);
    QUEX_INLINE void
    QUEX_NAME(Accumulator_flush)(QUEX_NAME(Accumulator)*   me,
                                 const QUEX_TYPE_TOKEN_ID  TokenID);

    QUEX_INLINE void  
    QUEX_NAME(Accumulator_print_this)(QUEX_NAME(Accumulator)* me);

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__ACCUMULATOR */
