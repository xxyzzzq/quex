/* -*- C++ -*-   vim: set syntax=cpp:
 * CONTENT: 
 *
 * (1) Includes for required standard headers.
 * (2) Definitions of options and settings for the particular application.
 * (3) #include <quex/code_base/definitions> for default settings.
 * (4) Lexical Analyzer class $$LEXER_CLASS_NAME$$ and its memento class.
 * (5) Constructor and init core of $$LEXER_CLASS_NAME$$.
 * (6) Memento pack and unpack functions.
 *
 * File content generated by Quex $$QUEX_VERSION$$.
 *
 * (C) 2005-2009 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                                    */
#ifndef __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$
#define __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$

#define QUEX_VERSION  "$$QUEX_VERSION$$"

#include <istream>  /* gets: istream and wistream */
#include <cstdio>   /* gets: FILE                 */
#include <quex/code_base/compatibility/inttypes.h>

#include "$$LEXER_CLASS_NAME$$-configuration"

namespace quex {
    class  QUEX_TYPE_ANALYZER;
    struct QUEX_TYPE_MEMENTO_TAG;
$$QUEX_MODE_ID_DEFINITIONS$$
}    


/* Token Class Declaration must preceed the user's header, so that the user
 * can refer to it at ease.                                                    */
$$TOKEN_CLASS_DECLARATION$$

/* START: User defined header content _________________________________________
 *        Must come before token class definition, since the token class 
 *        might rely on contents of the header.                                */
$$USER_DEFINED_HEADER$$
/* END: _______________________________________________________________________*/

#include    "$$TOKEN_ID_DEFINITION_FILE$$"
#include    "$$TOKEN_CLASS_DEFINITION_FILE$$"

#ifndef     QUEX_TYPE_TOKEN 
#   error   "Error: No '#define' of QUEX_TYPE_TOKEN in file $$TOKEN_CLASS_DEFINITION_FILE$$."
#endif
#ifndef     QUEX_TYPE_TOKEN_ID
#   error   "Error: No '#define' of QUEX_TYPE_TOKEN_ID in file $$TOKEN_CLASS_DEFINITION_FILE$$."
#endif

#include    <quex/code_base/definitions>

#ifdef      __QUEX_OPTION_UNIT_TEST
#   include <quex/code_base/test_environment/StrangeStream>
#endif

#include    <quex/code_base/buffer/Buffer>
#include    <quex/code_base/buffer/BufferFiller>

#include    <quex/code_base/MemoryManager>
#include    <quex/code_base/MemoryManager_analyzer_specific>
#include    <quex/code_base/analyzer/QuexMode>
#include    <quex/code_base/analyzer/Analyser>
#ifdef      QUEX_OPTION_STRING_ACCUMULATOR
#   include <quex/code_base/analyzer/Accumulator>
#endif
#ifdef      __QUEX_OPTION_TOKEN_POLICY_IS_QUEUE_BASED
#   include <quex/code_base/token/TokenQueue>
#endif
#ifdef      QUEX_OPTION_POST_CATEGORIZER
#   include <quex/code_base/analyzer/PostCategorizer>
#endif
#include    <quex/code_base/analyzer/Counter>
#include    <quex/code_base/analyzer/AnalyzerData>

/* START: User's derived class declaration (if there is one) __________________*/
$$LEXER_DERIVED_CLASS_DECL$$
/* END: _______________________________________________________________________*/


#include <quex/code_base/temporary_macros_on>
namespace quex {
    
    typedef struct QUEX_TYPE_MEMENTO_TAG {
        QUEX_TYPE_MEMENTO_BASE  base;

        QUEX_TYPE_MEMENTO_TAG()  {}
        ~QUEX_TYPE_MEMENTO_TAG() {}

/* START: User's memento extentions ___________________________________________*/
$$MEMENTO_EXTENSIONS$$
/* END: _______________________________________________________________________*/
    } QUEX_TYPE_MEMENTO;

$$MODE_SPECIFIC_ANALYSER_FUNCTIONS$$

    class QUEX_TYPE_ANALYZER : public QUEX_TYPE_ANALYZER_DATA {

    public:
$$MODE_OBJECTS$$
        /* DISABLED */ QUEX_TYPE_ANALYZER(const QUEX_TYPE_ANALYZER&);
    public:
        QUEX_TYPE_ANALYZER(QUEX_TYPE_CHARACTER* BufferMemoryBegin, size_t  BufferMemorySize,
                           const char*          CharacterEncodingName = 0x0,
                           bool                 ByteOrderReversionF   = false);
        QUEX_TYPE_ANALYZER(const std::string&   Filename,       
                           const char*          CharacterEncodingName = 0x0,
                           bool                 ByteOrderReversionF   = false);
        QUEX_TYPE_ANALYZER(std::istream*        p_input_stream, 
                           const char*          CharacterEncodingName = 0x0,
                           bool                 ByteOrderReversionF   = false);
        QUEX_TYPE_ANALYZER(std::wistream*       p_input_stream, 
                           const char*          CharacterEncodingName = 0x0,
                           bool                 ByteOrderReversionF   = false);
        QUEX_TYPE_ANALYZER(std::FILE*           input_fh,       
                           const char*          CharacterEncodingName = 0x0,
                           bool                 ByteOrderReversionF   = false);
#       if defined(__QUEX_OPTION_UNIT_TEST)
        template <class UnderlyingStreamT>
            QUEX_TYPE_ANALYZER(quex::StrangeStream<UnderlyingStreamT>*  p_input_stream, 
                               const char*                              CharacterEncodingName = 0x0,
                               bool                                     ByteOrderReversionF   = false);
#       endif

        virtual ~QUEX_TYPE_ANALYZER();

        /* Direct Access to Memory */
        QUEX_TYPE_CHARACTER*  buffer_fill_region_append(QUEX_TYPE_CHARACTER* ContentBegin, 
                                                        QUEX_TYPE_CHARACTER* ContentEnd);
        uint8_t*              buffer_fill_region_append_conversion(uint8_t* ContentBegin, 
                                                                   uint8_t* ContentEnd);
        uint8_t*              buffer_fill_region_append_conversion_direct(uint8_t* ContentBegin, 
                                                                          uint8_t* ContentEnd);
        void                  buffer_fill_region_prepare();
        QUEX_TYPE_CHARACTER*  buffer_fill_region_begin();
        QUEX_TYPE_CHARACTER*  buffer_fill_region_end();
        size_t                buffer_fill_region_size();
        void                  buffer_fill_region_finish(const size_t LoadedN);
        void                  buffer_conversion_fill_region_prepare(); 
        uint8_t*              buffer_conversion_fill_region_begin();
        uint8_t*              buffer_conversion_fill_region_end();
        size_t                buffer_conversion_fill_region_size();
        void                  buffer_conversion_fill_region_finish(const size_t  ByteN);
        QUEX_TYPE_CHARACTER*  buffer_lexeme_start_pointer_get();
        void                  buffer_input_pointer_set(QUEX_TYPE_CHARACTER*);

        // -- activate/deactivate byte order reversion (big-/little-endian)
        bool     byte_order_reversion();
        void     byte_order_reversion_set(bool Value);

        // -- token stream: read next token
        void  get_token() 
        { QUEX_ERROR_EXIT("get_token() deprecated since quex v. >= 0.37.1, use .receive(...)\n"); }
        void  get_token(QUEX_TYPE_TOKEN*   result_p)
        { QUEX_ERROR_EXIT("get_token(Token*) deprecated since quex v. >= 0.37.1, use .receive(...)\n"); }
        void  get_token(QUEX_TYPE_TOKEN**   result_p)
        { QUEX_ERROR_EXIT("get_token(Token**) deprecated since quex v. >= 0.37.1, use .receive(...)\n"); }

#       if   defined(QUEX_OPTION_TOKEN_POLICY_QUEUE)
        void                 receive(QUEX_TYPE_TOKEN*   result_p);
        void                 receive(QUEX_TYPE_TOKEN**  result_pp);
#       elif defined(QUEX_OPTION_TOKEN_POLICY_USERS_TOKEN)
        void                 receive();
        void                 receive(QUEX_TYPE_TOKEN*   result_p);
#       elif defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
        QUEX_TYPE_TOKEN*     receive(QUEX_TYPE_TOKEN*  begin, QUEX_TYPE_TOKEN* end);
#       endif
        // NOTE: A pointer to an object of the token queue/object is used in order to make
        //       memory management more flexible. The token queue/token object is heavily
        //       used and it should be possible to put it somewhere in memory with other
        //       heavily used data so that the cache can take advantage of data locality.
        QUEX_TYPE_TOKEN*    token_object();

        //
        // (*) Mode handling
        //
        //     -- modes: read access
        QUEX_TYPE_MODE&   mode();
        int               mode_id() const;
        const char*       mode_name() const;
        //
        //     -- modes: changing lexical analysis mode
        void        set_mode_brutally(const int       LexerMode);
        void        set_mode_brutally(const QUEX_TYPE_MODE& Mode);
        //
        void        operator<<(const int MODE_ID);               // not to be used in concatination
        void        operator<<(/* NOT const*/ QUEX_TYPE_MODE& Mode);  // not to be used in concatination
        //
        void        pop_mode();
        void        pop_drop_mode();
        void        push_mode(QUEX_TYPE_MODE& new_mode);
        //
        void        enter_mode(/* NOT const*/ QUEX_TYPE_MODE& TargetMode);
        //
        //     -- map: mode id to mode and vice versa
        QUEX_TYPE_MODE&   map_mode_id_to_mode(const int        ModeID);       
        int         map_mode_to_mode_id(const QUEX_TYPE_MODE& Mode) const;

        // (*) Token sending
        void        send(const QUEX_TYPE_TOKEN& That);
        void        send(const QUEX_TYPE_TOKEN_ID TokenID);
        void        send_n(const int N, const QUEX_TYPE_TOKEN_ID TokenID);
        template    <typename ContentT> 
        void        send(const QUEX_TYPE_TOKEN_ID TokenID, ContentT Content);
        template    <typename X0_T, typename X1_T> inline 
        void        send(const QUEX_TYPE_TOKEN_ID ID, X0_T X0, X1_T X1);
        template    <typename X0_T, typename X1_T, typename X2_T> inline 
        void        send(const QUEX_TYPE_TOKEN_ID ID, X0_T X0, X1_T X1, X2_T X2);
        template    <typename X0_T, typename X1_T, typename X2_T, typename X3_T> inline 
        void        send(const QUEX_TYPE_TOKEN_ID ID, X0_T X0, X1_T X1, X2_T X2, X3_T); 


#       ifdef  QUEX_OPTION_LINE_NUMBER_COUNTING
        int  line_number() const          { return line_number_at_begin(); }
        int  line_number_at_begin() const { return counter.base._line_number_at_begin; }
        int  line_number_at_end() const   { return counter.base._line_number_at_end; }
#       endif
#       ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
        int  column_number() const          { return column_number_at_begin(); }
        int  column_number_at_begin() const { return counter.base._column_number_at_begin; }
        int  column_number_at_end() const   { return counter.base._column_number_at_end; }
#       endif
#       ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
        int  indentation()                    { return counter._indentation; }
        void disable_next_indentation_event() { counter._indentation_event_enabled_f = false; }
#       endif

        //
        // (*) Version information
        const char* version() const; // created by quex for version/date information

        // (*) Helper
        void    move_forward(const size_t);
        void    move_backward(const size_t);
        size_t  tell();
        void    seek(const size_t);

    public:
        template <class InputHandleT> void reset(InputHandleT*   input_handle, 
                                                 const char*     CharacterEncodingName = 0x0); 
        void                               reset(const char* CharacterEncodingName = 0x0) 
        { reset<void>((void*)0x0, CharacterEncodingName); }


        // (*) All Modes are Friends _____________________________________________________
$$MODE_CLASS_FRIENDS$$  
        // (*) User defined Friends ______________________________________________________
$$LEXER_CLASS_FRIENDS$$
#   ifdef QUEX_OPTION_INCLUDE_STACK
    private:
        //      -- include events (a file is included)
        template<class InputHandleT> QUEX_TYPE_MEMENTO*  
              memento_pack(QUEX_TYPE_CHARACTER* InputName, InputHandleT**);
        void  memento_unpack(QUEX_TYPE_MEMENTO*);
        void  include_stack_delete();

    public:
        template <class InputHandle> void  include_push(QUEX_TYPE_CHARACTER*     InputName, 
                                                        const QUEX_TYPE_MODE&          mode, 
                                                        const char*              IANA_CodingName = 0x0);
        template <class InputHandle> void  include_push(QUEX_TYPE_CHARACTER*     InputName, 
                                                        const int                MODE_ID         = -1, 
                                                        const char*              IANA_CodingName = 0x0);
        bool                               include_pop();
#   endif
    public:
        void  print_this();

    private:
        // (*) Common core of all constructors ___________________________________________
        template <class InputHandleT> 
        void                        __constructor_core(InputHandleT*, 
                                                       const char*           CharacterEncodingName,
                                                       bool                  ByteOrderReversionF,
                                                       QUEX_TYPE_CHARACTER*  BufferMemory     = 0x0,
                                                       size_t                BufferMemorySize = 0);
    public:
#       define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
/* START: User's class body extensions ________________________________________*/
$$CLASS_BODY_EXTENSION$$
/* END: _______________________________________________________________________*/
#       undef  self

    };

    template <class InputHandleT> inline void
    QUEX_TYPE_ANALYZER::__constructor_core(InputHandleT*             input_handle, 
                                           const char*               CharacterEncodingName,
                                           bool                      ByteOrderReversionF,
                                           QUEX_TYPE_CHARACTER*      BufferMemory,    
                                           size_t                    BufferMemorySize)
    {
#       if      defined(QUEX_OPTION_ASSERTS) \
           && ! defined(QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED)
        __QUEX_STD_printf(__QUEX_MESSAGE_ASSERTS_INFO);
#       endif

#       if   defined(QUEX_OPTION_TOKEN_POLICY_QUEUE)
        /* explict call of placement new for all tokens in the chunk */
        QuexTokenQueue_construct(&_token_queue, QUEX_SETTING_TOKEN_QUEUE_SIZE);
#       elif defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
        QuexTokenQueue_construct(&_token_queue, 0);
#       else
        token = 0x0; /* call to 'receive(Token*)' provides pointer to some place in memory. */
#       endif

#       ifdef QUEX_OPTION_STRING_ACCUMULATOR
        accumulator._the_lexer = this;
#       endif
        QUEX_PREFIX(QUEX_TYPE_COUNTER, _construct)(&counter);
#       ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
        counter._the_lexer = this;
#       endif

        mode_db[0] = 0x0;
        // LexModeID = 0 is not used, mode indices from 1 to ModeN
$$CONSTRUCTOR_MODE_DB_INITIALIZATION_CODE$$

#       ifdef  QUEX_OPTION_INCLUDE_STACK
        _parent_memento = 0x0;
#       endif

        __current_mode_p = 0x0; /* REQUIRED, for mode transition check */
        set_mode_brutally(__QUEX_SETTING_INITIAL_LEXER_MODE_ID);

        _mode_stack.end        = _mode_stack.begin;
        _mode_stack.memory_end = _mode_stack.begin + QUEX_SETTING_MODE_STACK_SIZE;


        QuexAnalyser_construct((QuexAnalyser*)this,
                               __current_mode_p->analyser_function,
                               input_handle,
                               BufferMemory, QUEX_SETTING_BUFFER_SIZE,
                               CharacterEncodingName, 
                               QUEX_SETTING_TRANSLATION_BUFFER_SIZE,
                               ByteOrderReversionF);

        if( input_handle == 0x0 ) {
            /* TWO CASES:
             * (1) The user provides a buffer memory: --> assume it is filled to the end.
             * (2) The user does not provide memory:  --> the memory IS empty.             */
            if( BufferMemory == 0x0 ) {
                /* 'buffer._memory._front' has been set at this point in time.             */
                QuexBuffer_end_of_file_set(&buffer, buffer._memory._front + 1);
            }
            /* When working on plain memory, the '_end_of_file_p' must be set to indicate
             * the end of the content.                                                     */
            __quex_assert(buffer._memory._end_of_file_p != 0x0);
        }

        __file_handle_allocated_by_constructor = 0x0;

#       define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
/* START: User's constructor extensions _______________________________________*/
$$CONSTRUCTOR_EXTENSTION$$
/* END: _______________________________________________________________________*/
#       undef self
    }

    template <class InputHandleT> inline void
    QUEX_TYPE_ANALYZER::reset(InputHandleT*   input_handle, 
                              const char*     CharacterEncodingName /* = 0x0 */) 
    {
        __current_mode_p = 0x0; /* REQUIRED, for mode transition check */
        set_mode_brutally(__QUEX_SETTING_INITIAL_LEXER_MODE_ID);

        _mode_stack.end        = _mode_stack.begin;
        _mode_stack.memory_end = _mode_stack.begin + QUEX_SETTING_MODE_STACK_SIZE;

        QuexAnalyser_reset((QuexAnalyser*)this, 
                           __current_mode_p->analyser_function,
                           input_handle, 
                           CharacterEncodingName, 
                           QUEX_SETTING_TRANSLATION_BUFFER_SIZE);

        QUEX_PREFIX(QUEX_TYPE_COUNTER, _init)(&counter);

#       ifdef __QUEX_OPTION_TOKEN_POLICY_IS_QUEUE_BASED
        QuexTokenQueue_reset(this->_token_queue);
#       endif

#       ifdef QUEX_OPTION_STRING_ACCUMULATOR
        accumulator.clear();
#       endif

#       ifdef QUEX_OPTION_INCLUDE_STACK
        include_stack_delete();
#       endif

#       ifdef QUEX_OPTION_POST_CATEGORIZER
        post_categorizer.clear();
#       endif

        byte_order_reversion_set(false);
    }


    inline bool
    QUEX_TYPE_ANALYZER::byte_order_reversion()
    { return buffer._byte_order_reversion_active_f; }

    inline void     
    QUEX_TYPE_ANALYZER::byte_order_reversion_set(bool Value)
    { buffer._byte_order_reversion_active_f = Value; }

    inline const char* 
    QUEX_TYPE_ANALYZER::version() const
    { 
        return "$$LEXER_CLASS_NAME$$: Version $$LEXER_BUILD_VERSION$$. Date $$LEXER_BUILD_DATE$$\n"
               "Generated by Quex $$QUEX_VERSION$$";
    }

#   ifdef QUEX_OPTION_INCLUDE_STACK
 
    template<class InputHandleT> inline QUEX_TYPE_MEMENTO*
    QUEX_TYPE_ANALYZER::memento_pack(QUEX_TYPE_CHARACTER* InputName, InputHandleT** input_handle)
    {
#       define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
        QUEX_TYPE_MEMENTO* memento = MemoryManager_$$LEXER_CLASS_NAME$$Memento_allocate();

        /* Use placement 'new' for explicit call of constructor */
        new ((void*)memento) QUEX_TYPE_MEMENTO;

        memento->base.parent         = self._parent_memento;
        memento->base.analyser_core  = *((QuexAnalyser*)this);
        memento->base.counter        = self.counter;
        memento->base.current_mode_p = self.__current_mode_p;
#       ifdef __QUEX_OPTION_TOKEN_POLICY_IS_QUEUE_BASED
        // QuexTokenQueueRemainder_restore(&memento->token_queue_remainder, &self._token_queue);
#       endif

/* START: User's memento 'pack' _______________________________________________*/
$$MEMENTO_EXTENSIONS_PACK$$
/* END: _______________________________________________________________________*/

        return memento;
#       undef self
    }

    inline void
    QUEX_TYPE_ANALYZER::memento_unpack(QUEX_TYPE_MEMENTO* memento)
    {
#       define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
        self._parent_memento    = memento->base.parent;
        *((QuexAnalyser*)this)  = memento->base.analyser_core;
        self.counter            = memento->base.counter;
        self.__current_mode_p   = memento->base.current_mode_p;
        
#       ifdef __QUEX_OPTION_TOKEN_POLICY_IS_QUEUE_BASED
        // QuexTokenQueueRemainder_restore(&memento->token_queue_remainder, &self._token_queue);
#       endif

/* START: User's memento 'unpack' _____________________________________________*/
$$MEMENTO_EXTENSIONS_UNPACK$$
/* END: _______________________________________________________________________*/
        
        /* Counterpart to placement new: Explicit destructor call */
        memento->~QUEX_TYPE_MEMENTO_TAG();
        MemoryManager_$$LEXER_CLASS_NAME$$Memento_free(memento);
#       undef self
    }
#   endif /* QUEX_OPTION_INCLUDE_STACK */

}

#include <quex/code_base/temporary_macros_off>


#if         ! defined( QUEX_OPTION_ENGINE_CODEC_ADAPTION )
#   include <quex/code_base/analyzer/constructor.i>
#else
#   include <quex/code_base/analyzer/constructor-engine-codec-adaption.i>
#endif
#include    <quex/code_base/analyzer/Counter.i>
#ifdef      __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
#   include <quex/code_base/analyzer/CounterWithIndentation.i>
#endif
#ifdef      QUEX_OPTION_STRING_ACCUMULATOR
#   include <quex/code_base/analyzer/Accumulator.i>
#endif

#include    <quex/code_base/analyzer/token_sending.i>
#include    <quex/code_base/analyzer/token_receiving.i>

#include    <quex/code_base/analyzer/mode_handling.i>
#ifdef      QUEX_OPTION_INCLUDE_STACK
#   include <quex/code_base/analyzer/IncludeStack.i>
#endif
#include    <quex/code_base/analyzer/misc.i>
#include    <quex/code_base/analyzer/buffer_access.i>

#include    <quex/code_base/MemoryManager.i>
#include    <quex/code_base/MemoryManager_analyzer_specific.i>

#include    <quex/code_base/analyzer/Analyser.i>
#include    <quex/code_base/buffer/converter/BufferFiller_Converter.i>

#endif // __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$
