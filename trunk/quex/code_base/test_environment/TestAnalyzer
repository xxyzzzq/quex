/* -*- C++ -*-  vim:set syntax=cpp: 
 *
 * (C) 2004-2009 Frank-Rene Schaefer
 *
 * __QUEX_INCLUDE_GUARD__ANALYZER__ANALYZER_DATA may be undefined in case
 *    that multiple lexical analyzers are used. Then, the name of the
 *    QUEX_NAME(Analyzer) must be different.                             */
#ifndef __QUEX_INCLUDE_GUARD__TEST_ENVIRONMENT__TEST_ANALYZER
#undef  __QUEX_INCLUDE_GUARD__TEST_ENVIRONMENT__TEST_ANALYZER

#define  __QUEX_SETTING_INITIAL_LEXER_MODE_ID  0

#include <quex/code_base/compatibility/stdint.h>
#include <quex/code_base/test_environment/TestAnalyzer-configuration>

#if ! defined(__QUEX_OPTION_PLAIN_C)
    QUEX_NAMESPACE_MAIN_OPEN 
    class QUEX_NAME(Engine);
    class QUEX_NAME(Memento);
    class TestAnalyzer;
    typedef __QUEX_TYPE_ANALYZER_RETURN_VALUE  (*QUEX_NAME(AnalyzerFunctionP))(TestAnalyzer*);

    /* Token Class Declaration must preceed the user's header, so that the user
     * can refer to it at ease.                                                    */
    class QUEX_TYPE0_TOKEN;
    QUEX_NAMESPACE_MAIN_CLOSE
#else
    struct  QUEX_NAME(Engine_tag);
    struct  QUEX_NAME(Memento_tag);
    struct  quex_TestAnalyzer_tag;    
    typedef __QUEX_TYPE_ANALYZER_RETURN_VALUE  (*QUEX_NAME(AnalyzerFunctionP))(struct quex_TestAnalyzer_tag*);

    /* Token Class Declaration must preceed the user's header, so that the user
     * can refer to it at ease.                                                    */
    QUEX_TYPE0_TOKEN;
#endif
   
#include <quex/code_base/analyzer/headers>

QUEX_NAMESPACE_TOKEN_OPEN
#   if ! defined(__QUEX_OPTION_PLAIN_C)
        class Token { 
        public:
            QUEX_TYPE_TOKEN_ID _id; 
            QUEX_TYPE_TOKEN_ID type_id() { return _id; } 
        };
#   else
        typedef struct quex_Token_tag { 
            size_t _id; 
        } quex_Token;
#   endif
    void QUEX_NAME_TOKEN(construct)(QUEX_TYPE_TOKEN* me) { (void)me; }
    void QUEX_NAME_TOKEN(destruct)(QUEX_TYPE_TOKEN* me) { (void)me; }
QUEX_NAMESPACE_TOKEN_CLOSE

#include <quex/code_base/temporary_macros_on>

QUEX_NAMESPACE_MAIN_OPEN

#   ifdef QUEX_OPTION_INCLUDE_STACK
    /* Forward declaration of the derived memento, which is used by the 
     * analyzer.                                                             */
    struct  QUEX_NAME(Memento_tag);
#   endif

    struct QUEX_NAME(Mode_tag);

    extern QUEX_NAME(Mode)*  (QUEX_NAME(mode_db)[__QUEX_SETTING_MAX_MODE_CLASS_N]);  

#  if ! defined(__QUEX_OPTION_PLAIN_C)
   class TestAnalyzer {
      /* Most compilers put the virtual function table in front of the object.
       * So, if the derived class has a virtual function, and therefore a
       * v-table, the cast towards the base class and back might not work. Thus
       * let us ensure that all related objects contain a v-table by having one
       * virtual function.                                                   */

      public:
      virtual ~TestAnalyzer();
#     include <quex/code_base/analyzer/Engine_body>
      
      /*_________________________________________________________________________
       * Constructor:
       *
       * 'from' functions are provided so that explicit constructor calls 
       * can be done without placement ::new or sophisticated C++11 features.  */
      void    from(const char*  Filename, const char*  CodecName = 0x0);
      void    from(std::FILE* fh, const char*  CodecName = 0x0);
      void    from(std::istream* istream_p, const char*  CodecName = 0x0);
      void    from(std::wistream* istream_p, const char*  CodecName = 0x0);
      void    from(ByteLoader* byte_loader, const char*  CodecName = 0x0);
      void    from(QUEX_NAME(BufferFiller)* filler);
      void    from(QUEX_TYPE_CHARACTER* BufferMemoryBegin, 
                   size_t               BufferMemorySize,
                   QUEX_TYPE_CHARACTER* BufferEndOfContentP = 0x0);
      // (*) Common for constructor, reset, and include push ___________________________
      void    basic_constructor();
      void    basic_include_push(); 
      void    basic_reset();
      
      void    user_constructor();
      void    user_memento_pack(QUEX_NAME(Memento)*); 
      void    user_memento_unpack(QUEX_NAME(Memento)*);
      void    user_reset();
      // (*) Mode handling (copied from TXT-Cpp)
      //     -- modes: read access
      QUEX_NAME(Mode)&      mode();
      int                   mode_id() const;
      const char*           mode_name() const;
      //
      //     -- modes: changing lexical analysis mode
      void                  set_mode_brutally(const int ModeId);
      void                  set_mode_brutally(const QUEX_NAME(Mode)& Mode);
      //                    
      void                  operator<<(const int ModeId);               
      void                  operator<<(/* NOT const*/ QUEX_NAME(Mode)& Mode);  
      //                    
      void                  pop_mode();
      void                  pop_drop_mode();
      void                  push_mode(QUEX_NAME(Mode)& new_mode);
      //                    
      void                  enter_mode(/* NOT const*/ QUEX_NAME(Mode)& TargetMode);
      //
      //     -- map: mode id to mode and vice versa
      QUEX_NAME(Mode)&      map_mode_id_to_mode(const int              ModeID);       
      int                   map_mode_to_mode_id(const QUEX_NAME(Mode)& Mode) const;
   };
#  else
   typedef struct quex_TestAnalyzer_tag { 
#     include <quex/code_base/analyzer/Engine_body>
   } quex_TestAnalyzer;
#  endif

QUEX_INLINE void
QUEX_MEMBER_FUNCTIONO(user_constructor)
{
    (void)this;
}

QUEX_INLINE void
QUEX_MEMBER_FUNCTIONO(user_reset) 
{
    (void)this;
}

#ifdef QUEX_OPTION_INCLUDE_STACK

QUEX_INLINE void
QUEX_MEMBER_FUNCTIONO1(user_memento_pack, QUEX_NAME(Memento)* memento) 
{
    (void)this; (void)memento;
}

QUEX_INLINE void
QUEX_MEMBER_FUNCTIONO1(user_memento_unpack, QUEX_NAME(Memento)*  memento)
{
    (void)this; (void)memento;
}
#endif /* QUEX_OPTION_INCLUDE_STACK */

QUEX_NAMESPACE_MAIN_CLOSE

#include <quex/code_base/temporary_macros_off>

/* NOT: #include <quex/code_base/analyzer/headers.i>
 * otherwise we might have to provide things that we actually do not need at all. */
#include    <quex/code_base/converter_helper/from-unicode-buffer>
#include    <quex/code_base/converter_helper/from-unicode-buffer.i>
#include    <quex/code_base/aux-string.i>

#include    <quex/code_base/analyzer/struct/constructor.i>
#include    <quex/code_base/analyzer/struct/basic.i>

#include    <quex/code_base/buffer/Buffer.i>
#include    <quex/code_base/buffer/BufferFiller.i>

#if defined(__QUEX_OPTION_CONVERTER)
#   include <quex/code_base/buffer/converter/BufferFiller_Converter.i>
#endif

#ifdef      QUEX_OPTION_STRING_ACCUMULATOR
#   include <quex/code_base/analyzer/Accumulator.i>
#endif
#ifdef      __QUEX_OPTION_COUNTER
#   include <quex/code_base/analyzer/Counter.i>
#endif
#ifdef      QUEX_OPTION_INDENTATION_TRIGGER
#   include <quex/code_base/analyzer/member/on_indentation.i>
#endif


#endif /* __QUEX_INCLUDE_GUARD__TEST_ENVIRONMENT__TEST_ANALYZER */
