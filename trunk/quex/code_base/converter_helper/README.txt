Converter Helpers
-------------------------------------------------------------------------------

The functions provided in this component shall help to convert a string
into one of the following target codings:

    -- UTF 8
    -- UTF 16
    -- UTF 32
    -- 'char' or 'wchar_t' (relying on one of the above)

(1) Character Converters ____________________________________________________

All string converters are built upon character converters which are implemented
each for its particular translation. That means, that for each translation
from a codec to a codec there is a character converter as

    __QUEX_CONVERTER_CHAR(from, to)(in_type** source_p, out_type** drain_p)

which increments the input and output pointer according to the characters that
have been consumed and written. Those basic character converter functions are
grouped into 'character-converter/from-*.i' files. The file 
'character-converter/from-utf8.i' for example implements the character
converter functions

    __QUEX_CONVERTER_CHAR(utf8, utf8)(...)
    __QUEX_CONVERTER_CHAR(utf8, utf16)(...)
    __QUEX_CONVERTER_CHAR(utf8, utf32)(...)

Those functions are written in a way, so that they do neither depend on the
analyzer, nor on the systems definition of 'char' and 'wchar_t'. Based on 
their definition the converters towards 'char' and 'wchar_t' are derived
through the generator file

    './generator/character-converter-to-char-wchar.gi'


(2) String Converters _______________________________________________________

String converters are implemented automatically through generator files.
They rely on the correspondent character converters being implemented. 
Two string converters are defined for each translation

    QUEX_INLINE void
    __QUEX_CONVERTER_STRING(from, to)(const in_type**  source_pp, 
                                      const in_type*   SourceEnd, 
                                      out_type**       drain_pp,  
                                      const out_type*  DrainEnd);

    QUEX_INLINE std::basic_string<in_type>
    __QUEX_CONVERTER_STRING(buffer, to)(const std::basic_string<in_type>& Source);

where the second convenient string converter is only available in C++.
As said, the string converters are built upon the character converters
and generated automatically. Each one is generated by 

    './generator/string-converter.gi'


(3) Buffer Specific Converters ______________________________________________

To help directly transforming a string from the analyzer's buffer a set of
functions is provided that carry 'buffer' as the 'from' name, i.e. for 
example

    __QUEX_CONVERTER_STRING(buffer, utf16)(...)

converts a string from the analyzer's buffer to UTF-16 without the user having
to think about the particular buffer's type and codec. Internally, those
functions are routed to the correspondent converter functions from the 
aforementioned function block. All those functions are available in 

   'from-unicode-buffer.i'

(4) Codec Specific Converters _______________________________________________

Quex is able to run a whole engine on a codec different from unicode. Then,
converters come handy that translate the buffer's content into a more popular
codec such as UTF-8. This is done as follows:

   -- Quex uses the file 'TXT-from-codec-buffer.i' as a template and
      generates character converters towards UTF-8, UTF-16, and UTF-32.

   -- From inside the generated files the generator 
    
      './generator/character-converter-to-char-wchar.gi'

      is called to generate character converters towards 'char' and 'wchar_t'.

   -- Based on the now present character converters the 

Make sure you read the documentation on converter helpers. Following notes 
recall some rationals about design decisions:

-- There are some converters which are UNIVERSAL, i.e. they may be used 
   accross lexical analyzers, accross token classes, and even beyond
   quex. 

   Accordingly, they are placed in subdirectory './universe'. They
   can be used and included without parameterization in any program.

   They are placed in namespace 'quex'.

-- Other converters are specific, that is, they depend on the QUEX_TYPE_CHARACTER
   and may be even the codec (if not converter is used).

   Those are analyzer specific and are thus placed in namespace 
   'QUEX_NAMESPACE_MAIN' as defined in the generated configuration file.

-- Codec converters are generated FOR a particular analyzer, BUT they function
   independently. That is, a converter from 'ASCII Latin 1' to 'UTF8' does
   the job independent on the definition of QUEX_TYPE_CHARACTER or 
   other analyzer specific parameters. 
   
   Thus: they are considered UNIVERSAL and generated into namespace 'quex'. 
   
-- To maintain consistency, lots of code is generated by the C-Preprocessor.
   The generator headers are located in './generator'. Those 'generators'
   are used to generate UNIVERSAL and SPECIFIC code. So, they do not 
   contain any namespace. The namespace of the generated functions must
   be determined by the including file.
