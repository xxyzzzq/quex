/* vim: set ft=cpp: -*- C++ -*- */
#ifndef __QUEX_INCLUDE_GUARD__BUFFER__BUFFER
#define __QUEX_INCLUDE_GUARD__BUFFER__BUFFER

#include<quex/code_base/definitions>
#include<quex/code_base/MemoryManager>

#include <quex/code_base/temporary_macros_on>

QUEX_NAMESPACE_MAIN_OPEN

typedef struct { 
    E_Ownership           ownership;

    /* (*) Buffer Memory Setup:
     *      memory[0]             = lower buffer limit code character
     *      memory[1]             = first char of content
     *      ...
     *      memory[BUFFER_SIZE-2] = last char of content
     *      memory[BUFFER_SIZE-1] = upper buffer limit code character             */
    QUEX_TYPE_CHARACTER*  _front;         /* first character in buffer (BLC)      */
    QUEX_TYPE_CHARACTER*  _back;          /* last character in buffer  (BLC)      */

} QUEX_NAME(BufferMemory);

QUEX_INLINE size_t  QUEX_NAME(BufferMemory_size)(QUEX_NAME(BufferMemory)*);

typedef struct { 
/* Buffer of characters on which the analyzer runs. 
 *
 * Character Stream:
 * (by BufferFiller)     
 *     
 *    character_index_end_of_stream ----------------------.
 *    character_index_begin ---------------.              |
 *                                         |              |
 *    character index:   0  1  2  3  4  6  6  7  8  9  10 11 12 13 14 ...
 *  
 *    stream:           [aa.bb.cc.dd.ee.ff:gg.hh.ii.jj.kk.ll:mm.nn.oo.pp.qq ...
 *                              .---------'                 |
 * Buffer:                      |                 .---------' 
 *                           [00|gg.hh.ii.jj.kk.ll|00.??.??.??.??|00]
 *                            |                    |              |
 *           _front ----------'                    |              |
 *           input.end_p --------------------------'              |
 *           _back -----------------------------------------------'
 * 
 * 'character_index_end_of_stream == -1' => end of stream has not yet been
 * detected.                                                                 */
                                                                             
    QUEX_NAME(BufferMemory)  _memory;                                        
                                                                             
    /* (*) Iterator positions for lexical analysis                           */
    QUEX_TYPE_CHARACTER*     _read_p;                                        
    QUEX_TYPE_CHARACTER*     _lexeme_start_p;                                
                                                                             
    struct {                                                                 
        QUEX_TYPE_CHARACTER*      end_p;                                     
        QUEX_TYPE_STREAM_POSITION character_index_begin;                     
        /* Character index + 1 of the last character in the stream.          */
        QUEX_TYPE_STREAM_POSITION character_index_end_of_stream; 
    } input;

    /* (*) Information about previous content:
     *
     * _character_at_lexeme_start: character that has been covered by a 
     *                             terminating zero. Reset upon restart of 
     *                             analysis.
     * _character_at_lexeme_start: Used to check whether the lexeme's 
     *                             preceeding character was newline. 
     *                             (i.e. for begin-of-line pre-context).     */
    QUEX_TYPE_CHARACTER      _character_at_lexeme_start;      
#   ifdef __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
    QUEX_TYPE_CHARACTER      _character_before_lexeme_start;  
#   endif

    struct    QUEX_NAME(BufferFiller_tag)*  filler;

    void      (*on_buffer_content_change)(const QUEX_TYPE_CHARACTER*  BeginOfContent,
                                          const QUEX_TYPE_CHARACTER*  EndOfContent);
} QUEX_NAME(Buffer);

QUEX_INLINE void    QUEX_NAME(Buffer_construct)(QUEX_NAME(Buffer)*                   me, 
                                                struct QUEX_NAME(BufferFiller_tag)*  filler,
                                                QUEX_TYPE_CHARACTER*                 memory,
                                                const size_t                         MemorySize,
                                                QUEX_TYPE_CHARACTER*                 EndOfFileP,
                                                E_Ownership                          Ownership);

QUEX_INLINE void    QUEX_NAME(Buffer_reset)(QUEX_NAME(Buffer)*                  me, 
                                            struct QUEX_NAME(BufferFiller_tag)* filler); 
QUEX_INLINE void    QUEX_NAME(Buffer_init_analyzis)(QUEX_NAME(Buffer)*   me,
                                                    QUEX_TYPE_CHARACTER* EndOfFileP); 

QUEX_INLINE void                  QUEX_NAME(Buffer_destruct)(QUEX_NAME(Buffer)* me);

QUEX_INLINE QUEX_TYPE_CHARACTER*  QUEX_NAME(Buffer_content_front)(QUEX_NAME(Buffer)*);
QUEX_INLINE QUEX_TYPE_CHARACTER*  QUEX_NAME(Buffer_content_back)(QUEX_NAME(Buffer)*);
QUEX_INLINE size_t                QUEX_NAME(Buffer_content_size)(QUEX_NAME(Buffer)*);

QUEX_INLINE QUEX_TYPE_CHARACTER*  QUEX_NAME(Buffer_tell_memory_adr)(QUEX_NAME(Buffer)*);
QUEX_INLINE void                  QUEX_NAME(Buffer_seek_memory_adr)(QUEX_NAME(Buffer)*, 
                                                                    QUEX_TYPE_CHARACTER*);

QUEX_INLINE QUEX_TYPE_STREAM_POSITION  
                       QUEX_NAME(Buffer_tell)(QUEX_NAME(Buffer)*);
QUEX_INLINE void       QUEX_NAME(Buffer_seek)(QUEX_NAME(Buffer)*, 
                                              const QUEX_TYPE_STREAM_POSITION CharacterIndex);
QUEX_INLINE bool       QUEX_NAME(Buffer_seek_forward)(QUEX_NAME(Buffer)*, const ptrdiff_t CharacterN);
QUEX_INLINE bool       QUEX_NAME(Buffer_seek_backward)(QUEX_NAME(Buffer)*, const ptrdiff_t CharacterN);

QUEX_INLINE QUEX_TYPE_CHARACTER*
                       QUEX_NAME(Buffer_move_away_passed_content)(QUEX_NAME(Buffer)* me);
QUEX_INLINE ptrdiff_t  QUEX_NAME(Buffer_move_away_upfront_content)(QUEX_NAME(Buffer)* me);
QUEX_INLINE bool       QUEX_NAME(Buffer_load_forward)(QUEX_NAME(Buffer)*);
QUEX_INLINE bool       QUEX_NAME(Buffer_load_backward)(QUEX_NAME(Buffer)*);
QUEX_INLINE bool       QUEX_NAME(Buffer_move_and_fill_backward)(QUEX_NAME(Buffer)* me, 
                                                                QUEX_TYPE_STREAM_POSITION NewCharacterIndexBegin);
QUEX_INLINE bool       QUEX_NAME(Buffer_move_and_fill_forward)(QUEX_NAME(Buffer)* me, 
                                                               QUEX_TYPE_STREAM_POSITION NewCharacterIndexBegin,
                                                               QUEX_TYPE_STREAM_POSITION MinCharacterIndexInBuffer);
QUEX_INLINE void       QUEX_NAME(Buffer_register_content)(QUEX_NAME(Buffer)* me,
                                                          QUEX_TYPE_CHARACTER*      EndOfInputP,
                                                          QUEX_TYPE_STREAM_POSITION CharacterIndexBegin);
QUEX_INLINE void       QUEX_NAME(Buffer_register_eos)(QUEX_NAME(Buffer)* me,
                                                      QUEX_TYPE_STREAM_POSITION CharacterIndexEndOfStream);
QUEX_INLINE QUEX_TYPE_STREAM_POSITION  
                       QUEX_NAME(Buffer_input_character_index_end)(QUEX_NAME(Buffer)* me);
QUEX_INLINE QUEX_TYPE_STREAM_POSITION  
                       QUEX_NAME(Buffer_input_character_index_begin)(QUEX_NAME(Buffer)* me);

QUEX_INLINE bool       QUEX_NAME(Buffer_is_empty)(QUEX_NAME(Buffer)* me);
QUEX_INLINE bool       QUEX_NAME(Buffer_is_end_of_file)(QUEX_NAME(Buffer)*);
QUEX_INLINE bool       QUEX_NAME(Buffer_is_begin_of_file)(QUEX_NAME(Buffer)*);
                      
QUEX_INLINE void       QUEX_NAME(Buffer_reverse_byte_order)(QUEX_TYPE_CHARACTER*       Begin, 
                                                            const QUEX_TYPE_CHARACTER* End);
                      
QUEX_INLINE void       QUEX_NAME(Buffer_print_this)(QUEX_NAME(Buffer)*);

QUEX_NAMESPACE_MAIN_CLOSE
#include <quex/code_base/temporary_macros_off>
#include <quex/code_base/buffer/filler/BufferFiller>

#endif /* __QUEX_INCLUDE_GUARD__BUFFER__BUFFER */
