// -*- C++ -*-  vim: set syntax=cpp:
// (C) 2007-2008 Frank-Rene Schaefer
#ifndef __INCLUDE_GUARD__QUEX_BUFFER_INPUT_STRATEGY_ICONV__
#define __INCLUDE_GUARD__QUEX_BUFFER_INPUT_STRATEGY_ICONV__
//
//  PURPOSE:
//  
//  Reads data from a stream and converts the incoming characters into a
//  character format required by the user. The user can specify the coding
//  format of the input stream as well as the coding format in which he
//  wants it to be put into his buffer.
//
//  NOTE: Streams for the quex::buffer comply to three simple requirements:
//
//        tell()          returning a value of the current input position
//        seek(pos)       sets the the current input position in the stream
//        read_characters(buffer, N) fills the buffer with N characters from the stream.
//                                   returns the number of actually filled characters.
//  
//  ASSUMPTION: 
//  
//  -- The input character format is arbitrary. It can be anything that is
//     supported by 'iconv'. Flexible character length codings are supported.
//  
//  -- The user's characters format has a fixed character size for each
//     character. Any coding that involves different byte numbers for different
//     characters or 'history' cannot be provided as user format.
//  
//  PRINCIPLE: 
//  
//  A data stream delivers characters in an arbitrary coding format.
//  These characters are stored bytewise inside a 'raw buffer'. Then this data is
//  transformed into the users coding format. The result is directly put into
//  the user's buffer. 
//  
//  (1) Fill as many bytes from the stream into the raw buffer
//  
//       Stream:         ||aa.aa.aa.bb.cc.cc.cc.cc.dd.dd.ee.ee.ee.ee.ff.ff.gg.||
//  
//       Raw Buffer:     ||aa.aa.aa.bb.cc.cc.cc.cc.dd.dd.ee.ee.ee||
//  
//  
//  (2) Convert characters in the raw buffer and store into users buffer
//  
//        User's Buffer: ||AA.AA.BB.BB.CC.CC________________________||
//  
//  (2b) If user's buffer is filled, than **QUIT**
//  
//  (3a) Copy unconverted bytes to the beginning of the raw buffer
//  
//        Raw Buffer:    ||ee.ee.ee______________________________||
//  
//  (3b) Load remaining bytes from the stream into raw buffer
//  
//        Raw Buffer:    ||ee.ee.ee.ee.ff.ff.gg.hh.ii.ii.________||
//         
//        Goto (2)
//  
//  (2) Convert characters from raw buffer and store them into user's buffer
//  
//        User's Buffer: ||AA.AA.BB.BB.CC.CC.DD.DD.EE.EE.FF.FF.GG.GG||
//  
//  (2b) see above.


#include <quex/code_base/asserts>
#include <quex/code_base/buffer/input_policy>
#include <quex/code_base/buffer/fixed_size_character_stream>

#include <iostream>       // for: fixed_size_character_stream_base<istream*>
#include <cstdio>         // for: fixed_size_character_stream_base<FILE*>
#include <cerrno>
#include <stdexcept>
#include <cstring>
extern "C" { 
#include <iconv.h>
#include <quex/code_base/compatibility/inttypes.h>
}
#include <quex/code_base/compatibility/iconv-argument-types.h>

namespace quex {

    template <class InputHandleType, class CharacterCarrierType>
    class fixed_size_character_stream_iconv
        : public fixed_size_character_stream<CharacterCarrierType> {


        static const size_t SizeOfCharacter = sizeof(CharacterCarrierType);
        typedef typename InputPolicy<InputHandleType*>::stream_position stream_position;
        typedef typename InputPolicy<InputHandleType*>::stream_offset   stream_offset;
       
        /* DISABLED */ fixed_size_character_stream_iconv();

     public:
        // NOTE: It makes sense to have multiple fixed_size_character_stream_iconv objects use
        //       the same raw buffer, since this buffer is only used temporarily
        //       while loading.
        fixed_size_character_stream_iconv(InputHandleType* input_handle, 
                                          uint8_t* raw_buffer_p, size_t raw_buffer_size,
                                          const char* FromCoding, const char* ToCoding);
        ~fixed_size_character_stream_iconv();

        virtual size_t    tell_character_index()                 { return InputPolicy<InputHandleType*>::tell(ih); }
        virtual void      seek_character_index(const size_t Pos) { 
            long tmp = (long)Pos;
            InputPolicy<InputHandleType*>::seek(ih, tmp); 
        }
        virtual void      close()                                {  }
        virtual void      destroy_handle()                       { if( ih ) delete ih; ih = 0x0; }

        virtual size_t    read_characters(CharacterCarrierType* buffer, const size_t N);
        virtual void      register_begin_of_file();
        virtual void      seek_begin_of_file();

    private:
        struct buffer_info {
            uint8_t*  begin;
            size_t    size;
            uint8_t*  position;
            size_t    bytes_left_n;

            void   print(const char* name, int until_idx=-1); 
        };

        InputHandleType* ih;
        stream_position  start_position;  // position in stream where analysis started

        // -- conversion data
        iconv_t          iconv_handle;
        buffer_info      raw_buffer;

        void   __fill_raw_buffer();
        bool   __convert(buffer_info* user_buffer);

#       ifdef __QUEX_OPTION_UNIT_TEST_INPUT_STRATEGY_ICONV
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_CONSTRUCTOR(const char* From, const char* To,
                                                                   iconv_t IconvResult);
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_BUFFER_LOAD(size_t LoadedByteN);
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_ICONV_REPORT(size_t Report);
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_AND_USER_BUFFER(buffer_info* user_buffer);
#       endif
    };
}

#include <quex/code_base/buffer/iconv/debug.i>

#define TEMPLATE_IN  template<class InputHandleType, class CharacterCarrierType>
#define CLASS        fixed_size_character_stream_iconv<InputHandleType, CharacterCarrierType>

namespace quex {

    TEMPLATE_IN CLASS::fixed_size_character_stream_iconv(InputHandleType* input_handle, 
                                                 uint8_t*    raw_buffer_p, size_t      raw_buffer_size,
                                                 const char* FromCoding,   const char* ToCoding) 
    { 
        ih = input_handle;

        // Initialize the raw buffer that holds the plain bytes of the input file
        raw_buffer.begin = raw_buffer_p;
        raw_buffer.size  = raw_buffer_size;
        raw_buffer.position      = raw_buffer.begin;
        raw_buffer.bytes_left_n  = 0;  // --> trigger reload

        // Initialize the conversion operations
        iconv_handle = iconv_open(ToCoding, FromCoding);

        QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_CONSTRUCTOR(FromCoding, ToCoding, iconv_handle);
    }

    TEMPLATE_IN CLASS::~fixed_size_character_stream_iconv() 
    { iconv_close(iconv_handle); }

    TEMPLATE_IN size_t 
    CLASS::read_characters(CharacterCarrierType* user_buffer_p, const size_t N) 
    {
        buffer_info  user_buffer;
        user_buffer.begin        = (uint8_t*)user_buffer_p;
        user_buffer.size         = N * SizeOfCharacter;
        user_buffer.position     = user_buffer.begin;
        user_buffer.bytes_left_n = user_buffer.size;

        // TWO CASES:
        // (1) There are still some bytes in the raw buffer from the last load.
        //     in this case, first translate them and then maybe load the raw buffer
        //     again. (raw_buffer.bytes_left_n != 0)
        // (2) The raw buffer is empty. Then it must be loaded in order to get some
        //     basis for conversion. (raw_buffer.bytes_left_n == 0)
        if( raw_buffer.bytes_left_n == 0 ) __fill_raw_buffer(); 

        while( __convert(&user_buffer) == false ) { 
            QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_AND_USER_BUFFER(&user_buffer);
            __fill_raw_buffer(); 
        }
        QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_AND_USER_BUFFER(&user_buffer);

        if( user_buffer.bytes_left_n == 0 ) { 
            // The buffer was filled to its limits. All 'N' characters have been written.
            return N;
        } else { 
            // The buffer was not filled completely, because the end of the file was 
            // reached. The fill level of the user buffer computes as:
            const size_t ConvertedByteN = (user_buffer.size - user_buffer.bytes_left_n) / SizeOfCharacter;
            return ConvertedByteN;
        }
    }

    TEMPLATE_IN void CLASS::__fill_raw_buffer() 
    {
        // Try to fill the raw buffer to its limits with data from the file.
        // The filling starts from its current position, thus the remaining bytes
        // to be translated are exactly the number of bytes in the buffer.
        const size_t FillLevel   = raw_buffer.position - raw_buffer.begin;

        // There are cases (e.g. when a broken multibyte sequence occured at the end of 
        // the buffer) where there are bytes left in the raw buffer. These need to be
        // moved to the beginning of the buffer.
        if( raw_buffer.position != raw_buffer.begin ) {
            // Be careful: Maybe one can use 'memcpy()' which is a bit faster but the following
            // is safe against overlaps.
            std::memmove(raw_buffer.begin, raw_buffer.position, raw_buffer.bytes_left_n);
            // Reset the position, so that new conversion get's the whole character.
            raw_buffer.position = raw_buffer.begin; 
        }

        uint8_t*     FillStartPosition = raw_buffer.begin + raw_buffer.bytes_left_n;
        size_t       FillSize          = raw_buffer.size - raw_buffer.bytes_left_n;
        const size_t LoadedByteN = \
                     InputPolicy<InputHandleType*>::load_bytes(ih, FillStartPosition, FillSize);

        raw_buffer.bytes_left_n = LoadedByteN; // Bytes left for conversion in next run.

        QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_BUFFER_LOAD(LoadedByteN);
    }

    TEMPLATE_IN bool CLASS::__convert(buffer_info* user_buffer) 
        // RETURNS:  true  --> User buffer is filled as much as possible with converted characters.
        //           false --> More raw bytes are needed to fill the user buffer.
    {
        /*  IF YOU GET AN ERROR HERE, THEN PLEASE HAVE A LOOK AT THE FILE:
         *
         *      quex/code_base/compatibility/iconv-argument-types.h
         * 
         *  The issue is, that 'iconv' is defined on different systems with different
         *  types of the second argument. There are two variants 'const char**'
         *  and 'char **'. If your system is not treated correctly, please
         *  contact the author <fschaef@users.sourceforge.net>. */
        size_t report = iconv(iconv_handle, 
                              (__Adapter_FuncIconv_SecondArgument)(&raw_buffer.position), &raw_buffer.bytes_left_n,
                              (char**)&(user_buffer->position),                           &(user_buffer->bytes_left_n));

        QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_ICONV_REPORT(report);

        if( report != (size_t)-1 ) { 
            // (*) The input sequence (raw buffer content) has been converted completely.
            //     But, is the user buffer filled to its limits?
            if( user_buffer->bytes_left_n == 0 ) return true; 
            // If the buffer was not filled completely, then was it because we reached EOF?
            // NOTE: Here, 'raw_buffer.position' points to the position after the last byte
            //       that has been converted. If this is the end of the buffer, then it means
            //       that the buffer was filled. If not, it means that the buffer has not been
            //       filled to its border which happens only if End of File occured.
            if( raw_buffer.position != raw_buffer.begin + raw_buffer.size ) return true;
            // Else: The raw buffer needs more bytes. Since, everything went well, the new bytes
            //       can be stored at the position '0' of the raw_buffer.
            raw_buffer.position = raw_buffer.begin;
            return false; // please, refill ...
        }

        switch( errno ) {
        default:
            throw std::range_error("Unexpected setting of 'errno' after call to GNU's iconv().");

        case EILSEQ:
            throw std::range_error("Invalid byte sequence encountered for given character coding.");

        case EINVAL:
            // (*) Incomplete byte sequence for character conversion
            //     ('raw_buffer.position' points to the beginning of the incomplete sequence.)
            return false; // please, refill the buffer (consider copying the bytes from  
            //            // raw_buffer.position to the end of the buffer in front of the new buffer)

        case E2BIG:
            // (*) The input buffer was not able to hold the number of converted characters.
            //     (in other words we're filled up the limit and that's what we actually wanted.)
            return true;
        }
    }


    /*
    TEMPLATE_IN void CLASS::map_to_stream_position(const int CharacterIndex)
    { 
        stream_position   position_backup = InputPolicy<InputHandleType*>::tell(ih);

        /-*- There is a potential problem with varying character sizes of some encodings.
         * Since the function is (most probably) called seldomly--namely only in 'load_backward()'
         * which is only called when stepping backwards very far for a **long** precondition.
         * Thus, this function implements the safe variant by stepping through the stream
         * until the position is reached. -*-/

        /-*- Let's assume we are able to estimate the position with a precision not worse
         * then 128 characters (This means that for example, one character may be coded with
         * one byte, the other one with 256 bytes). Thus we target a position of 256 
         * characters below the CharacterIndex, and then step character by character until
         * the CharacterIndex is reached. -*-/ 
        const int             CharacterIndex_Minus1 = CharacterIndex - 1;
        CharacterCarrierType  tmp[32];
        int                   characters_to_read = 0;
        const int             StepN = (int)(CharacterIndex_Minus1 / 16);

        for(int i=0; i <= StepN ; ++i) {
            CLASS::read_characters((CharacterCarrierType*)tmp, 16);
        }
        if( CharacterIndex_Minus1 % 16 ) {
            CLASS::read_characters((CharacterCarrierType*)tmp, CharacterIndex_Minus1 % 16);
        }

        stream_position   result = InputPolicy<InputHandleType*>::tell(ih);
        InputPolicy<InputHandleType*>::seek(ih, position_backup);
        return result;
    }
    */

    TEMPLATE_IN void  CLASS::register_begin_of_file() 
    { 
        start_position = InputPolicy<InputHandleType*>::tell(ih); 
    }

    TEMPLATE_IN void  CLASS::seek_begin_of_file()
    {
        InputPolicy<InputHandleType*>::seek(ih, start_position);
    }


#undef CLASS
#undef TEMPLATE_IN

}

#endif // __INCLUDE_GUARD__QUEX_BUFFER_INPUT_STRATEGY_ICONV__
