-------------------------------------------------------------------
expression    = "\A{[a-k]+ [g-p]+}"
command line:1:error: Exactly 1 pattern required between '{' and '}'
-------------------------------------------------------------------
expression    = "\C{[a-k]+ [g-p]+}"
command line:1:error: Exactly 1 pattern required between '{' and '}'
-------------------------------------------------------------------
expression    = "\Diff{[a-k]+ [g-p]+}"
state machine
init-state = 0L
00000 ()
     == ['a', 'f'] ==> 00001
     == ['g', 'k'] ==> 00000
    
00001 (A)
     == ['a', 'k'] ==> 00001
    

-------------------------------------------------------------------
expression    = "\Intersection{[a-k]+ [g-p]+}"
state machine
init-state = 0L
00000 ()
     == ['g', 'k'] ==> 00001
    
00001 (A)
     == ['g', 'k'] ==> 00001
    

-------------------------------------------------------------------
expression    = "\NotBegin{[a-k]+ [g-p]+}"
state machine
init-state = 0L
00000 ()
     == ['a', 'f'] ==> 00001
    
00001 (A)
     == ['a', 'k'] ==> 00001
    

-------------------------------------------------------------------
expression    = "\NotEnd{[a-k]+ [g-p]+}"
state machine
init-state = 0L
00000 ()
     == ['a', 'f'] ==> 00001
     == ['g', 'k'] ==> 00000
    
00001 (A)
     == ['a', 'f'] ==> 00001
     == ['g', 'k'] ==> 00000
    

-------------------------------------------------------------------
expression    = "\Not{[a-k]+ [g-p]+}"
command line:1:error: Exactly 1 pattern required between '{' and '}'
-------------------------------------------------------------------
expression    = "\R{[a-k]+ [g-p]+}"
command line:1:error: Exactly 1 pattern required between '{' and '}'
-------------------------------------------------------------------
expression    = "\SymDiff{[a-k]+ [g-p]+}"
state machine
init-state = 0L
00000 ()
     == ['a', 'f'] ==> 00001
     == ['g', 'k'] ==> 00000
     == ['l', 'p'] ==> 00002
    
00001 (A)
     == ['a', 'k'] ==> 00001
    
00002 (A)
     == ['g', 'p'] ==> 00002
    

-------------------------------------------------------------------
expression    = "\Union{[a-k]+ [g-p]+}"
state machine
init-state = 0L
00000 ()
     == ['a', 'f'] ==> 00001
     == ['g', 'k'] ==> 00002
     == ['l', 'p'] ==> 00003
    
00001 (A)
     == ['a', 'k'] ==> 00001
    
00002 (A)
     == ['a', 'f'] ==> 00001
     == ['g', 'k'] ==> 00002
     == ['l', 'p'] ==> 00003
    
00003 (A)
     == ['g', 'p'] ==> 00003
    

