token {
  IDENTIFIER
  CARET
  ARROW
  LBRACE
  RBRACE
  LPAREN
  RPAREN
  U1_STRING_LITERAL
  U2_STRING_LITERAL
  U4_STRING_LITERAL
  INT_LITERAL
  UINT_LITERAL
  LONG_LITERAL
  ULONG_LITERAL
  FLT_LITERAL
  DBL_LITERAL
  LDBL_LITERAL
}
header {
  #include "lex_helper.h"
}
define {
  P_WS        \P{WSpace}
  P_IDENT     \P{XIDS}(\P{XIDC}*)
  
  P_DIGIT     \G{Nd}
  P_DEC_INT   {P_DIGIT}+
  
  P_HEX_DIGIT \P{Hex}
  P_HEX_INT   "0"[xX]{P_HEX_DIGIT}+
  P_INT_LIT   {P_DEC_INT}|{P_HEX_INT}
  
  P_UINT_SUF  [uU]
  P_LONG_SUF  [lL]
  P_ULNG_SUF  ({P_UINT_SUF}{P_LONG_SUF})|({P_LONG_SUF}{P_UINT_SUF})
  P_FLT_SUF   [fF]
  
  P_ULIT4     "\\"[uU]{P_HEX_DIGIT}{4}
  P_ULIT8     "\\"[uU]{P_HEX_DIGIT}{8}
  
  P_EXP       [eE][+\-]?{P_DIGIT}+
  P_FLT_1     {P_DIGIT}*"."{P_DIGIT}+
  P_FLT_2     {P_DIGIT}+"."
  P_FLOAT     (({P_FLT_1}|{P_FLT_2}){P_EXP}?)|({P_DIGIT}+{P_EXP})
}
start = MODULE
mode MODULE {
  <<EOF>> => TKN_TERMINATION;

  {P_WS}+   {}
  {P_IDENT} => TKN_IDENTIFIER(Lexeme);

  "^"  => TKN_CARET;
  "->" => TKN_ARROW;
  "{"  => TKN_LBRACE;
  "}"  => TKN_RBRACE;
  "("  => TKN_LPAREN;
  ")"  => TKN_RPAREN;
  
  "\""    { self << U1_STRING; }
  "u1\""  { self << U1_STRING; }
  "u2\""  { self << U2_STRING; }
  "u4\""  { self << U4_STRING; }
  
  {P_INT_LIT}             => TKN_INT_LITERAL(Lexeme);
  {P_INT_LIT}{P_UINT_SUF} => TKN_UINT_LITERAL(Lexeme);
  {P_INT_LIT}{P_LONG_SUF} => TKN_LONG_LITERAL(Lexeme);
  {P_INT_LIT}{P_ULNG_SUF} => TKN_ULONG_LITERAL(Lexeme);
  
  {P_FLOAT}{P_FLT_SUF}  => TKN_FLT_LITERAL(Lexeme);
  {P_FLOAT}             => TKN_DBL_LITERAL(Lexeme);
  {P_FLOAT}{P_LONG_SUF} => TKN_LDBL_LITERAL(Lexeme);
}

mode STRING : <inheritable: only> {
  on_entry { self.accumulator.clear(); }

  <<EOF>> => TKN_TERMINATION;
  
  {P_ULIT4} { self.accumulator.add(indigo::unicode_hex_string_to_code_point(Lexeme + 2)); }
  {P_ULIT8} { self.accumulator.add(indigo::unicode_hex_string_to_code_point(Lexeme + 2)); }

  "\\\"" { self.accumulator.add('\"'); }

  "\\a"  { self.accumulator.add('\a'); }
  "\\b"  { self.accumulator.add('\b'); }
  "\\f"  { self.accumulator.add('\f'); }
  "\\n"  { self.accumulator.add('\n'); }
  "\\r"  { self.accumulator.add('\r'); }
  "\\t"  { self.accumulator.add('\t'); }
  "\\v"  { self.accumulator.add('\v'); }
  
  "\\\n" { self.accumulator.add('\\'); 
           // warning new line in string literal
           self << MODULE;
         }
  "\n"   { // warning new line in string literal
           self << MODULE;
         }
  
  "\\".  { self.accumulator.add(Lexeme[1]); }
  
  "\""   { self << MODULE; }
  
  . { self.accumulator.add(Lexeme); }
}

mode U1_STRING : STRING {
  on_exit {
    self.accumulator.flush(TKN_U1_STRING_LITERAL);
  }
  <<EOF>> => TKN_TERMINATION;
}

mode U2_STRING : STRING {
  on_exit {
    self.accumulator.flush(TKN_U2_STRING_LITERAL);
  }
  <<EOF>> => TKN_TERMINATION;
}

mode U4_STRING : STRING {
  on_exit {
    self.accumulator.flush(TKN_U4_STRING_LITERAL);
  }
  <<EOF>> => TKN_TERMINATION;
}
