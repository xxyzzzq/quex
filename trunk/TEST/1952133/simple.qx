// -*- C++ -*- vim: set syntax=cpp:
start = PROGRAM;

header { 
#include<stdio.h>
}
define {
    // Pattern definitions for example application
    P_WHITESPACE          [ \t\n]+
    P_IDENTIFIER          [_a-zA-Z][_a-zA-Z0-9]*
    P_NUMBER              [0-9]+
    //
    // String: 
    //    Quote " followe by either \" or something different from " and then a final "
    P_STRING              "\""(\\"\""|[^"])*"\""
}

token {
    AMPERSANT;
    ASSIGN_DIV;
    ASSIGN_MINUS;
    ASSIGN_MULT;
    ASSIGN_PLUS;
    BRACKET_C;
    BRACKET_C;
    BRACKET_O;
    BRACKET_O;
    BREAK;
    CATCH;
    CLASS;
    COLON;
    CONST;
    CONTINUE;
    CORNER_BRACKET_C;
    CORNER_BRACKET_O;
    CURLY_BRACKET_C;
    CURLY_BRACKET_O;
    DIV;
    DO;
    DOUBLE_COLON;
    ELSE;
    EQ;
    FOR;
    FRIEND;
    GREATER;
    GR_EQ;
    IDENTIFIER;
    IF;
    LESS;
    LE_EQ;
    MINUS;
    MULT;
    MUTUAL;
    NOT;
    NOT_EQ;
    NUMBER;
    NAMESPACE;
    OP_ASSIGNMENT;
    PLUS;
    PRIVATE;
    PROTECTED;
    PUBLIC;
    QUOTE;
    SEMICOLON;
    STRING;
    STRUCT;
    SWITCH;
    TEMPLATE;
    THROW;
    TRY;
    USING;
    WHILE;
}

mode PROGRAM :
{
    <<EOF>>       { 
        self_send(QUEX_TKN_TERMINATION); 
    }

    "("           => QUEX_TKN_BRACKET_O;
    ")"           => QUEX_TKN_BRACKET_C;
    "<"           => QUEX_TKN_LESS;
    ">"           => QUEX_TKN_GREATER;
    "["           => QUEX_TKN_CORNER_BRACKET_O;
    "]"           => QUEX_TKN_CORNER_BRACKET_C;
    "{"           => QUEX_TKN_CURLY_BRACKET_O;
    "}"           => QUEX_TKN_CURLY_BRACKET_C;
    "="           => QUEX_TKN_OP_ASSIGNMENT;
    "+"           => QUEX_TKN_PLUS;
    "-"           => QUEX_TKN_MINUS;
    "*"           => QUEX_TKN_MULT;
    "/"           => QUEX_TKN_DIV;
    "+="          => QUEX_TKN_ASSIGN_PLUS;
    "-="          => QUEX_TKN_ASSIGN_MINUS;
    "*="          => QUEX_TKN_ASSIGN_MULT;
    "/="          => QUEX_TKN_ASSIGN_DIV;
    "=="          => QUEX_TKN_EQ;
    "!="          => QUEX_TKN_NOT_EQ;
    ">="          => QUEX_TKN_GR_EQ;
    "<="          => QUEX_TKN_LE_EQ;
    "!"           => QUEX_TKN_NOT;
    "&"           => QUEX_TKN_AMPERSANT;
    "::"          => QUEX_TKN_DOUBLE_COLON;
    ":"           => QUEX_TKN_COLON;
    namespace     => QUEX_TKN_NAMESPACE;
    using         => QUEX_TKN_USING;
    class         => QUEX_TKN_CLASS;
    struct        => QUEX_TKN_STRUCT;
    template      => QUEX_TKN_TEMPLATE;
    "public:"     => QUEX_TKN_PUBLIC;
    "private:"    => QUEX_TKN_PRIVATE;
    "protected:"  => QUEX_TKN_PROTECTED;
    friend        => QUEX_TKN_FRIEND;
    const         => QUEX_TKN_CONST;
    mutual        => QUEX_TKN_MUTUAL;
    if            => QUEX_TKN_IF;
    else          => QUEX_TKN_ELSE;
    switch        => QUEX_TKN_SWITCH;
    for           => QUEX_TKN_FOR;
    do            => QUEX_TKN_DO;
    while         => QUEX_TKN_WHILE;
    break         => QUEX_TKN_BREAK;
    continue      => QUEX_TKN_CONTINUE;
    throw         => QUEX_TKN_THROW;
    try           => QUEX_TKN_TRY;
    catch         => QUEX_TKN_CATCH;
    ";"           => QUEX_TKN_SEMICOLON;
    "."           => QUEX_TKN_DOT;
    "/*"([^*]|("*"[^/]))*"*/"  => QUEX_TKN_COMMENT;
    "//"[^\n]*"\n"  => QUEX_TKN_COMMENT;
    {P_IDENTIFIER}  => QUEX_TKN_IDENTIFIER;
    {P_NUMBER}      => QUEX_TKN_NUMBER;
    {P_WHITESPACE}  { }
    {P_STRING}      => QUEX_TKN_STRING;
}

