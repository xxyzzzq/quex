warning: no initial mode defined via 'start'
warning: using mode 'ONE_AND_ONLY' as initial mode
// -*- C++ -*-   vim: set syntax=cpp:
#ifndef __INCLUDE_GUARD__QUEX__SIMPLE

// STL (Std C++ Lib)
#include<vector> 
#include<map>
#include<istream>  // gets: istream and wistream

#ifdef __QUEX_OPTION_UNIT_TEST
#   include <quex/code_base/StrangeStream_unit_tests>
#endif


// IConv Coding Name for the internally used character coding. 
// -- never use a dynamic length coding for the internal handling (e.g. never use UTF8)
// -- never use a coding that requires more bytes than QUEX_TYPE_CHARACTER contains,
//    e.g. do not use "UCS-4" (4 bytes) when the character type is uin16_t (2 bytes).
// Coding must be defined before the inclusion of 'definitions' since this file will
// otherwise define a default value

#ifndef QUEX_OPTION_TOKEN_POLICY_QUEUE_DISABLED
#endif
#ifndef QUEX_OPTION_TOKEN_POLICY_USERS_TOKEN_DISABLED
#endif
#ifndef QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE_DISABLED
#endif
#if defined (QUEX_OPTION_TOKEN_POLICY_QUEUE)
#   ifndef     QUEX_SETTING_TOKEN_QUEUE_SIZE
#       define QUEX_SETTING_TOKEN_QUEUE_SIZE  ((size_t)64)
#   endif
#endif
#if defined (QUEX_OPTION_TOKEN_POLICY_QUEUE) || defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
#   ifndef     QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER
#       define QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER ((size_t)16)
#   endif
#endif

// CHARACTER TYPE: Type that represents the number of bytes used in the engine to store
//                 a character. This is independent of the coding (ASCII, WinArabic, ...)
//
// Both character types are clearly related, because they are supposed to relate to the 
// same type of objects in memory. The following example shows, that 'uint8_t' and 'char'
// belong together, the lexeme type cannot be 'uint8_t' because the std-string functions
// accept 'char*' and not 'uint8_t' (which is most propperly 'unsigned char').
//
// NOTE: If in parallel another engine is built with other bytes per character settings,
//       then the engines will also include their own header with their own definition
//       of QUEX_TYPE_CHARACTER. Thus there is no danger at all. 
//       Templatifying the lexer would be possible, but the author has in mind to bring out
//       a 'pure C' version of the quex generated engine. Thus templating would make this 
//       goal harder achievable.
#include<quex/code_base/compatibility/inttypes.h>

// TOKEN DEFINITION: (Must come before 'quex/code_base/definitions' so that it wont
//                    override the QUEX_TYPE_TOKEN_ID.)
#include "Simple-token_ids"
#include "quex/code_base/Token"

#include<quex/code_base/definitions>

// OPTIONS: ____________________________________________________________________
//
// Activate/Deactivate Options via comment/uncomment. Options without a 
// double underline '__' at the beginning can be turned off in the created 
// engine. Options that do start with '__' configure the machine for the
// specified behavior. Such options are better not touched.
//
// -- Line Number / Column Number Counting:
//    Turning counting off may result in engine speed-up.
#ifndef    QUEX_OPTION_LINE_NUMBER_COUNTING            
#endif
#ifdef    QUEX_OPTION_LINE_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_LINE_NUMBER_COUNTING
#endif
#ifndef    QUEX_OPTION_COLUMN_NUMBER_COUNTING          
#endif
#ifdef    QUEX_OPTION_COLUMN_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_COLUMN_NUMBER_COUNTING
#endif

// -- Mode Transitions:
//    If the engine was created without the flag '--no-mode-transition-check'
//    then code for mode transition control is inserted. It can be deactivated
//    by commenting the following option out.
#ifndef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK_DISABLED
#   undef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif

// -- Verbosity

// -- Debugging: 
//    If the engine was created with the '--debug' flag then it contains 
//    debugging code. The effect of this code fragments can be turned off
//    by commenting the following options out.
#ifndef QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#ifdef QUEX_OPTION_DEBUG_TOKEN_SENDING_DISABLED
#   undef QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#endif
#ifndef QUEX_OPTION_DEBUG_MODE_TRANSITIONS
#endif
#ifdef QUEX_OPTION_DEBUG_MODE_TRANSITIONS_DISABLED
#   undef QUEX_OPTION_DEBUG_MODE_TRANSITIONS
#endif
#ifndef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif
#ifdef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES_DISABLED
#   undef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif

// -- Include Stack Support:
//    Easy handling of include files/streams via 'push' and 'pop'
//    Turn this off, if you do not use 'inclusion' in your files and
//    you want to save some bytes.
#ifndef  QUEX_OPTION_INCLUDE_STACK
#endif
#ifdef    QUEX_OPTION_INCLUDE_STACK_DISABLED
#   undef QUEX_OPTION_INCLUDE_STACK
#endif

#ifndef    QUEX_SETTING_BUFFER_LIMIT_CODE
#   define QUEX_SETTING_BUFFER_LIMIT_CODE     (0x0)
#endif

/* NOTE: A cast to 'size_t' would it make impossible to use the macro in 
 *       pre-processor comparisons.                                       */
#ifndef     QUEX_SETTING_BUFFER_SIZE
#    define QUEX_SETTING_BUFFER_SIZE  (/*(size_t)*/65536)
#endif

#ifndef  QUEX_OPTION_STRING_ACCUMULATOR
#endif 

//   If one mode requires indentation support, then the lexical analyser
//   class must be setup for indentation counting. The following flag is
//   defined or undefined by the lexical analyser generator quex.
  
//   Quex can determine whether certain handlers are not used at all.
//   If so, computation time can be spared and quex comments the following
//   options out.
#ifdef    __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
#endif
#ifdef    __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
#endif
#ifdef    QUEX_OPTION_ENABLE_ICONV_DISABLED
#   undef QUEX_OPTION_ENABLE_ICONV
#endif
#ifdef    QUEX_OPTION_ENABLE_ICU_DISABLED
#   undef QUEX_OPTION_ENABLE_ICU
#endif
#if defined(QUEX_OPTION_ENABLE_ICONV) || defined(QUEX_OPTION_ENABLE_ICU)
#    ifndef     QUEX_SETTING_TRANSLATION_BUFFER_SIZE
#        define QUEX_SETTING_TRANSLATION_BUFFER_SIZE ((size_t)65536)
#    endif
#else
#    ifndef     QUEX_SETTING_TRANSLATION_BUFFER_SIZE
#        define QUEX_SETTING_TRANSLATION_BUFFER_SIZE ((size_t)0)
#    endif
#endif

//   Begin of line pre-condition introduces an extra flag in the buffer
//   structure. Only out-comment this in case of tough memory restrictions,
//   if no begin of line pre-condition is required.
#ifdef     __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION_DISABLED
#   undef  __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
#endif

namespace quex {
    template <class QuexCharacterType> class QuexSimple;
    class  Simple;
    struct SimpleMemento_tag;

    QUEX_INLINE struct SimpleMemento_tag*  SimpleMemento_pack(Simple*);
    QUEX_INLINE void  SimpleMemento_pack(struct SimpleMemento_tag*, Simple*);

const int LEX_ID_ONE_AND_ONLY = 1;

}    

#ifdef QUEX_OPTION_INCLUDE_STACK
#   define CLASS_MEMENTO_TAG  struct SimpleMemento_tag
#   define CLASS_MEMENTO      SimpleMemento
#endif

#include<quex/code_base/buffer/Buffer>
#include<quex/code_base/buffer/BufferFiller>

#include <quex/code_base/MemoryManager>
#include <quex/code_base/template/QuexMode>
#include <quex/code_base/template/Analyser>
#include <quex/code_base/template/Counter>
namespace quex { 
#ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
    typedef CounterWithIndentation CounterType;
#elif    defined(QUEX_OPTION_LINE_NUMBER_COUNTING) \
       | defined(QUEX_OPTION_COLUMN_NUMBER_COUNTING)
    typedef Counter                CounterType;
#else
    typedef CounterPseudo          CounterType;
#endif
}

#ifdef QUEX_OPTION_STRING_ACCUMULATOR
#   include <quex/code_base/template/Accumulator>
#endif
#if defined(QUEX_OPTION_TOKEN_POLICY_QUEUE) || defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
#   include <quex/code_base/TokenQueue>
#endif
#ifdef QUEX_OPTION_POST_CATEGORIZER
#   include <quex/code_base/template/PostCategorizer>
#endif

// START:

// :END

// User defined header content. _________________________________________________
//
// This is pasted after the definitions, such that the user can make use of them.
// START:


// :END

#include <quex/code_base/temporary_macros_on>
namespace quex {
    
    extern     void Simple_ONE_AND_ONLY_analyser_function(QuexAnalyser*);
#ifdef __QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
    extern     bool Simple_ONE_AND_ONLY_has_base(const QuexMode*);
    extern     bool Simple_ONE_AND_ONLY_has_entry_from(const QuexMode*);
    extern     bool Simple_ONE_AND_ONLY_has_exit_to(const QuexMode*);
#endif



    class CLASS :
        protected QuexAnalyser {

        /* DISABLED */ CLASS(const CLASS&);

    public:
        CLASS();
        CLASS(const std::string&        Filename,       const char* IConvInputCodingName = 0x0, 
        CLASS(std::istream*             p_input_stream, const char* IConvInputCodingName = 0x0, 
        CLASS(std::wistream*            p_input_stream, const char* IConvInputCodingName = 0x0, 
#       if defined(__QUEX_OPTION_UNIT_TEST)
        template <class UnderlyingStreamT>
        CLASS(quex::StrangeStream<UnderlyingStreamT>*  p_input_stream, 
              const char*                              IConvInputCodingName = 0x0, 
#       endif
        CLASS(std::FILE*                input_fh,       const char* IConvInputCodingName = 0x0, 

        virtual ~CLASS();

        /* Direct Access to Memory */
        bool                  buffer_copy(QUEX_TYPE_CHARACTER* Content, const size_t Size);
        bool                  buffer_append(QUEX_TYPE_CHARACTER* Content, const size_t Size);
        void                  buffer_prepare(const size_t CharacterN);
        QUEX_TYPE_CHARACTER*  buffer_begin();
        QUEX_TYPE_CHARACTER*  buffer_end();
        size_t                buffer_size();
        QUEX_TYPE_CHARACTER*  buffer_text_end();
        size_t                buffer_distance_to_text_end();
        
        // -- token stream: read next token
        void  get_token() 
        { QUEX_ERROR_EXIT("get_token() deprecated since quex v. >= 0.37.1, use .receive(...)\n"); }
        void  get_token(QUEX_TYPE_TOKEN*   result_p)
        { QUEX_ERROR_EXIT("get_token(Token*) deprecated since quex v. >= 0.37.1, use .receive(...)\n"); }
        void  get_token(QUEX_TYPE_TOKEN**   result_p)
        { QUEX_ERROR_EXIT("get_token(Token**) deprecated since quex v. >= 0.37.1, use .receive(...)\n"); }

#       if   defined(QUEX_OPTION_TOKEN_POLICY_QUEUE)
        void                 receive(QUEX_TYPE_TOKEN*   result_p);
        void                 receive(QUEX_TYPE_TOKEN**  result_pp);
#       elif defined(QUEX_OPTION_TOKEN_POLICY_USERS_TOKEN)
        void                 receive();
        void                 receive(QUEX_TYPE_TOKEN*   result_p);
#       elif defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
        QUEX_TYPE_TOKEN*     receive(QUEX_TYPE_TOKEN*  begin, QUEX_TYPE_TOKEN* end);
#       endif
        //
        // (*) Mode handling
        //
        //     -- modes: read access
        QuexMode&     mode();
        int           mode_id() const;
        const char*   mode_name() const;
        //
        //     -- modes: changing lexical analysis mode
        void        set_mode_brutally(const int       LexerMode);
        void        set_mode_brutally(const QuexMode& Mode);
        //
        void        operator<<(const int MODE_ID);               // not to be used in concatination
        void        operator<<(/* NOT const*/ QuexMode& Mode);  // not to be used in concatination
        //
        void        pop_mode();
        void        pop_drop_mode();
        void        push_mode(QuexMode& new_mode);
        //
        void        enter_mode(/* NOT const*/ QuexMode& TargetMode);
        //
        //     -- map: mode id to mode and vice versa
        QuexMode&   map_mode_id_to_mode(const int        ModeID);       
        int         map_mode_to_mode_id(const QuexMode& Mode) const;

        // (*) Token sending
        void        send(const Token& That);
        void        send(const QUEX_TYPE_TOKEN_ID TokenID);
        void        send_n(const int N, const QUEX_TYPE_TOKEN_ID TokenID);
        template <typename ContentT> 
        void        send(const QUEX_TYPE_TOKEN_ID TokenID, ContentT Content);


#       ifdef  QUEX_OPTION_LINE_NUMBER_COUNTING
        int  line_number() const          { return line_number_at_begin(); }
        int  line_number_at_begin() const { return counter._line_number_at_begin; }
        int  line_number_at_end() const   { return counter._line_number_at_end; }
#       endif
#       ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
        int  column_number() const          { return column_number_at_begin(); }
        int  column_number_at_begin() const { return counter._column_number_at_begin; }
        int  column_number_at_end() const   { return counter._column_number_at_end; }
#       endif
#       ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
        int  indentation()                    { return counter._indentation; }
        void disable_next_indentation_event() { counter.disable_next_indentation_event(); }
#       endif

        //
        // (*) Version information

    private:
        // (*) Helper
        void    move_forward(const size_t);
        void    move_backward(const size_t);
        size_t  tell();
        void    seek(const size_t);

    public:
        // handle with extreme care:
        void   _reset();

        // (*) Mode database: allows to match from 'lex mode id' to a real mode object.
        //     LexModeID = 0 is not used, mode indices from 1 to ModeN 
        //     (compatibility to lex/flex core: INITIAL == 0, but initial is bend immediately
        //      to quex's start mode.)
        QuexMode*  mode_db[1+1];  

    public:
        static QuexMode  ONE_AND_ONLY;


    private:
        QuexMode*   __current_mode_p;

        // -- with the quex core engine(s) each mode has a dedicated analyser function.
        //    (with the flex core engine, modes were modelled as start conditions
        //     of a single engine)
        //    The function pointer to the currently active mode's function is located in 
        //    the base class QUEX_CORE_ANALYSER_STRUCT
        //
    private:
        // (*) mode stack allows for pushing and popping of lexical analysis modes
        std::vector<QuexMode*>   _mode_stack;

        // NOTE: A pointer to an object of the token queue/object is used in order to make
        //       memory management more flexible. The token queue/token object is heavily
        //       used and it should be possible to put it somewhere in memory with other
        //       heavily used data so that the cache can take advantage of data locality.
    public:
#       if defined(QUEX_OPTION_TOKEN_POLICY_QUEUE) || defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
        // (*) The Token Queue ___________________________________________________________
        //     The token queue is **private**, because the user does not need direct
        //      access. get_token(Token**) is enough to get access to the current token. 
        QuexTokenQueue    _token_queue;  // must be public or protected (accessed with 'self')
#       else
        // (*) The Token _________________________________________________________________
        //     get_token(Token**) does not make a whole lot of sense, since the token 
        //     pointer always points to the same object. The object can be accessed
        //     by this **public** pointer.
        QUEX_TYPE_TOKEN*  token;         // must be public or protected (accessed with 'self')
#       endif

    public:
        // (*) Who and what am I ? _______________________________________________________
        Simple&   self;

    private:
        // (*) Sometimes we just want to tell the filename, ... for destructor to close ..
        FILE*    __file_handle_allocated_by_constructor;

#       ifdef QUEX_OPTION_STRING_ACCUMULATOR
    public:
        // (*) Accumulator (accumulate lexemes from multiple patterns ____________________
        Accumulator        accumulator;
#       endif
    private:
        CounterType        counter;
    public:
#       ifdef QUEX_OPTION_POST_CATEGORIZER
        PostCategorizer    post_categorizer;
#       endif

        // (*) All Modes are Friends _____________________________________________________
        friend     void Simple_ONE_AND_ONLY_analyser_function(QuexAnalyser*);
#ifdef __QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
        friend     bool Simple_ONE_AND_ONLY_has_base(const QuexMode*);
        friend     bool Simple_ONE_AND_ONLY_has_entry_from(const QuexMode*);
        friend     bool Simple_ONE_AND_ONLY_has_exit_to(const QuexMode*);
#endif

  
        // (*) User defined Friends ______________________________________________________

        // (*) User's Lexer Class Body Extenstion ________________________________________


#   ifdef QUEX_OPTION_INCLUDE_STACK
    private:
        struct SimpleMemento_tag*  _parent_memento;
        //      -- include events (a file is included)
        friend struct SimpleMemento_tag*  SimpleMemento_pack(Simple*);
        friend void  SimpleMemento_unpack(struct SimpleMemento_tag*, Simple*);

    protected:
        void virtual on_include(const char* Filename) {}
        void virtual on_include_exit() {}

    public:
        template <class InputHandle> void  include_push(InputHandle*             new_input_handle_p, 
                                                        const QuexMode&          mode, 
                                                        const char*              IANA_CodingName = 0x0);
        template <class InputHandle> void  include_push(InputHandle*             new_input_handle_p, 
                                                        const int                MODE_ID         = -1, 
                                                        const char*              IANA_CodingName = 0x0);
        bool                               include_pop();

#   endif

    private:
        void __debug_print_transition(QuexMode* Source, QuexMode* Target);

        // (*) Common core of all constructors ___________________________________________
        template <class InputHandleT> 
        void                        __constructor_core(InputHandleT*, 
                                                       QuexBufferFillerTypeEnum, 
                                                       const char* IConvInputCodingName);
        template <class InputHandleT> 
        void                        __init(InputHandleT*  input_handle, 
                                           QuexBufferFillerTypeEnum  BFT, 
                                           const char* IANA_InputCodingName);


        QuexBufferFillerTypeEnum    __constructor_filler_assert(QuexBufferFillerTypeEnum BFT, 
                                                                const char* IANA_InputCodingName);
    };

    template <class InputHandleT> inline void
    CLASS::__constructor_core(InputHandleT*             input_handle, 
                              QuexBufferFillerTypeEnum  BFT, const char* IANA_InputCodingName)
    {
#       if defined(QUEX_OPTION_ASSERTS) && ! defined(QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED)
        std::cout << "###############################################################################\n";
        std::cout << "## NOTE: In order to disable this message, you can do two things. Either, \n";
        std::cout << "## define 'QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED' which only disables\n";
        std::cout << "## this particular message, but leaves the asserts intact. Or, define the macro\n";
        std::cout << "## 'QUEX_OPTION_ASSERTS_DISABLED' which also disarms all internal asserts.\n";
        std::cout << "##-----------------------------------------------------------------------------\n";
        std::cout << "## You are running a lexical analyser generated by quex in 'paranoid' mode.\n";
        std::cout << "## This is very good, in a way that any tiny misbehavior will cause a comment\n";
        std::cout << "## and a program exit. However, the paranoia is a heavy load on speed perfor-\n";
        std::cout << "## mance!\n";
        std::cout << "##-----------------------------------------------------------------------------\n";
        std::cout << "## The lexical analyser is very low-level and the smallest error\n";
        std::cout << "## can have desastrous consequences. Leaving the asserts helps you to find\n";
        std::cout << "## subtle errors in your code--and if you find one in the lexical analyser, \n";
        std::cout << "## then please, report it at\n"; 
        std::cout << "##\n";
        std::cout << "##          http://sourceforge.net/tracker/?group_id=168259&atid=846112\n";
        std::cout << "##\n";
        std::cout << "###############################################################################\n";
#       endif

        mode_db[0] = 0x0;
        // LexModeID = 0 is not used, mode indices from 1 to ModeN
        __quex_assert(LEX_ID_ONE_AND_ONLY <= 1);

        ONE_AND_ONLY.id   = LEX_ID_ONE_AND_ONLY;
        ONE_AND_ONLY.name = "ONE_AND_ONLY";
        ONE_AND_ONLY.analyser_function = Simple_ONE_AND_ONLY_analyser_function;
#    ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT    
        ONE_AND_ONLY.on_indentation = QuexMode_on_indentation_null_function;
#    endif
        ONE_AND_ONLY.on_entry       = QuexMode_on_entry_exit_null_function;
        ONE_AND_ONLY.on_exit        = QuexMode_on_entry_exit_null_function;
#    ifdef __QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
        ONE_AND_ONLY.has_base       = Simple_ONE_AND_ONLY_has_base;
        ONE_AND_ONLY.has_entry_from = Simple_ONE_AND_ONLY_has_entry_from;
        ONE_AND_ONLY.has_exit_to    = Simple_ONE_AND_ONLY_has_exit_to;
#    endif
        mode_db[LEX_ID_ONE_AND_ONLY] = &ONE_AND_ONLY;


        __init(input_handle, BFT, IANA_InputCodingName);

#       ifdef  QUEX_OPTION_INCLUDE_STACK
        _parent_memento = 0x0;
#       endif


    }

    template <class InputHandleT> inline void
    CLASS::__init(InputHandleT*             input_handle, 
                  QuexBufferFillerTypeEnum  BFT, const char* IANA_InputCodingName)
    {
        set_mode_brutally(LEX_ID_ONE_AND_ONLY);

#       if   defined(QUEX_OPTION_TOKEN_POLICY_QUEUE)
        QUEX_TYPE_TOKEN*    token_chunk = new QUEX_TYPE_TOKEN[QUEX_SETTING_TOKEN_QUEUE_SIZE]; 
        QuexTokenQueue_init(_token_queue, 
                            token_chunk,
                            token_chunk + QUEX_SETTING_TOKEN_QUEUE_SIZE);
#       elif defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
        QuexTokenQueue_init(_token_queue, 0, 0);
#       else
        token = 0x0; /* call to 'receive(Token*)' provides pointer to some place in memory. */
#       endif

        counter.init();

        if( BFT != QUEX_MEMORY ) {
            QuexAnalyser_construct((QuexAnalyser*)this,
                                   __current_mode_p->analyser_function,
                                   input_handle,
                                   BFT, IANA_InputCodingName, 
                                   QUEX_SETTING_BUFFER_SIZE,
                                   QUEX_SETTING_TRANSLATION_BUFFER_SIZE);
        } else {
            QuexAnalyser_construct_wo_filler((QuexAnalyser*)this,
                                             __current_mode_p->analyser_function,
                                             QUEX_SETTING_BUFFER_SIZE, 0, 0);
        }
    }   

    inline const char* 
    CLASS::version() const
    { 
    }

#   ifdef QUEX_OPTION_INCLUDE_STACK
    typedef struct SimpleMemento_tag {
        QuexAnalyser analyser_core;
        CounterType  counter;
        QuexMode*    current_mode_p;
#       if defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE) || defined(QUEX_OPTION_TOKEN_POLICY_QUEUE)
        struct {
            QUEX_TYPE_TOKEN*    remainder;
            size_t              remaining_n;
        } token_queue;
#       endif

        struct SimpleMemento_tag*  parent;


    } SimpleMemento;
 
    QUEX_INLINE SimpleMemento*
    SimpleMemento_pack(CLASS* lexer)
    {
        CLASS& self = *lexer;
        SimpleMemento* memento = MemoryManager_SimpleMemento_allocate();

        memento->parent         = self._parent_memento;
        memento->analyser_core  = *((QuexAnalyser*)lexer);
        memento->counter        = self.counter;
        memento->current_mode_p = self.__current_mode_p;
#       if defined( QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE ) || defined( QUEX_OPTION_TOKEN_POLICY_QUEUE )
        memento->token_queue.remaining_n =   self._token_queue.write_iterator 
                                           - self._token_queue.read_iterator;
        if( memento->token_queue.remaining_n != 0 ) {
            if(   MemoryManager_TokenArray_allocate(&memento->token_queue.remainder, memento->token_queue.remaining_n)
               == false ) {
                QUEX_ERROR_EXIT("Memory allocation error on request for token array.");
            }
            memcpy(memento->token_queue.remainder, 
                   self._token_queue.read_iterator,
                   sizeof(QUEX_TYPE_TOKEN) * memento->token_queue.remaining_n);
        }
#       endif



        return memento;
    }

    QUEX_INLINE void
    SimpleMemento_unpack(SimpleMemento* memento, CLASS* lexer)
    {
        CLASS& self = *lexer;
        self._parent_memento    = memento->parent;
        *((QuexAnalyser*)lexer) = memento->analyser_core;
        self.counter            = memento->counter;
        self.__current_mode_p   = memento->current_mode_p;
        
#       if defined( QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE ) || defined( QUEX_OPTION_TOKEN_POLICY_QUEUE )
        /* When one returns from a file, the last token of the file was the terminating 
         * token. It is the occurence of this token that triggers a 'return from include'.
         * Thus, the token queue **must** be empty at this point in time.                  */
        __quex_assert( QuexTokenQueue_is_empty(self._token_queue) );
        if( memento->token_queue.remaining_n != 0 ) {
            memcpy(self._token_queue.begin, memento->token_queue.remainder, 
                   sizeof(QUEX_TYPE_TOKEN) * memento->token_queue.remaining_n);
            self._token_queue.read_iterator  = self._token_queue.begin;
            self._token_queue.write_iterator = self._token_queue.begin + memento->token_queue.remaining_n;
            self._token_queue.remaining_repetitions_of_last_token_n = 0;
        }
        MemoryManager_TokenArray_free(memento->token_queue.remainder, memento->token_queue.remaining_n);
#       endif


        
        MemoryManager_SimpleMemento_free(memento);
    }
#   endif /* QUEX_OPTION_INCLUDE_STACK */

}

#include <quex/code_base/temporary_macros_off>


#include <quex/code_base/template/constructor.i>
#include <quex/code_base/template/Counter.i>
#ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
#   include <quex/code_base/template/CounterWithIndentation.i>
#endif
#ifdef QUEX_OPTION_STRING_ACCUMULATOR
#    include <quex/code_base/template/Accumulator.i>
#endif

#include <quex/code_base/template/token_sending.i>
#include <quex/code_base/template/token_receiving.i>

#include <quex/code_base/template/mode_handling.i>
#ifdef  QUEX_OPTION_INCLUDE_STACK
#   include <quex/code_base/template/IncludeStack.i>
#endif
#include <quex/code_base/template/misc.i>
#include <quex/code_base/template/buffer_access.i>

#undef __QUEX_SETTING_DERIVED_CLASS_NAME
#undef __QUEX_SETTING_MAX_MODE_CLASS_N
#undef __QUEX_SETTING_INITIAL_LEXER_MODE_ID 
#undef CLASS
#ifdef    QUEX_OPTION_INCLUDE_STACK
#   undef CLASS_MEMENTO
#endif

#include <quex/code_base/template/Analyser.i>
#include <quex/code_base/buffer/converter/BufferFiller_Converter.i>
#include <quex/code_base/MemoryManager.i>

#if defined(QUEX_OPTION_ASSERTS) && defined (QUEX_OPTION_ASSERTS_DISABLED)
#    error "Ambiguous configuration options."
#endif
#endif // __INCLUDE_GUARD__QUEX__SIMPLE
    /* Information about what pattern 'comes' from what mode in the inheritance tree.
     * 
     * [1] pattern, [2] dominating mode, [3] dominating inheritance level, [4] pattern index
     * 
     * (ONE_AND_ONLY)
     *  [ \t\r\n]+ ONE_AND_ONLY  0 00005
     *  \"struct\" ONE_AND_ONLY  0 00007
     *  \"int\" ONE_AND_ONLY  0 00010
     *  \"double\" ONE_AND_ONLY  0 00013
     *  \"send\" ONE_AND_ONLY  0 00016
     *  \"expect\" ONE_AND_ONLY  0 00019
     *  \";\" ONE_AND_ONLY  0 00022
     *  \"{\" ONE_AND_ONLY  0 00025
     *  \"}\" ONE_AND_ONLY  0 00028
     *  [0-9]+ ONE_AND_ONLY  0 00035
     *  [_a-zA-Z]+ ONE_AND_ONLY  0 00041
     * 
     * 
     * 
     */
#include "Simple"
#if ! defined(__QUEX_SETTING_PLAIN_C)
namespace quex {
#endif

#include <quex/code_base/template/Analyser>
#include <quex/code_base/buffer/Buffer>
#if defined(QUEX_OPTION_TOKEN_POLICY_QUEUE) || defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
#   include <quex/code_base/TokenQueue>
#endif

#ifdef CONTINUE
#   undef CONTINUE
#endif

#include <quex/code_base/temporary_macros_on>

void  
Simple_ONE_AND_ONLY_analyser_function(QuexAnalyser* me) 
{
    /* NOTE: Different modes correspond to different analyser functions. The analyser*/
    /*       functions are all located inside the main class as static functions. That*/
    /*       means, they are something like 'globals'. They receive a pointer to the */
    /*       lexical analyser, since static member do not have access to the 'this' pointer.*/
#   if defined (__QUEX_SETTING_PLAIN_C)
#      define self (*me)
#   else
       using namespace quex;
       QUEX_LEXER_CLASS& self = *((QUEX_LEXER_CLASS*)me);
#   endif
    /* me = pointer to state of the lexical analyser */
    quex::QuexMode&              ONE_AND_ONLY = QUEX_LEXER_CLASS::ONE_AND_ONLY;
    QUEX_TYPE_GOTO_LABEL         last_acceptance = QUEX_GOTO_TERMINAL_LABEL_INIT_VALUE;
    QUEX_TYPE_CHARACTER_POSITION last_acceptance_input_position = (QUEX_TYPE_CHARACTER*)(0x00);
    QUEX_TYPE_CHARACTER_POSITION* post_context_start_position = 0x0;
    const size_t                 PostContextStartPositionN = (size_t)0;
    QUEX_TYPE_CHARACTER          input = (QUEX_TYPE_CHARACTER)(0x00);

    /* Post context positions do not have to be reset or initialized. If a state
     * is reached which is associated with 'end of post context' it is clear what
     * post context is meant. This results from the ways the state machine is 
     * constructed. A post context positions live time looks like the following:
     *
     * (1)   unitialized (don't care)
     * (1.b) on buffer reload it may, or may not be adapted (don't care)
     * (2)   when a post context begin state is passed, the it is **SET** (now: take care)
     * (2.b) on buffer reload it **is adapted**.
     * (3)   when a terminal state of the post context is reached (which can only be reached
     *       for that particular post context, then the post context position is used
     *       to reset the input position.                                              */
    || defined(QUEX_OPTION_ASSERTS)
    me->DEBUG_analyser_function_at_entry = me->current_analyser_function;
#endif
__REENTRY:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: __REENTRY");
    QuexBuffer_mark_lexeme_start(&me->buffer);
    QuexBuffer_undo_terminating_zero_for_lexeme(&me->buffer);
    /* state machine */
    /* init-state = 249L
     * 00249() <~ (5, 16), (7, 32), (10, 47), (13, 65), (16, 82), (19, 101), (22, 112), (25, 118), (28, 124), (35, 141), (41, 158)
     *       == ['\t', '\n'], '\r', ' ' ==> 00251
     *       == ['0', '9'] ==> 00259
     *       == ';' ==> 00258
     *       == ['A', 'Z'], '_', ['a', 'c'], ['f', 'h'], ['j', 'r'], ['t', 'z'] ==> 00255
     *       == 'd' ==> 00252
     *       == 'e' ==> 00250
     *       == 'i' ==> 00254
     *       == 's' ==> 00257
     *       == '{' ==> 00253
     *       == '}' ==> 00256
     *       <no epsilon>
     * 00256(A, S) <~ (28, 125, A, S)
     *       <no epsilon>
     * 00257(A, S) <~ (41, 159, A, S), (7, 33), (16, 83)
     *       == ['A', 'Z'], '_', ['a', 'd'], ['f', 's'], ['u', 'z'] ==> 00255
     *       == 'e' ==> 00260
     *       == 't' ==> 00261
     *       <no epsilon>
     * 00260(A, S) <~ (41, 159, A, S), (16, 84)
     *       == ['A', 'Z'], '_', ['a', 'm'], ['o', 'z'] ==> 00255
     *       == 'n' ==> 00266
     *       <no epsilon>
     * 00266(A, S) <~ (41, 159, A, S), (16, 85)
     *       == ['A', 'Z'], '_', ['a', 'c'], ['e', 'z'] ==> 00255
     *       == 'd' ==> 00267
     *       <no epsilon>
     * 00267(A, S) <~ (16, 86, A, S)
     *       == ['A', 'Z'], '_', ['a', 'z'] ==> 00255
     *       <no epsilon>
     * 00255(A, S) <~ (41, 159, A, S)
     *       == ['A', 'Z'], '_', ['a', 'z'] ==> 00255
     *       <no epsilon>
     * 00261(A, S) <~ (41, 159, A, S), (7, 34)
     *       == ['A', 'Z'], '_', ['a', 'q'], ['s', 'z'] ==> 00255
     *       == 'r' ==> 00262
     *       <no epsilon>
     * 00262(A, S) <~ (41, 159, A, S), (7, 35)
     *       == ['A', 'Z'], '_', ['a', 't'], ['v', 'z'] ==> 00255
     *       == 'u' ==> 00263
     *       <no epsilon>
     * 00263(A, S) <~ (41, 159, A, S), (7, 36)
     *       == ['A', 'Z'], '_', ['a', 'b'], ['d', 'z'] ==> 00255
     *       == 'c' ==> 00264
     *       <no epsilon>
     * 00264(A, S) <~ (41, 159, A, S), (7, 37)
     *       == ['A', 'Z'], '_', ['a', 's'], ['u', 'z'] ==> 00255
     *       == 't' ==> 00265
     *       <no epsilon>
     * 00265(A, S) <~ (7, 38, A, S)
     *       == ['A', 'Z'], '_', ['a', 'z'] ==> 00255
     *       <no epsilon>
     * 00258(A, S) <~ (22, 113, A, S)
     *       <no epsilon>
     * 00259(A, S) <~ (35, 142, A, S)
     *       == ['0', '9'] ==> 00259
     *       <no epsilon>
     * 00250(A, S) <~ (41, 159, A, S), (19, 102)
     *       == ['A', 'Z'], '_', ['a', 'w'], ['y', 'z'] ==> 00255
     *       == 'x' ==> 00275
     *       <no epsilon>
     * 00275(A, S) <~ (41, 159, A, S), (19, 103)
     *       == ['A', 'Z'], '_', ['a', 'o'], ['q', 'z'] ==> 00255
     *       == 'p' ==> 00276
     *       <no epsilon>
     * 00276(A, S) <~ (41, 159, A, S), (19, 104)
     *       == ['A', 'Z'], '_', ['a', 'd'], ['f', 'z'] ==> 00255
     *       == 'e' ==> 00277
     *       <no epsilon>
     * 00277(A, S) <~ (41, 159, A, S), (19, 105)
     *       == ['A', 'Z'], '_', ['a', 'b'], ['d', 'z'] ==> 00255
     *       == 'c' ==> 00278
     *       <no epsilon>
     * 00278(A, S) <~ (41, 159, A, S), (19, 106)
     *       == ['A', 'Z'], '_', ['a', 's'], ['u', 'z'] ==> 00255
     *       == 't' ==> 00279
     *       <no epsilon>
     * 00279(A, S) <~ (19, 107, A, S)
     *       == ['A', 'Z'], '_', ['a', 'z'] ==> 00255
     *       <no epsilon>
     * 00251(A, S) <~ (5, 17, A, S)
     *       == ['\t', '\n'], '\r', ' ' ==> 00251
     *       <no epsilon>
     * 00252(A, S) <~ (41, 159, A, S), (13, 66)
     *       == ['A', 'Z'], '_', ['a', 'n'], ['p', 'z'] ==> 00255
     *       == 'o' ==> 00270
     *       <no epsilon>
     * 00270(A, S) <~ (41, 159, A, S), (13, 67)
     *       == ['A', 'Z'], '_', ['a', 't'], ['v', 'z'] ==> 00255
     *       == 'u' ==> 00271
     *       <no epsilon>
     * 00271(A, S) <~ (41, 159, A, S), (13, 68)
     *       == ['A', 'Z'], '_', 'a', ['c', 'z'] ==> 00255
     *       == 'b' ==> 00272
     *       <no epsilon>
     * 00272(A, S) <~ (41, 159, A, S), (13, 69)
     *       == ['A', 'Z'], '_', ['a', 'k'], ['m', 'z'] ==> 00255
     *       == 'l' ==> 00273
     *       <no epsilon>
     * 00273(A, S) <~ (41, 159, A, S), (13, 70)
     *       == ['A', 'Z'], '_', ['a', 'd'], ['f', 'z'] ==> 00255
     *       == 'e' ==> 00274
     *       <no epsilon>
     * 00274(A, S) <~ (13, 71, A, S)
     *       == ['A', 'Z'], '_', ['a', 'z'] ==> 00255
     *       <no epsilon>
     * 00253(A, S) <~ (25, 119, A, S)
     *       <no epsilon>
     * 00254(A, S) <~ (41, 159, A, S), (10, 48)
     *       == ['A', 'Z'], '_', ['a', 'm'], ['o', 'z'] ==> 00255
     *       == 'n' ==> 00268
     *       <no epsilon>
     * 00268(A, S) <~ (41, 159, A, S), (10, 49)
     *       == ['A', 'Z'], '_', ['a', 's'], ['u', 'z'] ==> 00255
     *       == 't' ==> 00269
     *       <no epsilon>
     * 00269(A, S) <~ (10, 50, A, S)
     *       == ['A', 'Z'], '_', ['a', 'z'] ==> 00255
     *       <no epsilon>
     * 
     */
STATE_249:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_249");

    input = QuexBuffer_input_get(&me->buffer);
    if( input < 95) {
        if( input < 33) {
            if( input < 13) {
                if( input == 9 || input == 10 ) {
                    goto STATE_251;
                } else {
                    goto STATE_249_DROP_OUT;
                }
            } else {
                if( input == 13 || input == 32 ) {
                    goto STATE_251;
                } else {
                    goto STATE_249_DROP_OUT;
                }
            }
        } else {
            if( input < 59) {
                if( input >= 48 && input < 58 ) {
                    goto STATE_259;    /* ['0', '9'] */
                } else {
                    goto STATE_249_DROP_OUT_DIRECT;    /* ['!', '/'] */
                }
            } else {
                if( input < 65) {
                    if( input == 59) {
                        QuexBuffer_input_p_increment(&me->buffer);
                        goto TERMINAL_22_DIRECT;    /* ';' */
                    } else {
                        goto STATE_249_DROP_OUT_DIRECT;    /* ['<', '@'] */
                    }
                } else {
                    if( input < 91) {
                        goto STATE_255;    /* ['A', 'Z'] */
                    } else {
                        goto STATE_249_DROP_OUT_DIRECT;    /* ['[', '^'] */
                    }
                }
            }
        }
    } else {
        if( input < 106) {
            if( input < 100) {
                if( input == 96) {
                    goto STATE_249_DROP_OUT_DIRECT;    /* '`' */
                } else {
                    goto STATE_255;    /* '_' */
                }
            } else {
                if( input < 102) {
                    if( input == 100) {
                        goto STATE_252;    /* 'd' */
                    } else {
                        goto STATE_250;    /* 'e' */
                    }
                } else {
                    if( input != 105) {
                        goto STATE_255;    /* ['f', 'h'] */
                    } else {
                        goto STATE_254;    /* 'i' */
                    }
                }
            }
        } else {
            if( input < 123) {
                if( input == 115) {
                    goto STATE_257;    /* 's' */
                } else {
                    goto STATE_255;    /* ['j', 'r'] */
                }
            } else {
                if( input < 125) {
                    if( input == 123) {
                        QuexBuffer_input_p_increment(&me->buffer);
                        goto TERMINAL_25_DIRECT;    /* '{' */
                    } else {
                        goto STATE_249_DROP_OUT_DIRECT;    /* '|' */
                    }
                } else {
                    if( input == 125) {
                        QuexBuffer_input_p_increment(&me->buffer);
                        goto TERMINAL_28_DIRECT;    /* '}' */
                    } else {
                        goto STATE_249_DROP_OUT_DIRECT;    /* ['~', oo] */
                    }
                }
            }
        }
    }

STATE_249_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_249_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_249_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_249_DROP_OUT_DIRECT");
        QUEX_GOTO_last_acceptance();

    }

    if( QuexBuffer_is_end_of_file(&me->buffer) ) {
        /* NO CHECK 'last_acceptance != -1' --- first state can **never** be an acceptance state */
        goto TERMINAL_END_OF_STREAM;
    }
        QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_249_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();


STATE_249_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_249_INPUT");
    QuexBuffer_input_p_increment(&me->buffer);
    goto STATE_249;
STATE_257:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_257");

STATE_257_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_257_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 97) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_257_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input == 95) {
                goto STATE_255;    /* '_' */
            } else {
                goto STATE_257_DROP_OUT_DIRECT;    /* ['[', '^'] */
            }
        }
    } else {
        if( input < 116) {
            if( input == 101) {
                goto STATE_260;    /* 'e' */
            } else {
                goto STATE_255;    /* ['a', 'd'] */
            }
        } else {
            if( input < 117) {
                    goto STATE_261;    /* 't' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['u', 'z'] */
                } else {
                    goto STATE_257_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_257_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_257_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_257_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_257_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_257_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_259:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_259");

STATE_259_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_259_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input >= 48 && input < 58 ) {
        goto STATE_259;    /* ['0', '9'] */
    } else {
        goto STATE_259_DROP_OUT;    /* [-oo, '/'] */
    }

STATE_259_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_259_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
    /* STATE_259_DROP_OUT_DIRECT:
     */
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_259_DROP_OUT_DIRECT");
            goto TERMINAL_35_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "35");
    QUEX_SET_last_acceptance(35);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_259_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_260:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_260");

STATE_260_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_260_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_260_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_260_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 110) {
            if( input == 96) {
                goto STATE_260_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'm'] */
            }
        } else {
            if( input < 111) {
                    goto STATE_266;    /* 'n' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['o', 'z'] */
                } else {
                    goto STATE_260_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_260_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_260_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_260_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_260_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_260_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_261:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_261");

STATE_261_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_261_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_261_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_261_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 114) {
            if( input == 96) {
                goto STATE_261_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'q'] */
            }
        } else {
            if( input < 115) {
                    goto STATE_262;    /* 'r' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['s', 'z'] */
                } else {
                    goto STATE_261_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_261_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_261_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_261_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_261_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_261_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_262:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_262");

STATE_262_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_262_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_262_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_262_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 117) {
            if( input == 96) {
                goto STATE_262_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 't'] */
            }
        } else {
            if( input < 118) {
                    goto STATE_263;    /* 'u' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['v', 'z'] */
                } else {
                    goto STATE_262_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_262_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_262_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_262_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_262_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_262_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_263:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_263");

STATE_263_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_263_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_263_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_263_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 99) {
            if( input == 97 || input == 98 ) {
                goto STATE_255;
            } else {
                goto STATE_263_DROP_OUT;
            }
        } else {
            if( input < 100) {
                    goto STATE_264;    /* 'c' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['d', 'z'] */
                } else {
                    goto STATE_263_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_263_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_263_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_263_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_263_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_263_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_264:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_264");

STATE_264_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_264_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_264_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_264_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 116) {
            if( input == 96) {
                goto STATE_264_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 's'] */
            }
        } else {
            if( input < 117) {
                    goto STATE_265;    /* 't' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['u', 'z'] */
                } else {
                    goto STATE_264_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_264_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_264_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_264_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_264_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_264_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_265:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_265");

STATE_265_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_265_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 95) {
        if( input >= 65 && input < 91 ) {
            goto STATE_255;    /* ['A', 'Z'] */
        } else {
            goto STATE_265_DROP_OUT;    /* [-oo, '@'] */
        }
    } else {
        if( input < 97) {
            if( input == 95) {
                goto STATE_255;    /* '_' */
            } else {
                goto STATE_265_DROP_OUT_DIRECT;    /* '`' */
            }
        } else {
            if( input < 123) {
                goto STATE_255;    /* ['a', 'z'] */
            } else {
                goto STATE_265_DROP_OUT_DIRECT;    /* ['{', oo] */
            }
        }
    }

STATE_265_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_265_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_265_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_265_DROP_OUT_DIRECT");
            goto TERMINAL_7_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "7");
    QUEX_SET_last_acceptance(7);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_265_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_266:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_266");

STATE_266_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_266_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_266_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_266_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 100) {
            if( input == 97 || input == 98 || input == 99 ) {
                goto STATE_255;
            } else {
                goto STATE_266_DROP_OUT;
            }
        } else {
            if( input < 101) {
                    goto STATE_267;    /* 'd' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['e', 'z'] */
                } else {
                    goto STATE_266_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_266_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_266_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_266_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_266_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_266_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_267:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_267");

STATE_267_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_267_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 95) {
        if( input >= 65 && input < 91 ) {
            goto STATE_255;    /* ['A', 'Z'] */
        } else {
            goto STATE_267_DROP_OUT;    /* [-oo, '@'] */
        }
    } else {
        if( input < 97) {
            if( input == 95) {
                goto STATE_255;    /* '_' */
            } else {
                goto STATE_267_DROP_OUT_DIRECT;    /* '`' */
            }
        } else {
            if( input < 123) {
                goto STATE_255;    /* ['a', 'z'] */
            } else {
                goto STATE_267_DROP_OUT_DIRECT;    /* ['{', oo] */
            }
        }
    }

STATE_267_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_267_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_267_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_267_DROP_OUT_DIRECT");
            goto TERMINAL_16_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "16");
    QUEX_SET_last_acceptance(16);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_267_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_268:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_268");

STATE_268_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_268_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_268_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_268_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 116) {
            if( input == 96) {
                goto STATE_268_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 's'] */
            }
        } else {
            if( input < 117) {
                    goto STATE_269;    /* 't' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['u', 'z'] */
                } else {
                    goto STATE_268_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_268_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_268_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_268_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_268_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_268_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_269:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_269");

STATE_269_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_269_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 95) {
        if( input >= 65 && input < 91 ) {
            goto STATE_255;    /* ['A', 'Z'] */
        } else {
            goto STATE_269_DROP_OUT;    /* [-oo, '@'] */
        }
    } else {
        if( input < 97) {
            if( input == 95) {
                goto STATE_255;    /* '_' */
            } else {
                goto STATE_269_DROP_OUT_DIRECT;    /* '`' */
            }
        } else {
            if( input < 123) {
                goto STATE_255;    /* ['a', 'z'] */
            } else {
                goto STATE_269_DROP_OUT_DIRECT;    /* ['{', oo] */
            }
        }
    }

STATE_269_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_269_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_269_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_269_DROP_OUT_DIRECT");
            goto TERMINAL_10_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "10");
    QUEX_SET_last_acceptance(10);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_269_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_270:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_270");

STATE_270_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_270_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_270_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_270_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 117) {
            if( input == 96) {
                goto STATE_270_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 't'] */
            }
        } else {
            if( input < 118) {
                    goto STATE_271;    /* 'u' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['v', 'z'] */
                } else {
                    goto STATE_270_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_270_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_270_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_270_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_270_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_270_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_271:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_271");

STATE_271_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_271_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_271_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_271_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 98) {
            if( input == 96) {
                goto STATE_271_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* 'a' */
            }
        } else {
            if( input < 99) {
                    goto STATE_272;    /* 'b' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['c', 'z'] */
                } else {
                    goto STATE_271_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_271_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_271_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_271_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_271_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_271_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_272:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_272");

STATE_272_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_272_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_272_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_272_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 108) {
            if( input == 96) {
                goto STATE_272_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'k'] */
            }
        } else {
            if( input < 109) {
                    goto STATE_273;    /* 'l' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['m', 'z'] */
                } else {
                    goto STATE_272_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_272_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_272_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_272_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_272_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_272_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_273:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_273");

STATE_273_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_273_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_273_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_273_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 101) {
            if( input == 96) {
                goto STATE_273_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'd'] */
            }
        } else {
            if( input < 102) {
                    goto STATE_274;    /* 'e' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['f', 'z'] */
                } else {
                    goto STATE_273_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_273_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_273_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_273_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_273_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_273_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_274:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_274");

STATE_274_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_274_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 95) {
        if( input >= 65 && input < 91 ) {
            goto STATE_255;    /* ['A', 'Z'] */
        } else {
            goto STATE_274_DROP_OUT;    /* [-oo, '@'] */
        }
    } else {
        if( input < 97) {
            if( input == 95) {
                goto STATE_255;    /* '_' */
            } else {
                goto STATE_274_DROP_OUT_DIRECT;    /* '`' */
            }
        } else {
            if( input < 123) {
                goto STATE_255;    /* ['a', 'z'] */
            } else {
                goto STATE_274_DROP_OUT_DIRECT;    /* ['{', oo] */
            }
        }
    }

STATE_274_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_274_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_274_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_274_DROP_OUT_DIRECT");
            goto TERMINAL_13_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "13");
    QUEX_SET_last_acceptance(13);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_274_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_275:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_275");

STATE_275_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_275_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_275_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_275_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 112) {
            if( input == 96) {
                goto STATE_275_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'o'] */
            }
        } else {
            if( input < 113) {
                    goto STATE_276;    /* 'p' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['q', 'z'] */
                } else {
                    goto STATE_275_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_275_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_275_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_275_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_275_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_275_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_276:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_276");

STATE_276_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_276_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_276_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_276_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 101) {
            if( input == 96) {
                goto STATE_276_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'd'] */
            }
        } else {
            if( input < 102) {
                    goto STATE_277;    /* 'e' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['f', 'z'] */
                } else {
                    goto STATE_276_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_276_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_276_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_276_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_276_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_276_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_277:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_277");

STATE_277_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_277_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_277_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_277_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 99) {
            if( input == 97 || input == 98 ) {
                goto STATE_255;
            } else {
                goto STATE_277_DROP_OUT;
            }
        } else {
            if( input < 100) {
                    goto STATE_278;    /* 'c' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['d', 'z'] */
                } else {
                    goto STATE_277_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_277_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_277_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_277_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_277_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_277_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_278:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_278");

STATE_278_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_278_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_278_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_278_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 116) {
            if( input == 96) {
                goto STATE_278_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 's'] */
            }
        } else {
            if( input < 117) {
                    goto STATE_279;    /* 't' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['u', 'z'] */
                } else {
                    goto STATE_278_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_278_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_278_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_278_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_278_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_278_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_279:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_279");

STATE_279_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_279_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 95) {
        if( input >= 65 && input < 91 ) {
            goto STATE_255;    /* ['A', 'Z'] */
        } else {
            goto STATE_279_DROP_OUT;    /* [-oo, '@'] */
        }
    } else {
        if( input < 97) {
            if( input == 95) {
                goto STATE_255;    /* '_' */
            } else {
                goto STATE_279_DROP_OUT_DIRECT;    /* '`' */
            }
        } else {
            if( input < 123) {
                goto STATE_255;    /* ['a', 'z'] */
            } else {
                goto STATE_279_DROP_OUT_DIRECT;    /* ['{', oo] */
            }
        }
    }

STATE_279_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_279_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_279_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_279_DROP_OUT_DIRECT");
            goto TERMINAL_19_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "19");
    QUEX_SET_last_acceptance(19);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_279_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_250:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_250");

STATE_250_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_250_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_250_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_250_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 120) {
            if( input == 96) {
                goto STATE_250_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'w'] */
            }
        } else {
            if( input < 121) {
                    goto STATE_275;    /* 'x' */
            } else {
                if( input == 121 || input == 122 ) {
                    goto STATE_255;
                } else {
                    goto STATE_250_DROP_OUT;
                }
            }
        }
    }

STATE_250_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_250_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_250_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_250_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_250_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_251:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_251");

STATE_251_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_251_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 13) {
        if( input == 9 || input == 10 ) {
            goto STATE_251;
        } else {
            goto STATE_251_DROP_OUT;
        }
    } else {
        if( input == 13 || input == 32 ) {
            goto STATE_251;
        } else {
            goto STATE_251_DROP_OUT;
        }
    }

STATE_251_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_251_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
    /* STATE_251_DROP_OUT_DIRECT:
     */
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_251_DROP_OUT_DIRECT");
            goto TERMINAL_5_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "5");
    QUEX_SET_last_acceptance(5);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_251_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_252:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_252");

STATE_252_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_252_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_252_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_252_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 111) {
            if( input == 96) {
                goto STATE_252_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'n'] */
            }
        } else {
            if( input < 112) {
                    goto STATE_270;    /* 'o' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['p', 'z'] */
                } else {
                    goto STATE_252_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_252_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_252_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_252_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_252_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_252_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_254:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_254");

STATE_254_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_254_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 96) {
        if( input < 91) {
            if( input < 65) {
                goto STATE_254_DROP_OUT;    /* [-oo, '@'] */
            } else {
                goto STATE_255;    /* ['A', 'Z'] */
            }
        } else {
            if( input != 95) {
                goto STATE_254_DROP_OUT_DIRECT;    /* ['[', '^'] */
            } else {
                goto STATE_255;    /* '_' */
            }
        }
    } else {
        if( input < 110) {
            if( input == 96) {
                goto STATE_254_DROP_OUT_DIRECT;    /* '`' */
            } else {
                goto STATE_255;    /* ['a', 'm'] */
            }
        } else {
            if( input < 111) {
                    goto STATE_268;    /* 'n' */
            } else {
                if( input < 123) {
                    goto STATE_255;    /* ['o', 'z'] */
                } else {
                    goto STATE_254_DROP_OUT_DIRECT;    /* ['{', oo] */
                }
            }
        }
    }

STATE_254_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_254_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_254_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_254_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_254_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();



STATE_255:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_255");

STATE_255_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_255_INPUT");

    QuexBuffer_input_p_increment(&me->buffer);
    input = QuexBuffer_input_get(&me->buffer);
    if( input < 95) {
        if( input >= 65 && input < 91 ) {
            goto STATE_255;    /* ['A', 'Z'] */
        } else {
            goto STATE_255_DROP_OUT;    /* [-oo, '@'] */
        }
    } else {
        if( input < 97) {
            if( input == 95) {
                goto STATE_255;    /* '_' */
            } else {
                goto STATE_255_DROP_OUT_DIRECT;    /* '`' */
            }
        } else {
            if( input < 123) {
                goto STATE_255;    /* ['a', 'z'] */
            } else {
                goto STATE_255_DROP_OUT_DIRECT;    /* ['{', oo] */
            }
        }
    }

STATE_255_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_255_DROP_OUT");
    if( input != QUEX_SETTING_BUFFER_LIMIT_CODE ) {
STATE_255_DROP_OUT_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_255_DROP_OUT_DIRECT");
            goto TERMINAL_41_DIRECT;
    }

        QUEX_DEBUG_PRINT2(&me->buffer, "ACCEPTANCE: %s", "41");
    QUEX_SET_last_acceptance(41);
    last_acceptance_input_position = QuexBuffer_tell_memory_adr(&me->buffer);
    
    QUEX_DEBUG_PRINT(&me->buffer, "FORWARD_BUFFER_RELOAD");
    if( QuexAnalyser_buffer_reload_forward(&me->buffer, &last_acceptance_input_position,
                                           post_context_start_position, PostContextStartPositionN) ) {
       goto STATE_255_INPUT;
    }

    QUEX_DEBUG_PRINT(&me->buffer, "BUFFER_RELOAD_FAILED");
    QUEX_GOTO_last_acceptance();




  /* (*) Terminal states _______________________________________________________*/
  /**/
  /* Acceptance terminal states, i.e. the 'winner patterns'. This means*/
  /* that the last input dropped out of a state where the longest matching*/
  /* pattern was according to the terminal state. The terminal states are */
  /* numbered after the pattern id.*/
  /**/
TERMINAL_35:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_35");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_35_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_35_DIRECT");

    QuexBuffer_set_terminating_zero_for_lexeme(&me->buffer);
    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(LexemeL);
        
        #line 27 "dos_lf_2.qx"
        self.send(QUEX_TKN_NUMBER, atoi((char*)Lexeme)); CONTINUE;
#line 1990 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_5:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_5");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_5_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_5_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count(Lexeme, LexemeEnd);
         
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_7:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_7");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_7_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_7_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(6);
        
        #line 19 "dos_lf_2.qx"
        self.send(QUEX_TKN_STRUCT); CONTINUE;
#line 2030 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_41:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_41");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_41_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_41_DIRECT");

    QuexBuffer_set_terminating_zero_for_lexeme(&me->buffer);
    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(LexemeL);
        
        #line 28 "dos_lf_2.qx"
         self.send(QUEX_TKN_IDENTIFIER, Lexeme); RETURN; 
#line 2053 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_10:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_10");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_10_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_10_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(3);
        
        #line 20 "dos_lf_2.qx"
        self.send(QUEX_TKN_TYPE_INT); CONTINUE;
#line 2075 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_13:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_13");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_13_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_13_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(6);
        
        #line 21 "dos_lf_2.qx"
        self.send(QUEX_TKN_TYPE_DOUBLE); CONTINUE;
#line 2097 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_16:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_16");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_16_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_16_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(4);
        
        #line 22 "dos_lf_2.qx"
        self.send(QUEX_TKN_SEND); CONTINUE;
#line 2119 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_19:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_19");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_19_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_19_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(6);
        
        #line 23 "dos_lf_2.qx"
        self.send(QUEX_TKN_EXPECT); CONTINUE;
#line 2141 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_22:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_22");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_22_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_22_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(1);
        
        #line 24 "dos_lf_2.qx"
        self.send(QUEX_TKN_SEMICOLON); CONTINUE;
#line 2163 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_25:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_25");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_25_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_25_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(1);
        
        #line 25 "dos_lf_2.qx"
        self.send(QUEX_TKN_BRACKET_OPEN); CONTINUE;
#line 2185 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;

TERMINAL_28:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_28");

    QuexBuffer_seek_memory_adr(&me->buffer, last_acceptance_input_position);

TERMINAL_28_DIRECT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_28_DIRECT");

    {
        {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count_NoNewline(1);
        
        #line 26 "dos_lf_2.qx"
        self.send(QUEX_TKN_BRACKET_CLOSE); CONTINUE;
#line 2207 "Simple-core-engine.cpp"
        
        }
    }

    goto __REENTRY_PREPARATION;



TERMINAL_END_OF_STREAM:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_END_OF_STREAM");

                {
                    {
        self.counter.__shift_end_values_to_start_values();
        
        #line 16 "dos_lf_2.qx"
        self.send(QUEX_TKN_TERMINATION); CONTINUE;
#line 2225 "Simple-core-engine.cpp"
        
        }
                }

     return;

TERMINAL_DEFAULT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: TERMINAL_DEFAULT");

me->buffer._input_p = me->buffer._lexeme_start_p;
if( QuexBuffer_is_end_of_file(&me->buffer) ) {

    /* Next increment will stop on EOF character. */
}

else {
    /* Step over nomatching character */
    QuexBuffer_input_p_increment(&me->buffer);
}

                {
                    {
        self.counter.__shift_end_values_to_start_values();
        self.counter.count(Lexeme, LexemeEnd);
        self.send(QUEX_TKN_TERMINATION);
        return;
        
        }
                }

     goto __REENTRY_PREPARATION;

#undef Lexeme
#undef LexemeBegin
#undef LexemeEnd
#undef LexemeL
#ifndef __QUEX_OPTION_USE_COMPUTED_GOTOS
__TERMINAL_ROUTER: {
        /*  if last_acceptance => goto correspondent acceptance terminal state*/
        /*  else               => execute defaul action*/
        switch( last_acceptance ) {
            case 35: goto TERMINAL_35;
            case 5: goto TERMINAL_5;
            case 7: goto TERMINAL_7;
            case 41: goto TERMINAL_41;
            case 10: goto TERMINAL_10;
            case 13: goto TERMINAL_13;
            case 16: goto TERMINAL_16;
            case 19: goto TERMINAL_19;
            case 22: goto TERMINAL_22;
            case 25: goto TERMINAL_25;
            case 28: goto TERMINAL_28;

            default: goto TERMINAL_DEFAULT;; /* nothing matched */
        }
    }
#endif /* __QUEX_OPTION_USE_COMPUTED_GOTOS */

  
__REENTRY_PREPARATION:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: __REENTRY_PREPARATION");

    /* (*) Common point for **restarting** lexical analysis.
     *     at each time when CONTINUE is called at the end of a pattern. */
    
#   if defined(QUEX_OPTION_TOKEN_POLICY_USERS_TOKEN)
    if( self.token->type_id() != __QUEX_TOKEN_ID_UNINITIALIZED) return;
#   elif defined(QUEX_OPTION_TOKEN_POLICY_QUEUE) || defined(QUEX_OPTION_TOKEN_POLICY_USERS_QUEUE)
    if( QuexTokenQueue_is_full(self._token_queue) ) return;
#   endif

    last_acceptance = QUEX_GOTO_TERMINAL_LABEL_INIT_VALUE;


    /* Post context positions do not have to be reset or initialized. If a state
     * is reached which is associated with 'end of post context' it is clear what
     * post context is meant. This results from the ways the state machine is 
     * constructed. A post context positions live time looks like the following:
     *
     * (1)   unitialized (don't care)
     * (1.b) on buffer reload it may, or may not be adapted (don't care)
     * (2)   when a post context begin state is passed, the it is **SET** (now: take care)
     * (2.b) on buffer reload it **is adapted**.
     * (3)   when a terminal state of the post context is reached (which can only be reached
     *       for that particular post context, then the post context position is used
     *       to reset the input position.                                              */

    /*  If a mode change happened, then the function must first return and
     *  indicate that another mode function is to be called. At this point, 
     *  we to force a 'return' on a mode change. 
     *
     *  Pseudo Code: if( previous_mode != current_mode ) {
     *                   return 0;
     *               }
     *
     *  When the analyzer returns, the caller function has to watch if a mode change
     *  occured. If not it can call this function again.                               */
    if( me->DEBUG_analyser_function_at_entry != me->current_analyser_function ) 
#endif
    { 
    QUEX_TOKEN_POLICY_SET_1(__QUEX_TOKEN_ID_UNINITIALIZED);
    return;
#elif defined(QUEX_OPTION_ASSERTS)
    QUEX_ERROR_EXIT("Mode change without immediate return from the lexical analyser.");
#endif
    }

    goto __REENTRY;

    /* prevent compiler warning 'unused variable': use variables once in a part of the code*/
    /* that is never reached (and deleted by the compiler anyway).*/
    if( 0 == 1 ) {
        int unused = 0;
        unused = unused + ONE_AND_ONLY.id;
    }
}
#include <quex/code_base/temporary_macros_off>
#if ! defined(__QUEX_SETTING_PLAIN_C)
} // namespace quex
#endif
#include"Simple"
namespace quex {
        QuexMode  Simple::ONE_AND_ONLY;

    void
    Simple_ONE_AND_ONLY_on_entry(Simple* me, const QuexMode* FromMode) {
#ifdef __QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
__quex_assert(me->ONE_AND_ONLY.has_entry_from(FromMode));
#endif

    }

    void
    Simple_ONE_AND_ONLY_on_exit(Simple* me, const QuexMode* ToMode)  {
#ifdef __QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
__quex_assert(me->ONE_AND_ONLY.has_exit_to(ToMode));
#endif

    }

#ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT        
    void
    Simple_ONE_AND_ONLY_on_indentation(Simple* me, const int Indentation) {
__quex_assert(Indentation >= 0);
    }
#endif

#ifdef __QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
    bool
    Simple_ONE_AND_ONLY_has_base(const QuexMode* Mode) {
    return false;
    }
    bool
    Simple_ONE_AND_ONLY_has_entry_from(const QuexMode* Mode) {
    return true; // default
    }
    bool
    Simple_ONE_AND_ONLY_has_exit_to(const QuexMode* Mode) {
    return true; // default
    }
#endif    
#undef self
} // END: namespace quex
// -*- C++ -*- vim: set syntax=cpp:
// PURPOSE: File containing definition of token-identifier and
//          a function that maps token identifiers to a string
//          name.
//
// NOTE: This file has been created automatically by a
//       quex program.
//
//
/////////////////////////////////////////////////////////////////////////////////////////

#include<cstdio> // for: 'std::sprintf'
#include<map>    // for: 'token-id' <-> 'name map'

/* Definition of essential token identifiers that the analyser engine requires. */
#if defined(__QUEX_TOKEN_ID_TERMINATION) || defined(__QUEX_TOKEN_ID_UNINITIALIZED)
#    error "Token identifiers for 'termination' and/or 'unilitialized' have been defined previously. This indicates that the inclusion sequence is incorrect. For example the file 'quex/code_base/definitions' shall **not** be included before this file."
#endif
/* Note, we can very well refer in macros to things that are defined below. */

/* The token class definition file can only be included after the two token identifiers have
 * been defined. Otherwise, it would rely on default values. */
#include "quex/code_base/Token"



namespace quex {


    inline const std::string&
    Token::map_id_to_name(const QUEX_TYPE_TOKEN_ID TokenID)
    {
       static bool virginity_f = true;
       static std::map<QUEX_TYPE_TOKEN_ID, std::string>  db;
       static std::string  error_string("");
       static std::string  uninitialized_string("<UNINITIALIZED>");
       static std::string  termination_string("<TERMINATION>");
       
       // NOTE: In general no assumptions can be made that the QUEX_TYPE_TOKEN_ID
       //       is an integer. Thus, no switch statement is used. 
       if( virginity_f ) {
           virginity_f = false;
           // Create the Database mapping TokenID -> TokenName
           
           db[QUEX_TKN_UNINITIALIZED] = std::string("UNINITIALIZED");
           db[QUEX_TKN_BRACKET_CLOSE] = std::string("BRACKET_CLOSE");
           db[QUEX_TKN_TYPE_INT]      = std::string("TYPE_INT");
           db[QUEX_TKN_STRUCT]        = std::string("STRUCT");
           db[QUEX_TKN_SEMICOLON]     = std::string("SEMICOLON");
           db[QUEX_TKN_BRACKET_OPEN]  = std::string("BRACKET_OPEN");
           db[QUEX_TKN_NUMBER]        = std::string("NUMBER");
           db[QUEX_TKN_SEND]          = std::string("SEND");
           db[QUEX_TKN_TYPE_DOUBLE]   = std::string("TYPE_DOUBLE");
           db[QUEX_TKN_EXPECT]        = std::string("EXPECT");
           db[QUEX_TKN_TERMINATION]   = std::string("TERMINATION");
           db[QUEX_TKN_IDENTIFIER]    = std::string("IDENTIFIER");
       }

       if     ( TokenID == __QUEX_TOKEN_ID_TERMINATION ) return termination_string;
       else if( TokenID == __QUEX_TOKEN_ID_UNINITIALIZED ) return uninitialized_string;
       std::map<QUEX_TYPE_TOKEN_ID, std::string>::const_iterator it = db.find(TokenID);
       if( it != db.end() ) return (*it).second;
       else {
          char tmp[64];
          std::sprintf(tmp, "<UNKNOWN TOKEN-ID: %i>", int(TokenID));
          error_string = std::string(tmp);
          return error_string;
       }
    }


}
