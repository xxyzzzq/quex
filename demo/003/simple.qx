// -*- C++ -*-
start = PROGRAM

header {
#include <cstdlib>  // C++ adapted 'stdlib.h'
//                  // gets:  atoi(const char*) 
}

define {
    // -*- C -*- // just to color it in emacs
    // Pattern definitions for example application
    P_WHITESPACE  	  [ \t\n]
    P_IDENTIFIER          [a-zA-Z]+
}

token {
    IDENTIFIER
    NUMBER
    OK
    COPYRIGHT
    DJAMEEL
    ALPHA
    INFINITY
    CLOSE_FRENCH_QUOTE
    OPEN_FRENCH_QUOTE
    L_BRACKET
    R_BRACKET
    ARROW
    DEGREE_CELSIUS
    PI
    ALLMOST_EQUAL
}

mode END_OF_FILE :
<inheritable: only>  
{    
    <<EOF>> {
	self.send(quex::token::ID_TERMINATION);
        RETURN;
    }
}


mode PROGRAM :
     END_OF_FILE
{
    "✓"                   => TKN_OK;
    "©"                   => TKN_COPYRIGHT;
    "ليمج"                => TKN_DJAMEEL;
    "α"                   => TKN_ALPHA;
    "π"                   => TKN_PI;
    "∞"                   => TKN_INFINITY;
    "»"                   => TKN_CLOSE_FRENCH_QUOTE;
    "«"                   => TKN_OPEN_FRENCH_QUOTE;
    "→"                   => TKN_ARROW;
    "("                   => TKN_L_BRACKET;
    ")"                   => TKN_R_BRACKET;
    "≈"                   => TKN_ALLMOST_EQUAL;
    "°"{P_WHITESPACE}*"C" => TKN_DEGREE_CELSIUS;

    [0-9]+("."[0-9]+)?    => TKN_NUMBER;
    [٠-٩]+("."[٠-٩]+)?    => TKN_NUMBER;   // arabic         ($660-$669)
    [۰-۹]+("."[۰-۹]+)?    => TKN_NUMBER;   // eastern arabic ($6F0-$6F9)
    [०-९]+("."[०-९]+)?    => TKN_NUMBER;   // devangari      ($966-$96F)
    [๐-๙]+("."[๐-๙]+)?    => TKN_NUMBER;   // thai           ($E50-$E5F)
    ([A-Za-z]|[äüö])+     { self.send(TKN_IDENTIFIER, Lexeme); }
    {P_WHITESPACE} { }
}

