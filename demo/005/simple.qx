// -*- C++ -*-

header {
extern QUEX_TYPE_CHARACTER  EmptyLexeme;
}

body {
    size_t  letter_count;
    size_t  include_depth;  /* Track the include depth for fun */
}

init {
    letter_count  = 0;
    include_depth = 0;
}

memento {
    size_t my_letter_count_store;
}

memento_pack {
    memento->my_letter_count_store = self.letter_count;
    self.letter_count = 0;
    self.include_depth += 1;
}

memento_unpack {
    self.letter_count = memento->my_letter_count_store;
    self.include_depth -= 1;
}

token {
   INCLUDE
   IDENTIFIER
   BRACKET_OPEN
   BRACKET_CLOSE
   NUMBER
}

mode ONE_AND_ONLY
{
    <<EOF>> {
	    self.send(QUEX_TKN_TERMINATION, &EmptyLexeme);
        for(int i=0; i<self.include_depth; ++i) std::cout << "    ";
        std::cout << "Per File Letter Count = " << self.letter_count << std::endl;
        RETURN;
    }

    "("         => QUEX_TKN_BRACKET_OPEN(&EmptyLexeme);
    ")"         => QUEX_TKN_BRACKET_CLOSE(&EmptyLexeme);
    //
    "include"   { self.send(QUEX_TKN_INCLUDE, &EmptyLexeme); self.letter_count += strlen((char*)Lexeme); }
    //
    ([_a-zA-Z]|("/"|"."|"'"))+  { self.send(QUEX_TKN_IDENTIFIER, Lexeme); self.letter_count += strlen((char*)Lexeme); }
    [ \t\r\n]+                  { }
}



