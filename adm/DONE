(*) 07y8m9d:

    Unify Exception Handling

(*) 07y5m24d:

    Check for the \u and \U implementations for uni-code on non-control 
    characters.

(*) 07y8m28d from 07y5m16:

    Either delete the .finalize stuff from the state machine or do something
    meaningful.

(*) 07y8m28d from 07y5m13:
    generator.regular_expression.snap_utf8 ...

    straighten out the 'reading' of an utf8 character in non_control_chars, string
    and 'set'. All of them refer to different functions. The whole setup should 
    only take one single core when one deals with the backslashed characters.
    The issue here is the different handling of backslashed characters. Probably
    the backslashed chars should be passes as an argument.

(*) from ... 07y5m26d:

    common option switch structure of type

    this allows switches to be defined on the compiler line
    and enable at the same time default values

    #if  ! defined(QUEX_OPTION__BLAH_OFF) && ! defined(QUEX_OPTION__BLAH_ON)
    #    define QUEX_OPTION__BLAH  ON
    #endif

   straighten out the QUEX_OPTION definitions for virtual functions.

   maybee use __QUEX_OPTIONS which are not to be changed by the user after
   the engine has been build.

(*) 07y8m9d from 07y6m7d:

    NOTE: for the inclusion of inconv:
          python tells about the byte order (little or big endian)
          in the variable sys.byteorder

(*) 07y8m3d from 07y7m29d:

   Implement unput/more/less for the quex core engine.
   Called it: move_forward, move_backward!

(*) 07y6m30d:

    the state machine providing information about the pattern
    containing newlines, fixed character lenghes or even fixed
    column numbers

    The main framework for this has been created, only implement the 
    functions 'count_line' and 'count_column' and implement the 
    algorithms inside the state machines to detect it propperly.


(*) 07y7m10d:

    In documentation: warn about indentation if pattern contains more than one newline, such as
                      "if\nelse\n"  Then indentation is only triggered for the last line.

		      if you cut a tree with a knife, do not cut your fingers! haha.

(*) 07y6m30d from 07y6m18d:

    Test the <<FAIL>> real action with a 'code fragment' i.e. file and line references.

(*) 07y6m2d from 07y5m11:

    straighten out the '#line' pragmas for the compiler

(*) 07y5m10d
    Carriage Return / Newline Problem

    The '$' end of line might be implemented as a post-condition '\n|\r\n'
    in order to be compatible with all operating systems. A command line option
    '--no-carriage-return-post-condition' may disable this feature for people
    who are extremely performance oriented (gain probably < 1us on 10.0000 lines).
    This option has more a psychological value: If you are afraid that this
    safety brakes down your application, don't worry you can disable it.

    NOTE: It may be better to introduce a flag '--use-carriage-return-newline'
          indicating that $ refers to \r\n. Note that a lexical analyzer may be
	  configured for a particular operating system, thus two different
	  source codes need to be produced for two different osses.

    NOTE: Consider also the '.' (anything but newline) for those changes.

(*) 07y5m15d:

    There was a unit test for backward reload of buffers in generator/TEST
    check that and implement it.

(*) 07y5m17d:

    buffer/buffer constructore rethink the buffer size vs. content size.
    (causes unit tests to fail). check carefully.

(*) 07y5m16:

    Consider test-simple-4.py in core../generator/TEST

    Concluded that .* and x* pattern definitions do not make the slightest sense,
    see comment in function __check_nothing_is_just_fine() in generator.core.py

(*) 07y5m15d:

    Disallow a single '.*' because even EOF would fit and the lexical analyser would 
    keep returning 'success'. But it may be allowed, if EOF is triggered separately. 

    See the function '__check_for_nothing_is_fine()' that raises an exception if the
    condition is not met, that an explicit EOF is defined in case that a pattern
    says 'nothing is fine'.

(*) 07y5m14d from 07y5m10d:
    Unit tests for REENTRY, i.e. CONTINUE / YY_BREAK in pattern action pairs.
    (note, the 'input' is not read again when CONTINUE is called)

(*) 07y5m14d:
    Unit test for mode changes



