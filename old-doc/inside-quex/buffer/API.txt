The extreme efficiency mentioned in the last section is payed off, though, by
some deveilement of the buffer internals to its API.  This is not beautiful,
from a design prespective, but---well, very efficient. The following
operations need to be implemented for the buffer:

-`get\_forward()`: increments the pointer to the current character and returns the content.
            If a limit is reached, then a limiting character code is returned. Again, this has not
	    to be checked before the transition check, because if it is a limit character it drops
	    out anyway.
-`get\_backward()`: decrements the pointer to the current character and returns the content.
            If a limit is reached, then a limiting character code is returned the same way as above.
	    
-`tell\_adr()`:         returns the position of the 'current' pointer _in memory_.
-`seek\_adr(position)`: sets the 'current' pointer to the position given as first argument. The
                                first argument, therefore, designates _a memory address_---not 
				a stream position.
-`seek\_offset(const int)`: adds the given offset to the 'current' pointer.

This interface requires some care to be taken\footnote{Note, that this API is only 'used'
by code that is autogenerated. The human end-user is not confronted with
such a 'fragile' interface.}. It is not possible to call _get\_forward()_ blindly and get
the whole stream of data. If a limiting character is returned, _it is mandatory_ to call 
{\tt load\_forward()} and {\tt get\_forward()} again. This spares the comparison
against end of buffer and end of file at each 'get'\footnote{Instead, a
'get' is not more than a pointer increment and a dereferencation}. The function {\tt get\_backward()}
works in exactly the same manner.
    
The positioning functions {\tt tell\_adr()} and {\tt seek\_adr()} are implemented with the same
spirit of stingyness. The return and receive memory addresses. Thus, any address taken with 'tell'
needs to be adapted at after any call to {\tt load\_forward} or {\tt load\_backward()}\footnote{Again, such
a requirement on the usage is nearly insane to be demanded from a human user. Quexs code generator, though,
has no problem with that.}. The {\tt seek\_offset()} function currently only adds a value to the
'current' pointer\footnote{When the {\tt NDEBUG} flag is not set, it is checked wether the result is inside
the boundaries of the buffer}. This function, actually, only used for unit tests. During analysis
the absolut addressing functions are applied.
	

