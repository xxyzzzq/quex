--(Path Definitions)----------------------------------------------------

    const QUEX_TYPE_CHARACTER  path_6[11] = { 103, 114, 117, 110, 105, 98, 97, 108, 100, 105, 0x0};
    const QUEX_TYPE_CHARACTER  path_17[6] = { 102, 114, 105, 116, 122, 0x0};
    const QUEX_TYPE_CHARACTER  path_1[5] = { 111, 116, 116, 111, 0x0};
    const QUEX_TYPE_CHARACTER* path_6_end = path_6 + 11;
    const QUEX_TYPE_CHARACTER* path_1_end = path_1 + 5;
    const QUEX_TYPE_CHARACTER* path_17_end = path_17 + 6;


--(Pathwalker Code)-----------------------------------------------------

    __quex_assert(false); /* No drop-through between states */
STATE_1:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_1");
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_1 + 0");
    path_iterator = path_1 + 0;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_6:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_6");
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 0");
    path_iterator = path_6 + 0;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_17:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_17");
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_17 + 0");
    path_iterator = path_17 + 0;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
PATH_WALKER_23:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: PATH_WALKER_23");
STATE_23_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_23_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);

    if( input == *path_iterator) {
        ++path_iterator;
        goto PATH_WALKER_23;
    } else if(*path_iterator == (QUEX_TYPE_CHARACTER)(0)) {
        QUEX_NAME(Buffer_input_p_decrement)(&me->buffer);
        if(        path_iterator == path_1_end) {
        goto STATE_5;
        } else if(        path_iterator == path_6_end) {
        goto STATE_16;
        } else if(        path_iterator == path_17_end) {
        goto STATE_22;
        }
    }
    if( input < 20) {
        if( input == 10) {
            goto STATE_1;    /* '\n' */
        } else {
            goto STATE_23_DROP_OUT;    /* [-oo, '\t'] */
        }
    } else {
        if( input < 64) {
            if( input == 20) {
                goto STATE_2;    /* \20 */
            } else {
                goto STATE_23_DROP_OUT_DIRECT;    /* [\21, '?'] */
            }
        } else {
            if( input == 64) {
                goto STATE_1;    /* '@' */
            } else {
                goto STATE_23_DROP_OUT_DIRECT;    /* ['A', oo] */
            }
        }
    }

STATE_23_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_23_DROP_OUT");
    if(   (input != QUEX_SETTING_BUFFER_LIMIT_CODE) 
        ||  (me->buffer._memory._end_of_file_p != 0x0) ) {
STATE_23_DROP_OUT_DIRECT:
        QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_23_DROP_OUT_DIRECT");
        QUEX_GOTO_last_acceptance();

    }

    QUEX_NAME(buffer_reload_forward_LA_PC)(&me->buffer, &last_acceptance_input_position,
                                       post_context_start_position, PostContextStartPositionN);
    goto STATE_23_INPUT;


--(Involved State Indices)----------------------------------------------

set([1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 17L, 18L, 19L, 20L, 21L])

