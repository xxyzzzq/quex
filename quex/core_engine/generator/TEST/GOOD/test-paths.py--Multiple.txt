--(Path Definitions)----------------------------------------------------

    const QUEX_TYPE_CHARACTER      path_walker_23_base[23]        = {
    111, 116, 116, 111, QUEX_SETTING_PATH_TERMINATION_CODE, /* 'o''t''t''o' */
    103, 114, 117, 110, 105, 98, 97, 108, 100, 105, QUEX_SETTING_PATH_TERMINATION_CODE, /* 'g''r''u''n''i''b''a''l''d''i' */
    102, 114, 105, 116, 122, QUEX_SETTING_PATH_TERMINATION_CODE, /* 'f''r''i''t''z' */

    };
    const QUEX_TYPE_CHARACTER*     path_6                         = path_walker_23_base + 5;
    const QUEX_TYPE_CHARACTER*     path_17                        = path_walker_23_base + 16;
    QUEX_TYPE_GOTO_LABEL           path_end_state                 = QUEX_GOTO_STATE_LABEL_INIT_VALUE;
    const QUEX_TYPE_CHARACTER*     path_1                         = path_walker_23_base + 0;


--(Pathwalker Code)-----------------------------------------------------


    __quex_assert_no_passage();
_1:
    __quex_debug_state(1);
    path_end_state                 = QUEX_LABEL(5);
    path_iterator                  = path_1 + 0;
goto _23;

    __quex_assert_no_passage();
_23:

    __quex_debug_state(23);
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    if( input == *path_iterator ) {
        ++path_iterator;
        goto _23;
    } else if( *path_iterator == QUEX_SETTING_PATH_TERMINATION_CODE ) {
        --(me->buffer._input_p);

        QUEX_GOTO_STATE(path_end_state);
        }

    switch( input ) {
        case 0x0:     QUEX_GOTO_RELOAD(__RELOAD_FORWARD, QUEX_LABEL(23), QUEX_LABEL(24));
        case 0xA:     goto _1;
        case 0x14:    goto _2;
        case 0x40:    goto _1;
    }
_24:
goto __TERMINAL_ROUTER; 

--(Involved State Indices)----------------------------------------------

set([1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 17L, 18L, 19L, 20L, 21L])

