--(Path Definitions)----------------------------------------------------

    const QUEX_TYPE_CHARACTER  path_6[11] = { 103, 114, 117, 110, 105, 98, 97, 108, 100, 105, 0x0};
    const QUEX_TYPE_CHARACTER  path_17[6] = { 102, 114, 105, 116, 122, 0x0};
    const QUEX_TYPE_CHARACTER  path_1[5] = { 111, 116, 116, 111, 0x0};
    const QUEX_TYPE_CHARACTER* path_6_end = path_6 + 11;
    const QUEX_TYPE_CHARACTER* path_1_end = path_1 + 5;
    const QUEX_TYPE_CHARACTER* path_17_end = path_17 + 6;


--(Pathwalker Code)-----------------------------------------------------

    __quex_assert(false); /* No drop-through between states */
STATE_1:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_1");
STATE_1_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_1_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_1 + 0");
    path_iterator = path_1 + 0;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_2:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_2");
STATE_2_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_2_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_1 + 1");
    path_iterator = path_1 + 1;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_3:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_3");
STATE_3_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_3_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_1 + 2");
    path_iterator = path_1 + 2;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_4:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_4");
STATE_4_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_4_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_1 + 3");
    path_iterator = path_1 + 3;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_6:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_6");
STATE_6_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_6_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 0");
    path_iterator = path_6 + 0;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_7:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_7");
STATE_7_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_7_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 1");
    path_iterator = path_6 + 1;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_8:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_8");
STATE_8_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_8_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 2");
    path_iterator = path_6 + 2;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_9:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_9");
STATE_9_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_9_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 3");
    path_iterator = path_6 + 3;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_10:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_10");
STATE_10_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_10_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 4");
    path_iterator = path_6 + 4;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_11:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_11");
STATE_11_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_11_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 5");
    path_iterator = path_6 + 5;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_12:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_12");
STATE_12_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_12_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 6");
    path_iterator = path_6 + 6;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_13:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_13");
STATE_13_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_13_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 7");
    path_iterator = path_6 + 7;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_14:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_14");
STATE_14_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_14_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 8");
    path_iterator = path_6 + 8;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_15:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_15");
STATE_15_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_15_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_6 + 9");
    path_iterator = path_6 + 9;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_17:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_17");
STATE_17_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_17_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_17 + 0");
    path_iterator = path_17 + 0;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_18:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_18");
STATE_18_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_18_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_17 + 1");
    path_iterator = path_17 + 1;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_19:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_19");
STATE_19_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_19_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_17 + 2");
    path_iterator = path_17 + 2;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_20:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_20");
STATE_20_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_20_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_17 + 3");
    path_iterator = path_17 + 3;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
STATE_21:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_21");
STATE_21_INPUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_21_INPUT");

    QUEX_NAME(Buffer_input_p_increment)(&me->buffer);
    input = QUEX_NAME(Buffer_input_get)(&me->buffer);
    QUEX_DEBUG_PRINT2(&me->buffer, "path_iterator = %s", "path_17 + 4");
    path_iterator = path_17 + 4;
    goto PATH_WALKER_23;

    __quex_assert(false); /* No drop-through between states */
PATH_WALKER_23:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: PATH_WALKER_23");

    if( input == *path_iterator) {
        ++path_iterator;
PATH_WALKER_23_STATE_ROUTER:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: PATH_WALKER_23_STATE_ROUTER");

        if(path_iterator >= path_1 && path_iterator < path_1_end) {
            switch((int)(path_iterator - path_1)) {
            case 0: goto STATE_1;
            case 1: goto STATE_2;
            case 2: goto STATE_3;
            case 3: goto STATE_4;
            case 4: goto STATE_5;            }
        } else if(path_iterator >= path_6 && path_iterator < path_6_end) {
            switch((int)(path_iterator - path_6)) {
            case 0: goto STATE_6;
            case 1: goto STATE_7;
            case 2: goto STATE_8;
            case 3: goto STATE_9;
            case 4: goto STATE_10;
            case 5: goto STATE_11;
            case 6: goto STATE_12;
            case 7: goto STATE_13;
            case 8: goto STATE_14;
            case 9: goto STATE_15;
            case 10: goto STATE_16;            }
        } else if(path_iterator >= path_17 && path_iterator < path_17_end) {
            switch((int)(path_iterator - path_17)) {
            case 0: goto STATE_17;
            case 1: goto STATE_18;
            case 2: goto STATE_19;
            case 3: goto STATE_20;
            case 4: goto STATE_21;
            case 5: goto STATE_22;            }
        }
}
    if( input < 20) {
        if( input == 10) {
            goto STATE_1;    /* '\n' */
        } else {
            goto STATE_23_DROP_OUT;    /* [-oo, '\t'] */
        }
    } else {
        if( input < 64) {
            if( input == 20) {
                goto STATE_2;    /* \20 */
            } else {
                goto STATE_23_DROP_OUT_DIRECT;    /* [\21, '?'] */
            }
        } else {
            if( input == 64) {
                goto STATE_1;    /* '@' */
            } else {
                goto STATE_23_DROP_OUT_DIRECT;    /* ['A', oo] */
            }
        }
    }

STATE_23_DROP_OUT:
    QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_23_DROP_OUT");
    if(   (input != QUEX_SETTING_BUFFER_LIMIT_CODE) 
        ||  (me->buffer._memory._end_of_file_p != 0x0) ) {
STATE_23_DROP_OUT_DIRECT:
        QUEX_DEBUG_PRINT(&me->buffer, "LABEL: STATE_23_DROP_OUT_DIRECT");
        QUEX_GOTO_last_acceptance();

    }

    QUEX_NAME(buffer_reload_forward_LA_PC)(&me->buffer, &last_acceptance_input_position,
                                       post_context_start_position, PostContextStartPositionN);
        goto PATH_WALKER_23_STATE_ROUTER;


--(Involved State Indices)----------------------------------------------

set([1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 17L, 18L, 19L, 20L, 21L])

