(1) |[\v\a] => grid variable;>|

Spaces:
Grids:
    variable by '\a', '\v'
Bad:
    
Newline:
    init-state = 0L
    00000() <~ 
          == '\n' ==> 00001
          == '\r' ==> 00002
          <no epsilon>
    00001(A, S) <~ 
          <no epsilon>
    00002() <~ 
          == '\n' ==> 00001
          <no epsilon>
    
Suppressor:
    <none>


(2) |[\v\a] => grid variable kongo;>|

test_string:1:error: Missing ';' after indentation 'grid' specification.
Exception!

(3) |[\v\a] => space variable2;>|

Spaces:
    variable2 by '\a', '\v'
Grids:
Bad:
    
Newline:
    init-state = 0L
    00000() <~ 
          == '\n' ==> 00001
          == '\r' ==> 00002
          <no epsilon>
    00001(A, S) <~ 
          <no epsilon>
    00002() <~ 
          == '\n' ==> 00001
          <no epsilon>
    
Suppressor:
    <none>


(4) |[\v\a] => space variable 2;>|

test_string:1:error: Missing ';' after indentation 'space' specification.
Exception!

(5) |>|

Spaces:
      1 by ' '
Grids:
      4 by '\t'
Bad:
    
Newline:
    init-state = 0L
    00000() <~ 
          == '\n' ==> 00001
          == '\r' ==> 00002
          <no epsilon>
    00001(A, S) <~ 
          <no epsilon>
    00002() <~ 
          == '\n' ==> 00001
          <no epsilon>
    
Suppressor:
    <none>


(6) |/* empty will do */>|

Spaces:
      1 by ' '
Grids:
      4 by '\t'
Bad:
    
Newline:
    init-state = 0L
    00000() <~ 
          == '\n' ==> 00001
          == '\r' ==> 00002
          <no epsilon>
    00001(A, S) <~ 
          <no epsilon>
    00002() <~ 
          == '\n' ==> 00001
          <no epsilon>
    
Suppressor:
    <none>


