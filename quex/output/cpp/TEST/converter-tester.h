/* vim: set filetype=cpp:  -*- C++ -*-
 *
 * Declaration of all converter functions towards 'utf8', 'utf16', 'utf32',
 * 'char', and 'wchar_t': 
 *
 *    QUEX_CONVERTER_CHAR_DEF(cp037, utf8)(...)
 *    QUEX_CONVERTER_CHAR_DEF(cp037, utf16)(...)
 *    QUEX_CONVERTER_CHAR_DEF(cp037, utf32)(...)
 *    QUEX_CONVERTER_CHAR_DEF(cp037, char)(...)
 *    QUEX_CONVERTER_CHAR_DEF(cp037, wchar_t)(...)
 *
 *    QUEX_CONVERTER_STRING_DEF(cp037, utf8)(...)     for string and buffer 
 *    QUEX_CONVERTER_STRING_DEF(cp037, utf16)(...)    for string and buffer 
 *    QUEX_CONVERTER_STRING_DEF(cp037, utf32)(...)    for string and buffer 
 *    QUEX_CONVERTER_STRING_DEF(cp037, char)(...)     for string and buffer 
 *    QUEX_CONVERTER_STRING_DEF(cp037, wchar_t)(...)  for string and buffer 
 *
 * The declarations are generated by the file:
 *
 *             ../generator/declarations.g
 *
 * These functions ARE DEPENDENT on QUEX_TYPE_CHARACTER.
 * => Thus, they are placed in the analyzer's namespace.
 *
 * (C) 2012 Frank-Rene Schaefer. 
 *     ABSOLUTELY NO WARRANTY                                                */
/* 2010 (C) Frank-Rene Schaefer; ABSOLUTELY NO WARRANTY */
#if    ! defined(__QUEX_INCLUDE_GUARD__CONVERTER_HELPER__cp037__) \
    ||   defined(__QUEX_INCLUDE_GUARD__CONVERTER_HELPER__TMP_DISABLED)
#if    ! defined(__QUEX_INCLUDE_GUARD__CONVERTER_HELPER__TMP_DISABLED)
#        define  __QUEX_INCLUDE_GUARD__CONVERTER_HELPER__cp037__
#endif

#include <quex/code_base/converter_helper/common.h>

QUEX_NAMESPACE_MAIN_OPEN

#define __QUEX_FROM                cp037
#define __QUEX_FROM_TYPE           QUEX_TYPE_CHARACTER

#include <quex/code_base/converter_helper/generator/declarations.g>

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__CONVERTER_HELPER__cp037__ */

/* -*- C++ -*- vim: set syntax=cpp:
 * PURPOSE: 
 *
 * Provide the implementation of character and string converter functions
 * FROM the buffer's cp037 to utf8, utf16, utf32, char, and wchar_t.
 *
 * STEPS:
 *
 * (1) Implement the character converters from buffer's cp037 to 
 *     utf8, utf16, utf32. Those come out of quex's code generator.
 *
 * (1b) Derive the converts from cp037 to char and wchar_t from
 *      those converters. For this use:
 *
 *          "../generator/character-converter-char-wchar_t.gi"
 *
 * (2) Generate the implementation of the string converters in terms
 *     of those character converters.
 *
 *     Use: "../generator/implementation-string-converters.gi"
 *
 *          which uses
 *
 *              "../generator/string-converter.gi"
 *
 *          to implement each string converter from the given 
 *          character converters. 
 *
 * These functions ARE DEPENDENT on QUEX_TYPE_CHARACTER.
 * => Thus, they are placed in the analyzer's namespace.
 *
 * 2010 (C) Frank-Rene Schaefer; 
 * ABSOLUTELY NO WARRANTY                                                    */
#if    ! defined(__QUEX_INCLUDE_GUARD__CONVERTER_HELPER__cp037_I) \
    ||   defined(__QUEX_INCLUDE_GUARD__CONVERTER_HELPER__TMP_DISABLED)
#if    ! defined(__QUEX_INCLUDE_GUARD__CONVERTER_HELPER__TMP_DISABLED)
#        define  __QUEX_INCLUDE_GUARD__CONVERTER_HELPER__cp037_I
#endif

#include "converter-tester.h"

QUEX_NAMESPACE_MAIN_OPEN

QUEX_INLINE void
QUEX_CONVERTER_CHAR_DEF(cp037, utf32)(const QUEX_TYPE_CHARACTER** input_pp,
                                          uint32_t**                  output_pp)
{
    uint16_t             unicode = (uint32_t)0;
    QUEX_TYPE_CHARACTER  input   = *(*input_pp)++;
    if( input < 0x000074 ) {
        if( input < 0x000047 ) {
            if( input < 0x000026 ) {
                if( input < 0x000015 ) {
                    if( input < 0x000007 ) {
                        if( input < 0x000005 ) {
                            if( input < 0x000004 ) {
                                unicode = (uint32_t)input;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000098;
                            }
                        } else {
                        
                            if( input < 0x000006 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000004;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000080;
                            }
                        }
                    } else {
                    
                        if( input < 0x000009 ) {
                            if( input < 0x000008 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000078;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00008F;
                            }
                        } else {
                        
                            if( input < 0x00000B ) {
                                unicode = (uint32_t)input + (uint32_t)0x000084;
                            } else {
                            
                                if( input < 0x000014 ) {
                                    unicode = (uint32_t)input;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000089;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x00001A ) {
                        if( input < 0x000017 ) {
                            if( input < 0x000016 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000070;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000E;
                            }
                        } else {
                        
                            if( input < 0x000018 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000070;
                            } else {
                            
                                unicode = (uint32_t)input;
                            }
                        }
                    } else {
                    
                        if( input < 0x00001C ) {
                            if( input < 0x00001B ) {
                                unicode = (uint32_t)input + (uint32_t)0x000078;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000074;
                            }
                        } else {
                        
                            if( input < 0x000020 ) {
                                unicode = (uint32_t)input;
                            } else {
                            
                                if( input < 0x000025 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000060;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00001B;
                                }
                            }
                        }
                    }
                }
            } else {
            
                if( input < 0x00003C ) {
                    if( input < 0x000030 ) {
                        if( input < 0x000028 ) {
                            if( input < 0x000027 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00000F;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000C;
                            }
                        } else {
                        
                            if( input < 0x00002D ) {
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000028;
                            }
                        }
                    } else {
                    
                        if( input < 0x000033 ) {
                            if( input < 0x000032 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00001C;
                            }
                        } else {
                        
                            if( input < 0x000037 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                            } else {
                            
                                if( input < 0x000038 ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000033;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000060;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x000041 ) {
                        if( input < 0x00003F ) {
                            if( input < 0x00003E ) {
                                unicode = (uint32_t)input - (uint32_t)0x000028;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                            }
                        } else {
                        
                            if( input < 0x000040 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000025;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000020;
                            }
                        }
                    } else {
                    
                        if( input < 0x000043 ) {
                            if( input < 0x000042 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00005F;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x0000A0;
                            }
                        } else {
                        
                            if( input < 0x000044 ) {
                                unicode = (uint32_t)input + (uint32_t)0x0000A1;
                            } else {
                            
                                if( input < 0x000046 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x00009C;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x00009D;
                                }
                            }
                        }
                    }
                }
            }
        } else {
        
            if( input < 0x00005D ) {
                if( input < 0x000050 ) {
                    if( input < 0x00004B ) {
                        if( input < 0x000049 ) {
                            if( input < 0x000048 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00009E;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00009F;
                            }
                        } else {
                        
                            if( input < 0x00004A ) {
                                unicode = (uint32_t)input + (uint32_t)0x0000A8;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000058;
                            }
                        }
                    } else {
                    
                        if( input < 0x00004D ) {
                            if( input < 0x00004C ) {
                                unicode = (uint32_t)input - (uint32_t)0x00001D;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000010;
                            }
                        } else {
                        
                            if( input < 0x00004E ) {
                                unicode = (uint32_t)input - (uint32_t)0x000025;
                            } else {
                            
                                if( input < 0x00004F ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000023;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x00002D;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x000058 ) {
                        if( input < 0x000054 ) {
                            if( input < 0x000051 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00002A;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000098;
                            }
                        } else {
                        
                            if( input < 0x000055 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000094;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000098;
                            }
                        }
                    } else {
                    
                        if( input < 0x00005A ) {
                            if( input < 0x000059 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000094;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000086;
                            }
                        } else {
                        
                            if( input < 0x00005B ) {
                                unicode = (uint32_t)input - (uint32_t)0x000039;
                            } else {
                            
                                if( input < 0x00005C ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000037;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000032;
                                }
                            }
                        }
                    }
                }
            } else {
            
                if( input < 0x000067 ) {
                    if( input < 0x000061 ) {
                        if( input < 0x00005F ) {
                            if( input < 0x00005E ) {
                                unicode = (uint32_t)input - (uint32_t)0x000034;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000023;
                            }
                        } else {
                        
                            if( input < 0x000060 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00004D;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000033;
                            }
                        }
                    } else {
                    
                        if( input < 0x000063 ) {
                            if( input < 0x000062 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000032;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                            }
                        } else {
                        
                            if( input < 0x000064 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000061;
                            } else {
                            
                                if( input < 0x000066 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x00005C;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x00005D;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x00006C ) {
                        if( input < 0x000069 ) {
                            if( input < 0x000068 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00005E;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00005F;
                            }
                        } else {
                        
                            if( input < 0x00006A ) {
                                unicode = (uint32_t)input + (uint32_t)0x000068;
                            } else {
                            
                                if( input < 0x00006B ) {
                                    unicode = (uint32_t)input + (uint32_t)0x00003C;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00003F;
                                }
                            }
                        }
                    } else {
                    
                        if( input < 0x00006E ) {
                            if( input < 0x00006D ) {
                                unicode = (uint32_t)input - (uint32_t)0x000047;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000E;
                            }
                        } else {
                        
                            if( input < 0x000070 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000030;
                            } else {
                            
                                if( input < 0x000071 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000088;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000058;
                                }
                            }
                        }
                    }
                }
            }
        }
    } else {
    
        if( input < 0x0000B3 ) {
            if( input < 0x000091 ) {
                if( input < 0x00007F ) {
                    if( input < 0x00007A ) {
                        if( input < 0x000078 ) {
                            if( input < 0x000075 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000054;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000058;
                            }
                        } else {
                        
                            if( input < 0x000079 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000054;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000019;
                            }
                        }
                    } else {
                    
                        if( input < 0x00007C ) {
                            if( input < 0x00007B ) {
                                unicode = (uint32_t)input - (uint32_t)0x000040;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000058;
                            }
                        } else {
                        
                            if( input < 0x00007D ) {
                                unicode = (uint32_t)input - (uint32_t)0x00003C;
                            } else {
                            
                                if( input < 0x00007E ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000056;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000041;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x00008B ) {
                        if( input < 0x000081 ) {
                            if( input < 0x000080 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00005D;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000058;
                            }
                        } else {
                        
                            if( input < 0x00008A ) {
                                unicode = (uint32_t)input - (uint32_t)0x000020;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000021;
                            }
                        }
                    } else {
                    
                        if( input < 0x00008D ) {
                            if( input < 0x00008C ) {
                                unicode = (uint32_t)input + (uint32_t)0x000030;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000064;
                            }
                        } else {
                        
                            if( input < 0x00008F ) {
                                unicode = (uint32_t)input + (uint32_t)0x000070;
                            } else {
                            
                                if( input < 0x000090 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000022;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000020;
                                }
                            }
                        }
                    }
                }
            } else {
            
                if( input < 0x0000A2 ) {
                    if( input < 0x00009D ) {
                        if( input < 0x00009B ) {
                            if( input < 0x00009A ) {
                                unicode = (uint32_t)input - (uint32_t)0x000027;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000010;
                            }
                        } else {
                        
                            if( input < 0x00009C ) {
                                unicode = (uint32_t)input + (uint32_t)0x00001F;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00004A;
                            }
                        }
                    } else {
                    
                        if( input < 0x00009F ) {
                            if( input < 0x00009E ) {
                                unicode = (uint32_t)input + (uint32_t)0x00001B;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000028;
                            }
                        } else {
                        
                            if( input < 0x0000A0 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000005;
                            } else {
                            
                                if( input < 0x0000A1 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000015;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000023;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x0000AD ) {
                        if( input < 0x0000AB ) {
                            if( input < 0x0000AA ) {
                                unicode = (uint32_t)input - (uint32_t)0x00002F;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000009;
                            }
                        } else {
                        
                            if( input < 0x0000AC ) {
                                unicode = (uint32_t)input + (uint32_t)0x000014;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000024;
                            }
                        }
                    } else {
                    
                        if( input < 0x0000B0 ) {
                            if( input < 0x0000AF ) {
                                unicode = (uint32_t)input + (uint32_t)0x000030;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000001;
                            }
                        } else {
                        
                            if( input < 0x0000B1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000052;
                            } else {
                            
                                if( input < 0x0000B2 ) {
                                    unicode = (uint32_t)input - (uint32_t)0x00000E;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00000D;
                                }
                            }
                        }
                    }
                }
            }
        } else {
        
            if( input < 0x0000D0 ) {
                if( input < 0x0000BE ) {
                    if( input < 0x0000B7 ) {
                        if( input < 0x0000B5 ) {
                            if( input < 0x0000B4 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000004;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000B;
                            }
                        } else {
                        
                            if( input < 0x0000B6 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00000E;
                            } else {
                            
                                unicode = (uint32_t)input;
                            }
                        }
                    } else {
                    
                        if( input < 0x0000BB ) {
                            if( input < 0x0000BA ) {
                                unicode = (uint32_t)input + (uint32_t)0x000005;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00005F;
                            }
                        } else {
                        
                            if( input < 0x0000BC ) {
                                unicode = (uint32_t)input - (uint32_t)0x00005E;
                            } else {
                            
                                if( input < 0x0000BD ) {
                                    unicode = (uint32_t)input - (uint32_t)0x00000D;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000015;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x0000CA ) {
                        if( input < 0x0000C0 ) {
                            if( input < 0x0000BF ) {
                                unicode = (uint32_t)input - (uint32_t)0x00000A;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000018;
                            }
                        } else {
                        
                            if( input < 0x0000C1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000045;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000080;
                            }
                        }
                    } else {
                    
                        if( input < 0x0000CC ) {
                            if( input < 0x0000CB ) {
                                unicode = (uint32_t)input - (uint32_t)0x00001D;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000029;
                            }
                        } else {
                        
                            if( input < 0x0000CD ) {
                                unicode = (uint32_t)input + (uint32_t)0x00002A;
                            } else {
                            
                                if( input < 0x0000CF ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000025;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000026;
                                }
                            }
                        }
                    }
                }
            } else {
            
                if( input < 0x0000EA ) {
                    if( input < 0x0000DD ) {
                        if( input < 0x0000DA ) {
                            if( input < 0x0000D1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000053;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000087;
                            }
                        } else {
                        
                            if( input < 0x0000DB ) {
                                unicode = (uint32_t)input - (uint32_t)0x000021;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000020;
                            }
                        }
                    } else {
                    
                        if( input < 0x0000E0 ) {
                            if( input < 0x0000DF ) {
                                unicode = (uint32_t)input + (uint32_t)0x00001C;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000020;
                            }
                        } else {
                        
                            if( input < 0x0000E1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000084;
                            } else {
                            
                                if( input < 0x0000E2 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000016;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00008F;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x0000F0 ) {
                        if( input < 0x0000EC ) {
                            if( input < 0x0000EB ) {
                                unicode = (uint32_t)input - (uint32_t)0x000038;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000017;
                            }
                        } else {
                        
                            if( input < 0x0000ED ) {
                                unicode = (uint32_t)input - (uint32_t)0x000016;
                            } else {
                            
                                if( input < 0x0000EF ) {
                                    unicode = (uint32_t)input - (uint32_t)0x00001B;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00001A;
                                }
                            }
                        }
                    } else {
                    
                        if( input < 0x0000FB ) {
                            if( input < 0x0000FA ) {
                                unicode = (uint32_t)input - (uint32_t)0x0000C0;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000047;
                            }
                        } else {
                        
                            if( input < 0x0000FD ) {
                                unicode = (uint32_t)input - (uint32_t)0x000020;
                            } else {
                            
                                if( input < 0x0000FF ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000024;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000060;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    *(*output_pp)++ = unicode;

}

QUEX_INLINE void
QUEX_CONVERTER_CHAR_DEF(cp037, utf16)(const QUEX_TYPE_CHARACTER** input_pp,
                                          uint16_t**                  output_pp)
{
    uint32_t   unicode   = (uint32_t)0;
    uint32_t*  unicode_p = &unicode;

    QUEX_CONVERTER_CHAR(cp037, utf32)(input_pp, &unicode_p);
    *(*output_pp)++ = unicode;

}

QUEX_INLINE void
QUEX_CONVERTER_CHAR_DEF(cp037, utf8)(const QUEX_TYPE_CHARACTER**  input_pp, 
                                         uint8_t**                    output_pp)
{
    uint32_t            unicode = (uint32_t)-1;
    QUEX_TYPE_CHARACTER input   = *(*input_pp)++;
    
    if( input < 0x000074 ) {
        if( input < 0x000047 ) {
            if( input < 0x000026 ) {
                if( input < 0x000015 ) {
                    if( input < 0x000007 ) {
                        if( input < 0x000005 ) {
                            if( input < 0x000004 ) {
                                unicode = (uint32_t)input;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000098;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x000006 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000004;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000080;
                                goto two_bytes;
                            }
                        }
                    } else {
                    
                        if( input < 0x000009 ) {
                            if( input < 0x000008 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000078;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00008F;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x00000B ) {
                                unicode = (uint32_t)input + (uint32_t)0x000084;
                                goto two_bytes;
                            } else {
                            
                                if( input < 0x000014 ) {
                                    unicode = (uint32_t)input;
                                    goto one_byte;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000089;
                                    goto two_bytes;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x00001A ) {
                        if( input < 0x000017 ) {
                            if( input < 0x000016 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000070;
                                goto two_bytes;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000E;
                                goto one_byte;
                            }
                        } else {
                        
                            if( input < 0x000018 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000070;
                                goto two_bytes;
                            } else {
                            
                                unicode = (uint32_t)input;
                                goto one_byte;
                            }
                        }
                    } else {
                    
                        if( input < 0x00001C ) {
                            if( input < 0x00001B ) {
                                unicode = (uint32_t)input + (uint32_t)0x000078;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000074;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x000020 ) {
                                unicode = (uint32_t)input;
                                goto one_byte;
                            } else {
                            
                                if( input < 0x000025 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000060;
                                    goto two_bytes;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00001B;
                                    goto one_byte;
                                }
                            }
                        }
                    }
                }
            } else {
            
                if( input < 0x00003C ) {
                    if( input < 0x000030 ) {
                        if( input < 0x000028 ) {
                            if( input < 0x000027 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00000F;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000C;
                            }goto one_byte;
                        } else {
                        
                            if( input < 0x00002D ) {
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                                goto two_bytes;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000028;
                                goto one_byte;
                            }
                        }
                    } else {
                    
                        if( input < 0x000033 ) {
                            if( input < 0x000032 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                                goto two_bytes;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00001C;
                                goto one_byte;
                            }
                        } else {
                        
                            if( input < 0x000037 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                                goto two_bytes;
                            } else {
                            
                                if( input < 0x000038 ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000033;
                                    goto one_byte;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000060;
                                    goto two_bytes;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x000041 ) {
                        if( input < 0x00003F ) {
                            if( input < 0x00003E ) {
                                unicode = (uint32_t)input - (uint32_t)0x000028;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x000040 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000025;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000020;
                            }goto one_byte;
                        }
                    } else {
                    
                        if( input < 0x000043 ) {
                            if( input < 0x000042 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00005F;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x0000A0;
                            }
                        } else {
                        
                            if( input < 0x000044 ) {
                                unicode = (uint32_t)input + (uint32_t)0x0000A1;
                            } else {
                            
                                if( input < 0x000046 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x00009C;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x00009D;
                                }
                            }
                        }goto two_bytes;
                    }
                }
            }
        } else {
        
            if( input < 0x00005D ) {
                if( input < 0x000050 ) {
                    if( input < 0x00004B ) {
                        if( input < 0x000049 ) {
                            if( input < 0x000048 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00009E;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00009F;
                            }
                        } else {
                        
                            if( input < 0x00004A ) {
                                unicode = (uint32_t)input + (uint32_t)0x0000A8;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000058;
                            }
                        }goto two_bytes;
                    } else {
                    
                        if( input < 0x00004D ) {
                            if( input < 0x00004C ) {
                                unicode = (uint32_t)input - (uint32_t)0x00001D;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000010;
                            }
                        } else {
                        
                            if( input < 0x00004E ) {
                                unicode = (uint32_t)input - (uint32_t)0x000025;
                            } else {
                            
                                if( input < 0x00004F ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000023;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x00002D;
                                }
                            }
                        }goto one_byte;
                    }
                } else {
                
                    if( input < 0x000058 ) {
                        if( input < 0x000054 ) {
                            if( input < 0x000051 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00002A;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000098;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x000055 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000094;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000098;
                            }goto two_bytes;
                        }
                    } else {
                    
                        if( input < 0x00005A ) {
                            if( input < 0x000059 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000094;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000086;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x00005B ) {
                                unicode = (uint32_t)input - (uint32_t)0x000039;
                            } else {
                            
                                if( input < 0x00005C ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000037;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000032;
                                }
                            }goto one_byte;
                        }
                    }
                }
            } else {
            
                if( input < 0x000067 ) {
                    if( input < 0x000061 ) {
                        if( input < 0x00005F ) {
                            if( input < 0x00005E ) {
                                unicode = (uint32_t)input - (uint32_t)0x000034;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000023;
                            }goto one_byte;
                        } else {
                        
                            if( input < 0x000060 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00004D;
                                goto two_bytes;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000033;
                                goto one_byte;
                            }
                        }
                    } else {
                    
                        if( input < 0x000063 ) {
                            if( input < 0x000062 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000032;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000060;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x000064 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000061;
                            } else {
                            
                                if( input < 0x000066 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x00005C;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x00005D;
                                }
                            }goto two_bytes;
                        }
                    }
                } else {
                
                    if( input < 0x00006C ) {
                        if( input < 0x000069 ) {
                            if( input < 0x000068 ) {
                                unicode = (uint32_t)input + (uint32_t)0x00005E;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00005F;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x00006A ) {
                                unicode = (uint32_t)input + (uint32_t)0x000068;
                                goto two_bytes;
                            } else {
                            
                                if( input < 0x00006B ) {
                                    unicode = (uint32_t)input + (uint32_t)0x00003C;
                                    goto two_bytes;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00003F;
                                    goto one_byte;
                                }
                            }
                        }
                    } else {
                    
                        if( input < 0x00006E ) {
                            if( input < 0x00006D ) {
                                unicode = (uint32_t)input - (uint32_t)0x000047;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000E;
                            }goto one_byte;
                        } else {
                        
                            if( input < 0x000070 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000030;
                                goto one_byte;
                            } else {
                            
                                if( input < 0x000071 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000088;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000058;
                                }goto two_bytes;
                            }
                        }
                    }
                }
            }
        }
    } else {
    
        if( input < 0x0000B3 ) {
            if( input < 0x000091 ) {
                if( input < 0x00007F ) {
                    if( input < 0x00007A ) {
                        if( input < 0x000078 ) {
                            if( input < 0x000075 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000054;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000058;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x000079 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000054;
                                goto two_bytes;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000019;
                                goto one_byte;
                            }
                        }
                    } else {
                    
                        if( input < 0x00007C ) {
                            if( input < 0x00007B ) {
                                unicode = (uint32_t)input - (uint32_t)0x000040;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000058;
                            }
                        } else {
                        
                            if( input < 0x00007D ) {
                                unicode = (uint32_t)input - (uint32_t)0x00003C;
                            } else {
                            
                                if( input < 0x00007E ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000056;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000041;
                                }
                            }
                        }goto one_byte;
                    }
                } else {
                
                    if( input < 0x00008B ) {
                        if( input < 0x000081 ) {
                            if( input < 0x000080 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00005D;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000058;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x00008A ) {
                                unicode = (uint32_t)input - (uint32_t)0x000020;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000021;
                                goto two_bytes;
                            }
                        }
                    } else {
                    
                        if( input < 0x00008D ) {
                            if( input < 0x00008C ) {
                                unicode = (uint32_t)input + (uint32_t)0x000030;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000064;
                            }
                        } else {
                        
                            if( input < 0x00008F ) {
                                unicode = (uint32_t)input + (uint32_t)0x000070;
                            } else {
                            
                                if( input < 0x000090 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000022;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000020;
                                }
                            }
                        }goto two_bytes;
                    }
                }
            } else {
            
                if( input < 0x0000A2 ) {
                    if( input < 0x00009D ) {
                        if( input < 0x00009B ) {
                            if( input < 0x00009A ) {
                                unicode = (uint32_t)input - (uint32_t)0x000027;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000010;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x00009C ) {
                                unicode = (uint32_t)input + (uint32_t)0x00001F;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x00004A;
                            }goto two_bytes;
                        }
                    } else {
                    
                        if( input < 0x00009F ) {
                            if( input < 0x00009E ) {
                                unicode = (uint32_t)input + (uint32_t)0x00001B;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000028;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x0000A0 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000005;
                                goto two_bytes;
                            } else {
                            
                                if( input < 0x0000A1 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000015;
                                    goto two_bytes;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000023;
                                    goto one_byte;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x0000AD ) {
                        if( input < 0x0000AB ) {
                            if( input < 0x0000AA ) {
                                unicode = (uint32_t)input - (uint32_t)0x00002F;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000009;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x0000AC ) {
                                unicode = (uint32_t)input + (uint32_t)0x000014;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000024;
                            }goto two_bytes;
                        }
                    } else {
                    
                        if( input < 0x0000B0 ) {
                            if( input < 0x0000AF ) {
                                unicode = (uint32_t)input + (uint32_t)0x000030;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000001;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x0000B1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000052;
                                goto one_byte;
                            } else {
                            
                                if( input < 0x0000B2 ) {
                                    unicode = (uint32_t)input - (uint32_t)0x00000E;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00000D;
                                }goto two_bytes;
                            }
                        }
                    }
                }
            }
        } else {
        
            if( input < 0x0000D0 ) {
                if( input < 0x0000BE ) {
                    if( input < 0x0000B7 ) {
                        if( input < 0x0000B5 ) {
                            if( input < 0x0000B4 ) {
                                unicode = (uint32_t)input + (uint32_t)0x000004;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00000B;
                            }
                        } else {
                        
                            if( input < 0x0000B6 ) {
                                unicode = (uint32_t)input - (uint32_t)0x00000E;
                            } else {
                            
                                unicode = (uint32_t)input;
                            }
                        }goto two_bytes;
                    } else {
                    
                        if( input < 0x0000BB ) {
                            if( input < 0x0000BA ) {
                                unicode = (uint32_t)input + (uint32_t)0x000005;
                                goto two_bytes;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x00005F;
                                goto one_byte;
                            }
                        } else {
                        
                            if( input < 0x0000BC ) {
                                unicode = (uint32_t)input - (uint32_t)0x00005E;
                                goto one_byte;
                            } else {
                            
                                if( input < 0x0000BD ) {
                                    unicode = (uint32_t)input - (uint32_t)0x00000D;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000015;
                                }goto two_bytes;
                            }
                        }
                    }
                } else {
                
                    if( input < 0x0000CA ) {
                        if( input < 0x0000C0 ) {
                            if( input < 0x0000BF ) {
                                unicode = (uint32_t)input - (uint32_t)0x00000A;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000018;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x0000C1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000045;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000080;
                            }goto one_byte;
                        }
                    } else {
                    
                        if( input < 0x0000CC ) {
                            if( input < 0x0000CB ) {
                                unicode = (uint32_t)input - (uint32_t)0x00001D;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000029;
                            }
                        } else {
                        
                            if( input < 0x0000CD ) {
                                unicode = (uint32_t)input + (uint32_t)0x00002A;
                            } else {
                            
                                if( input < 0x0000CF ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000025;
                                } else {
                                
                                    unicode = (uint32_t)input + (uint32_t)0x000026;
                                }
                            }
                        }goto two_bytes;
                    }
                }
            } else {
            
                if( input < 0x0000EA ) {
                    if( input < 0x0000DD ) {
                        if( input < 0x0000DA ) {
                            if( input < 0x0000D1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000053;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000087;
                            }goto one_byte;
                        } else {
                        
                            if( input < 0x0000DB ) {
                                unicode = (uint32_t)input - (uint32_t)0x000021;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000020;
                            }goto two_bytes;
                        }
                    } else {
                    
                        if( input < 0x0000E0 ) {
                            if( input < 0x0000DF ) {
                                unicode = (uint32_t)input + (uint32_t)0x00001C;
                            } else {
                            
                                unicode = (uint32_t)input + (uint32_t)0x000020;
                            }goto two_bytes;
                        } else {
                        
                            if( input < 0x0000E1 ) {
                                unicode = (uint32_t)input - (uint32_t)0x000084;
                                goto one_byte;
                            } else {
                            
                                if( input < 0x0000E2 ) {
                                    unicode = (uint32_t)input + (uint32_t)0x000016;
                                    goto two_bytes;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00008F;
                                    goto one_byte;
                                }
                            }
                        }
                    }
                } else {
                
                    if( input < 0x0000F0 ) {
                        if( input < 0x0000EC ) {
                            if( input < 0x0000EB ) {
                                unicode = (uint32_t)input - (uint32_t)0x000038;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000017;
                            }
                        } else {
                        
                            if( input < 0x0000ED ) {
                                unicode = (uint32_t)input - (uint32_t)0x000016;
                            } else {
                            
                                if( input < 0x0000EF ) {
                                    unicode = (uint32_t)input - (uint32_t)0x00001B;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x00001A;
                                }
                            }
                        }goto two_bytes;
                    } else {
                    
                        if( input < 0x0000FB ) {
                            if( input < 0x0000FA ) {
                                unicode = (uint32_t)input - (uint32_t)0x0000C0;
                                goto one_byte;
                            } else {
                            
                                unicode = (uint32_t)input - (uint32_t)0x000047;
                                goto two_bytes;
                            }
                        } else {
                        
                            if( input < 0x0000FD ) {
                                unicode = (uint32_t)input - (uint32_t)0x000020;
                            } else {
                            
                                if( input < 0x0000FF ) {
                                    unicode = (uint32_t)input - (uint32_t)0x000024;
                                } else {
                                
                                    unicode = (uint32_t)input - (uint32_t)0x000060;
                                }
                            }goto two_bytes;
                        }
                    }
                }
            }
        }
    }


one_byte:
*((*output_pp)++) = (uint8_t)unicode;
return;
two_bytes:
*((*output_pp)++) = (uint8_t)(0xC0 | (unicode >> 6)); 
*((*output_pp)++) = (uint8_t)(0x80 | (unicode & (uint32_t)0x3f));
return;

}

#define __QUEX_FROM           cp037
#define __QUEX_FROM_TYPE      QUEX_TYPE_CHARACTER

/* (1b) Derive converters to char and wchar_t from the given set 
 *      of converters. (Generator uses __QUEX_FROM and QUEX_FROM_TYPE)      */
#include <quex/code_base/converter_helper/generator/character-converter-to-char-wchar_t.gi>

/* (2) Generate string converters to utf8, utf16, utf32 based on the
 *     definitions of the character converters.                             */
#include <quex/code_base/converter_helper/generator/implementations.gi>

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__CONVERTER_HELPER__cp037_I */

