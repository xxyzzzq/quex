#spec 
       [\x0A\x0b\x0c\x85\X2028\X2029]      => newline 1;
       [\x0d]                                   => newline 0;
       [\t]                                     => grid    4;
       [\X0600-\X06FF]                         => space   3;
       [\U010000-\U10FFFF]                     => space   2;
    
<string>:7:warning: No '\else' defined in counter setup. Assume '\else => space 1;'
<string>:7:warning: ('--suppress 12' to avoid this message)
###ifdef __QUEX_OPTION_COUNTER
##void
##QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_CHARACTER* LexemeBegin, QUEX_TYPE_CHARACTER* LexemeEnd)
##{
###   define self (*me)
##    QUEX_TYPE_CHARACTER            input                          = (QUEX_TYPE_CHARACTER)(0x00);
##    (void)me;
##    __QUEX_IF_COUNT_SHIFT_VALUES();
##    /* Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)
##     * => Caller does not need to check
##     * BUT, if so quit immediately after 'shift values'. */
##    __quex_assert(LexemeBegin <= LexemeEnd);
##    if(LexemeBegin == LexemeEnd) return;
##    me->buffer._input_p = LexemeBegin;
## /* (22 from NONE) */
##    input = *(me->buffer._input_p);
##
##_9:
##
##    __quex_debug("Init State\n");
##    __quex_debug_state(22);
##    if( input < 0xE ) {
##        switch( input ) {
##            case 0x0: 
##            case 0x1: 
##            case 0x2: 
##            case 0x3: 
##            case 0x4: goto _4;
##            case 0x5: goto _3;
##            case 0x6: 
##            case 0x7: 
##            case 0x8: 
##            case 0x9: 
##            case 0xA: goto _4;
##            case 0xB: 
##            case 0xC: goto _6;
##            case 0xD: goto _2;
##
##        }
##    } else {
##        if( input < 0x25 ) {
##            switch( input ) {
##                case 0xE: 
##                case 0xF: 
##                case 0x10: 
##                case 0x11: 
##                case 0x12: 
##                case 0x13: 
##                case 0x14: goto _4;
##                case 0x15: goto _6;
##                case 0x16: 
##                case 0x17: 
##                case 0x18: 
##                case 0x19: 
##                case 0x1A: 
##                case 0x1B: 
##                case 0x1C: 
##                case 0x1D: 
##                case 0x1E: 
##                case 0x1F: 
##                case 0x20: 
##                case 0x21: 
##                case 0x22: 
##                case 0x23: 
##                case 0x24: goto _4;
##
##            }
##        } else {
##            if( input == 0x25 ) {
##                goto _6;
##            
##} else if( input < 0x100 ) {
##                goto _4;
##            } else {
##
##            
##}
##        
##}
##    
##}
##
##    __quex_debug_drop_out(22);
##goto _1;
##
##
##    __quex_assert_no_passage();
##_8: /* (22 from 30) */
##    goto _9;
##
##
##
##    __quex_assert_no_passage();
##_2: /* (24 from 22) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _11;
##
##_11:
##
##    __quex_debug_state(24);
##    __quex_debug_drop_out(24);
##goto _13;
##
##    __quex_assert_no_passage();
##_3: /* (25 from 22) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _14;
##
##_14:
##
##    __quex_debug_state(25);
##    __quex_debug_drop_out(25);
##goto _16;
##
##    __quex_assert_no_passage();
##_4: /* (28 from 22) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _17;
##
##_17:
##
##    __quex_debug_state(28);
##    __quex_debug_drop_out(28);
##goto _19;
##
##    __quex_assert_no_passage();
##_6: /* (23 from 22) */
##    ++(me->buffer._input_p);
##    input = *(me->buffer._input_p);
##    goto _20;
##
##_20:
##
##    __quex_debug_state(23);
##    __quex_debug_drop_out(23);
##goto _22;
##    /* (*) Terminal states _______________________________________________________
##     *
##     * States that implement actions of the 'winner patterns.                     */
##_22: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_LINES_ADD((size_t)1);
##__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
##if( me->buffer._input_p != LexemeEnd ) goto _8;;
##goto _1;
##_13: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
##if( me->buffer._input_p != LexemeEnd ) goto _8;;
##goto _1;
##_16: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= (self.counter._column_number_at_end % (4)));
##__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4);
##if( me->buffer._input_p != LexemeEnd ) goto _8;;
##goto _1;
##_19: __quex_debug("* TERMINAL \n");
##__QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
##if( me->buffer._input_p != LexemeEnd ) goto _8;;
##goto _1;
##_25: __quex_debug("* TERMINAL <BEYOND>\n");
##    --(me->buffer._input_p);
##goto _1;
##_1:
##    __quex_assert(me->buffer._input_p == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
##   return;
###  undef self
##}
###endif /* __QUEX_OPTION_COUNTER */
##
_____________________________________________________________________________
file:     './data/example.cp037';
char_size: 1;
byte_n:    256;
column_n:  219;
line_n:    4;
## gcc -Wall -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.cp037"'  -DDEF_CHARACTER_TYPE=uint8_t  -o test
