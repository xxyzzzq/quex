<  * (C) 2005-2015 Frank-Rene Schaefer
>  * (C) 2005-2009 Frank-Rene Schaefer
< #ifndef __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$
< #define __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$
> #ifndef __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION____QUEX____TESTANALYZER
> #define __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION____QUEX____TESTANALYZER
<  *       deleted by "configuration/undefine".                                */
>  *       deleted by "configuration/undefine".                                  */
< #define QUEX_SETTING_VERSION           "$$QUEX_VERSION$$"
< #define QUEX_SETTING_ANALYZER_VERSION  "$$USER_LEXER_VERSION$$"
> #define QUEX_SETTING_VERSION           "0.65.5-pre"
> #define QUEX_SETTING_ANALYZER_VERSION  "0.0.0-pre-release"
< $$SWITCH$$ __QUEX_OPTION_PLAIN_C
> /* #define __QUEX_OPTION_PLAIN_C */
< $$SWITCH$$ QUEX_OPTION_COMPUTED_GOTOS
> /* #define QUEX_OPTION_COMPUTED_GOTOS */
< #define    __QUEX_SETTING_MAX_MODE_CLASS_N         ($$MAX_MODE_CLASS_N$$)
> #define    __QUEX_SETTING_MAX_MODE_CLASS_N         (64)
< #   define __QUEX_SETTING_INITIAL_LEXER_MODE_ID    ($$INITIAL_LEXER_MODE_ID$$)
> #   define __QUEX_SETTING_INITIAL_LEXER_MODE_ID    (QUEX_NAME(ModeID_))
< /* QUEX_TYPE_TOKEN_ID is later on defined inside the token class header.     */
< #define    __QUEX_SETTING_TOKEN_ID_TERMINATION       ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$TERMINATION)
< #define    __QUEX_SETTING_TOKEN_ID_UNINITIALIZED     ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$UNINITIALIZED)
< #define    __QUEX_SETTING_TOKEN_ID_INDENT            ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$INDENT)
< #define    __QUEX_SETTING_TOKEN_ID_DEDENT            ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$DEDENT)
< #define    __QUEX_SETTING_TOKEN_ID_NODENT            ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$NODENT)
< #define    __QUEX_SETTING_TOKEN_ID_REPETITION_TEST(TokenID) ($$TOKEN_REPEAT_TEST$$)
> /* NOTE: QUEX_TYPE_TOKEN_ID is later on defined inside the token class header. */
> #define    __QUEX_SETTING_TOKEN_ID_TERMINATION       ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_TERMINATION)
> #define    __QUEX_SETTING_TOKEN_ID_UNINITIALIZED     ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_UNINITIALIZED)
> #define    __QUEX_SETTING_TOKEN_ID_INDENT            ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_INDENT)
> #define    __QUEX_SETTING_TOKEN_ID_DEDENT            ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_DEDENT)
> #define    __QUEX_SETTING_TOKEN_ID_NODENT            ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_NODENT)
> #define    __QUEX_SETTING_TOKEN_ID_REPETITION_TEST(TokenID) (false)
< $$SWITCH$$ __QUEX_OPTION_LITTLE_ENDIAN
> #define    __QUEX_OPTION_LITTLE_ENDIAN
< $$SWITCH$$ __QUEX_OPTION_BIG_ENDIAN
> /* #define __QUEX_OPTION_BIG_ENDIAN */
< $$SWITCH$$ __QUEX_OPTION_SYSTEM_ENDIAN
> #define    __QUEX_OPTION_SYSTEM_ENDIAN
< $$SWITCH$$ QUEX_OPTION_TOKEN_POLICY_QUEUE
> /* #define QUEX_OPTION_TOKEN_POLICY_QUEUE */
< $$SWITCH$$ QUEX_OPTION_TOKEN_POLICY_SINGLE
> #define    QUEX_OPTION_TOKEN_POLICY_SINGLE
< $$SWITCH$$ QUEX_OPTION_USER_MANAGED_TOKEN_MEMORY
> /* #define QUEX_OPTION_USER_MANAGED_TOKEN_MEMORY */
< #      define QUEX_SETTING_TOKEN_QUEUE_SIZE          ((size_t)$$TOKEN_QUEUE_SIZE$$)
> #      define QUEX_SETTING_TOKEN_QUEUE_SIZE          ((size_t)64)
< #      define QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER ((size_t)$$TOKEN_QUEUE_SAFETY_BORDER$$)
> #      define QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER ((size_t)16)
< $$SWITCH$$ QUEX_OPTION_TOKEN_REPETITION_SUPPORT
> /* #define QUEX_OPTION_TOKEN_REPETITION_SUPPORT */
< /* OPTIONS: ___________________________________________________________________
> /* OPTIONS: ____________________________________________________________________
<  *    Turning counting off may result in engine speed-up.                    */
>  *    Turning counting off may result in engine speed-up.                      */
< $$SWITCH$$ QUEX_OPTION_LINE_NUMBER_COUNTING         
> #define    QUEX_OPTION_LINE_NUMBER_COUNTING         
< $$SWITCH$$ QUEX_OPTION_COLUMN_NUMBER_COUNTING       
> #define    QUEX_OPTION_COLUMN_NUMBER_COUNTING       
< $$SWITCH$$ QUEX_OPTION_POST_CATEGORIZER
> /* #define QUEX_OPTION_POST_CATEGORIZER */
<  *    by commenting the following option out.                                */
>  *    by commenting the following option out.                                  */
< $$SWITCH$$ QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
> #define    QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
< /* Verbosity (uncomment the following, if you want it verbose.)              */
< /* #define QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED                      */
<                                                                              
< /* Include Stack Support                                                     */
> /* Verbosity (uncomment the following, if you want it verbose.)            */
> /* #define QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED                    */
> 
> /* Include Stack Support                                                   */
< $$SWITCH$$ QUEX_OPTION_INCLUDE_STACK
> /* #define QUEX_OPTION_INCLUDE_STACK */
<  * IT IS NOT SUPPOSED TO APPEAR IN THE NORMAL CHARACTER STREAM.              */
>  * IT IS NOT SUPPOSED TO APPEAR IN THE NORMAL CHARACTER STREAM.           */
< #   define QUEX_SETTING_BUFFER_LIMIT_CODE  ((QUEX_TYPE_LEXATOM)$$BUFFER_LIMIT_CODE$$)
> #   define QUEX_SETTING_BUFFER_LIMIT_CODE  ((QUEX_TYPE_LEXATOM)0x0)
<  * IT IS NOT SUPPOSED TO APPEAR IN THE NORMAL CHARACTER STREAM.              */
>  * IT IS NOT SUPPOSED TO APPEAR IN THE NORMAL CHARACTER STREAM.           */
< #   define QUEX_SETTING_PATH_TERMINATION_CODE  ((QUEX_TYPE_LEXATOM)$$PATH_TERMINATION_CODE$$)
> #   define QUEX_SETTING_PATH_TERMINATION_CODE  ((QUEX_TYPE_LEXATOM)0x1)
<  *       pre-processor comparisons.                                          */
>  *       pre-processor comparisons.                                       */
< $$SWITCH$$ QUEX_OPTION_BUFFER_BASED_ANALYZIS
> /* #define QUEX_OPTION_BUFFER_BASED_ANALYZIS */
<       * be some pre-processor comparison operations depending on it.         */
>       * be some pre-processor comparison operations depending on it.      */
< $$SWITCH$$ QUEX_OPTION_STRING_ACCUMULATOR
> #define    QUEX_OPTION_STRING_ACCUMULATOR
< /* Initial size of the character accumulator.                                */
> /* Initial size of the character accumulator. */
< 
< /* Granularity, if new memory has to be allocated. The new memory will be by
<  * this factor greater than the previous.  Example: At start, memory contains
<  * 256 characters; then new allocation becomes necessary; if factor = 0.5, then
<  * the new memory will contain (256 + 128) = 384 characters. The next time, the
<  * new memory of size (384 + 192) = 576 characters.                          */
< 
> /* Granularity, if new memory has to be allocated. The new
>  * memory will be by this factor greater than the previous.
>  * Example: At start, memory contains 256 characters; then 
>  * new allocation becomes necessary; if factor = 0.5, then
>  * the new memory will contain (256 + 128) = 384 characters. The
>  * next time, the new memory of size (384 + 192) = 576 characters.      */
< /* If one mode requires indentation support, then the lexical analyser class
<  * must be setup for indentation counting. The following flag is defined or
<  * undefined by the lexical analyser generator quex.                         */
< $$SWITCH$$ QUEX_OPTION_INDENTATION_TRIGGER
> /* If one mode requires indentation support, then the lexical analyser
>  * class must be setup for indentation counting. The following flag is
>  * defined or undefined by the lexical analyser generator quex.         */
> /* #define QUEX_OPTION_INDENTATION_TRIGGER */
< /* Quex can determine whether certain handlers are not used at all.  If so,
<  * computation time can be spared and quex comments the following options out.
<  *                                                                           */
< $$SWITCH$$ __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
< $$SWITCH$$ __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
< $$SWITCH$$ QUEX_OPTION_CONVERTER_ICONV
< $$SWITCH$$ QUEX_OPTION_CONVERTER_ICU
> /* Quex can determine whether certain handlers are not used at all.
>  * If so, computation time can be spared and quex comments the following
>  * options out.                                                         */
> /* #define __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT */
> /* #define __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT */
> /* #define QUEX_OPTION_CONVERTER_ICONV */
> /* #define QUEX_OPTION_CONVERTER_ICU */
< $$QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW$$
> /* #   define QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  */
< $$SWITCH$$ __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
> /* #define __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION */
< $$SWITCH$$ __QUEX_OPTION_CONVERTER
> /* #define __QUEX_OPTION_CONVERTER */
< $$SWITCH$$ __QUEX_OPTION_CONVERTER_HELPER
> /* #define __QUEX_OPTION_CONVERTER_HELPER */
<  * CHARACTER TYPE: Type that represents the number of bytes used in the engine
<  * to store a character. This is independent of the coding (ASCII, WinArabic,
<  * ...)
<  *
<  * Both character types are clearly related, because they are supposed to
<  * relate to the same type of objects in memory. The following example shows,
<  * that 'uint8_t' and 'char' belong together, the lexeme type cannot be
<  * 'uint8_t' because the std-string functions accept 'char*' and not 'uint8_t'
<  * (which is most propperly 'unsigned char').
<  *
<  * NOTE: If in parallel another engine is built with other bytes per character
<  * settings, then the engines will also include their own header with their own
<  * definition of QUEX_TYPE_LEXATOM. Thus there is no danger at all.
<  * Templatifying the lexer would be possible, but the author has in mind to
<  * bring out a 'pure C' version of the quex generated engine. Thus templating
<  * would make this goal harder achievable.
<  *                                                                           */
>  * CHARACTER TYPE: Type that represents the number of bytes used in the engine to store
>  *                 a character. This is independent of the coding (ASCII, WinArabic, ...)
>  *
>  * Both character types are clearly related, because they are supposed to relate to the 
>  * same type of objects in memory. The following example shows, that 'uint8_t' and 'char'
>  * belong together, the lexeme type cannot be 'uint8_t' because the std-string functions
>  * accept 'char*' and not 'uint8_t' (which is most propperly 'unsigned char').
>  *
>  * NOTE: If in parallel another engine is built with other bytes per character settings,
>  *       then the engines will also include their own header with their own definition
>  *       of QUEX_TYPE_LEXATOM. Thus there is no danger at all. 
>  *       Templatifying the lexer would be possible, but the author has in mind to bring out
>  *       a 'pure C' version of the quex generated engine. Thus templating would make this 
>  *       goal harder achievable.                                                            */
< #   define QUEX_TYPE_LEXATOM          $$QUEX_TYPE_LEXATOM$$
< #   define QUEX_TYPE_LEXATOM_BACKUP   $$QUEX_TYPE_LEXATOM$$
> #   define QUEX_TYPE_LEXATOM          uint8_t
> #   define QUEX_TYPE_LEXATOM_BACKUP   uint8_t
<     /* Size of a QUEX_TYPE_LEXATOM in bytes. A numeric value is required
<      * here!  '-1' stands for 'Cannot be determined at code generation time'.
<      * In this case, it must be relied upon 'sizeof(QUEX_TYPE_LEXATOM)'.   */
< #   define QUEX_SETTING_CHARACTER_SIZE  $$QUEX_SETTING_CHARACTER_SIZE$$
>     /* Size of a QUEX_TYPE_LEXATOM in bytes. A numeric value is required here!
>      * '-1' stands for 'Cannot be determined at code generation time'. In this case,
>      * it must be relied upon 'sizeof(QUEX_TYPE_LEXATOM)'.                                */
> #   define QUEX_SETTING_CHARACTER_SIZE  1
< #   define QUEX_SETTING_CHARACTER_CODEC $$QUEX_SETTING_CHARACTER_CODEC$$
> #   define QUEX_SETTING_CHARACTER_CODEC unicode
<  * codec. Thus no converter is necessary. Use the flag to detect misuse.     */
< $$SWITCH$$ __QUEX_OPTION_ENGINE_RUNNING_ON_CODEC
>  * codec. Thus no converter is necessary. Use the flag to detect misuse.                    */
> /* #define __QUEX_OPTION_ENGINE_RUNNING_ON_CODEC */
<  * QUEX_TYPE0_X --> Type of X in local namespace (namespace omitted)         */
>  * QUEX_TYPE0_X --> Type of X in local namespace (namespace omitted) */
< #   define QUEX_FUNCTION_PREFIX        $$LEXER_CLASS_NAME_SAFE$$_
< #   define QUEX_FUNCTION_DEF_PREFIX    $$LEXER_CLASS_NAME_SAFE$$_
> #   define QUEX_FUNCTION_PREFIX        quex_TestAnalyzer_
> #   define QUEX_FUNCTION_DEF_PREFIX    quex_TestAnalyzer_
<      * into the type name. Both, global and local names are equal.           */
< #   define QUEX_TYPE0_ANALYZER         struct $$LEXER_CLASS_NAME_SAFE$$_tag
< #   define QUEX_TYPE_ANALYZER          struct $$LEXER_CLASS_NAME_SAFE$$_tag
< #   define QUEX_NAME_COMPLETE_ANALYZER $$LEXER_CLASS_NAME_SAFE$$
< #   define QUEX_TYPE_DERIVED_ANALYZER  struct $$LEXER_CLASS_NAME_SAFE$$_tag
< 
< #   define QUEX_TYPE0_TOKEN            struct $$TOKEN_CLASS_NAME_SAFE$$_tag
< #   define QUEX_TYPE_TOKEN             struct $$TOKEN_CLASS_NAME_SAFE$$_tag
< #   define QUEX_NAME_COMPLETE_TOKEN    $$TOKEN_CLASS_NAME_SAFE$$
>      * into the type name. Both, global and local names are equal.       */
> #   define QUEX_TYPE0_ANALYZER         struct quex_TestAnalyzer_tag
> #   define QUEX_TYPE_ANALYZER          struct quex_TestAnalyzer_tag
> #   define QUEX_NAME_COMPLETE_ANALYZER quex_TestAnalyzer
> #   define QUEX_TYPE_DERIVED_ANALYZER  struct quex_TestAnalyzer_tag
> 
> #   define QUEX_TYPE0_TOKEN            struct quex_Token_tag
> #   define QUEX_TYPE_TOKEN             struct quex_Token_tag
> #   define QUEX_NAME_COMPLETE_TOKEN    quex_Token
< #   define QUEX_NAMESPACE_MAIN         $$LEXER_CLASS_NAME_SAFE$$
> #   define QUEX_NAMESPACE_MAIN         quex_TestAnalyzer
< #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   $$QUEX_LEXEME_NULL_SAFE$$
< #   define QUEX_LEXEME_NULL                    $$QUEX_LEXEME_NULL_SAFE$$
> #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   quex_LexemeNullObject
> #   define QUEX_LEXEME_NULL                    quex_LexemeNullObject
< #   define QUEX_NAME(NAME)             $$LEXER_CLASS_NAME_SAFE$$_ ## NAME
< #   define QUEX_NAME_TOKEN(NAME)       $$TOKEN_CLASS_NAME_SAFE$$_ ## NAME
> #   define QUEX_NAME(NAME)             quex_TestAnalyzer_ ## NAME
> #   define QUEX_NAME_TOKEN(NAME)       quex_Token_ ## NAME
< #   define QUEX_FUNCTION_PREFIX_BACKUP       $$LEXER_CLASS_NAME_SAFE$$_
< #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   $$LEXER_CLASS_NAME_SAFE$$_
> #   define QUEX_FUNCTION_PREFIX_BACKUP       quex_TestAnalyzer_
> #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   quex_TestAnalyzer_
<     /* Assumption: here is IN the namespace for definition.                  */
< #   define QUEX_FUNCTION_DEF_PREFIX    
< #   define QUEX_FUNCTION_PREFIX        $$NAMESPACE_MAIN$$::
> #   define QUEX_FUNCTION_DEF_PREFIX    /* Supposed we are IN the namespace for definition. */
> #   define QUEX_FUNCTION_PREFIX        ::quex::
<      * and token.                                                            */
< #   define QUEX_TYPE0_ANALYZER         $$LEXER_CLASS_NAME$$
< #   define QUEX_TYPE_ANALYZER          $$NAMESPACE_MAIN$$::$$LEXER_CLASS_NAME$$
< #   define QUEX_NAME_COMPLETE_ANALYZER $$NAMESPACE_MAIN$$::$$LEXER_CLASS_NAME$$
< #   define QUEX_TYPE_DERIVED_ANALYZER  $$LEXER_DERIVED_CLASS_NAME$$
< 
< #   define QUEX_TYPE0_TOKEN            $$TOKEN_CLASS$$
< #   define QUEX_TYPE_TOKEN             $$NAMESPACE_TOKEN$$::$$TOKEN_CLASS$$
< #   define QUEX_NAME_COMPLETE_TOKEN    $$NAMESPACE_TOKEN$$::$$TOKEN_CLASS$$
< 
< #   define QUEX_NAMESPACE_MAIN         $$NAMESPACE_MAIN$$
< #   define QUEX_NAMESPACE_MAIN_OPEN    $$NAMESPACE_MAIN_OPEN$$
< #   define QUEX_NAMESPACE_MAIN_CLOSE   $$NAMESPACE_MAIN_CLOSE$$
< 
< #   define QUEX_NAMESPACE_TOKEN        $$NAMESPACE_TOKEN$$
< #   define QUEX_NAMESPACE_TOKEN_OPEN   $$NAMESPACE_TOKEN_OPEN$$
< #   define QUEX_NAMESPACE_TOKEN_CLOSE  $$NAMESPACE_TOKEN_CLOSE$$
< 
< #   define QUEX_NAMESPACE_LEXEME_NULL_OPEN     $$QUEX_NAMESPACE_LEXEME_NULL_OPEN$$
< #   define QUEX_NAMESPACE_LEXEME_NULL_CLOSE    $$QUEX_NAMESPACE_LEXEME_NULL_CLOSE$$
< #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   $$QUEX_LEXEME_NULL_IN_ITS_NAMESPACE$$
< #   define QUEX_LEXEME_NULL                    $$QUEX_LEXEME_NULL$$
< 
< #   define QUEX_NAME(NAME)             $$LEXER_CLASS_NAME$$_ ## NAME
< #   define QUEX_NAME_TOKEN(NAME)       $$TOKEN_CLASS$$_ ## NAME
< #   define QUEX_MEMBER(NAME)           $$LEXER_CLASS_NAME$$::NAME                
>      * and token.                                                        */
> #   define QUEX_TYPE0_ANALYZER         TestAnalyzer
> #   define QUEX_TYPE_ANALYZER          ::quex::TestAnalyzer
> #   define QUEX_NAME_COMPLETE_ANALYZER ::quex::TestAnalyzer
> #   define QUEX_TYPE_DERIVED_ANALYZER  TestAnalyzer
> 
> #   define QUEX_TYPE0_TOKEN            Token
> #   define QUEX_TYPE_TOKEN             ::quex::Token
> #   define QUEX_NAME_COMPLETE_TOKEN    ::quex::Token
> 
> #   define QUEX_NAMESPACE_MAIN         ::quex
> #   define QUEX_NAMESPACE_MAIN_OPEN    namespace quex {\
> 
> #   define QUEX_NAMESPACE_MAIN_CLOSE   } /* Closing Namespace 'quex' */\
> 
> 
> #   define QUEX_NAMESPACE_TOKEN        ::quex
> #   define QUEX_NAMESPACE_TOKEN_OPEN   namespace quex {\
> 
> #   define QUEX_NAMESPACE_TOKEN_CLOSE  } /* Closing Namespace 'quex' */\
> 
> 
> #   define QUEX_NAMESPACE_LEXEME_NULL_OPEN     namespace quex {\
> 
> #   define QUEX_NAMESPACE_LEXEME_NULL_CLOSE    } /* Closing Namespace 'quex' */\
> 
> #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   LexemeNullObject
> #   define QUEX_LEXEME_NULL                    ::quex::LexemeNullObject
> 
> #   define QUEX_NAME(NAME)             TestAnalyzer_ ## NAME
> #   define QUEX_NAME_TOKEN(NAME)       Token_ ## NAME
> #   define QUEX_MEMBER(NAME)           TestAnalyzer::NAME                
< #   define QUEX_NAMESPACE_MAIN_OPEN_BACKUP   $$NAMESPACE_MAIN_OPEN$$
< #   define QUEX_NAMESPACE_MAIN_CLOSE_BACKUP  $$NAMESPACE_MAIN_CLOSE$$
> #   define QUEX_NAMESPACE_MAIN_OPEN_BACKUP   namespace quex {\
> 
> #   define QUEX_NAMESPACE_MAIN_CLOSE_BACKUP  } /* Closing Namespace 'quex' */\
> 
< #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   $$NAMESPACE_MAIN$$::
> #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   ::quex::
< #   define QUEX_TYPE_TOKEN_ID        $$TOKEN_ID_TYPE$$
> #   define QUEX_TYPE_TOKEN_ID        uint32_t
< #   define QUEX_TYPE_TOKEN_LINE_N    $$TOKEN_LINE_N_TYPE$$
> #   define QUEX_TYPE_TOKEN_LINE_N    size_t
< #   define QUEX_TYPE_TOKEN_COLUMN_N  $$TOKEN_COLUMN_N_TYPE$$
> #   define QUEX_TYPE_TOKEN_COLUMN_N  size_t
< #endif /* __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$ */
> #endif /* __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION____QUEX____TESTANALYZER */
