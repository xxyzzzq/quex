{
file_name: test-StateInfo-trigger-map.py;
result_list: [
  [ ; OK; 0.065631; None; ]
]
title: Get Trigger Map (intervals --> target states);
title_group: DFA;
hwut_info_time: 1410843657L;
}
{
file_name: test-get_trigger_map.py;
result_list: [
  [ 1; OK; 0.068163; None; ]
  [ 2; OK; 0.067373; None; ]
  [ 3; OK; 0.067597; None; ]
  [ 4; OK; 0.064140; None; ]
  [ 5; OK; 0.067063; None; ]
  [ 6; OK; 0.067880; None; ]
  [ 7; OK; 0.065597; None; ]
  [ 8; OK; 0.066325; None; ]
]
title: Get Trigger Map (intervals --> target states);
title_group: DFA;
hwut_info_time: 1410843657L;
}
{
file_name: test-StateMachine-epsilon-closure.py;
result_list: [
  [ ; OK; 0.044488; None; ]
]
title: Epsilon closure (single state);
title_group: NFA;
hwut_info_time: 1415528503L;
}
{
file_name: test-StateMachine-elementary_trigger_sets.py;
result_list: [
  [ ; OK; 0.045239; None; ]
]
title: Get elementary trigger sets (target index --> trigger sets);
title_group: NFA;
hwut_info_time: 1410843657L;
}
{
file_name: test-StateMachine-elementary_trigger_sets-2.py;
result_list: [
  [ ; OK; 0.044203; None; ]
]
title: Get elementary trigger sets II;
title_group: NFA;
hwut_info_time: 1415531758L;
}
{
file_name: test-StateMachine-get_graphviz_string.py;
result_list: [
  [ 1; OK; 0.045210; None; ]
  [ 2; OK; 0.046009; None; ]
]
title: Get graphviz string of state machine.;
title_group: Plot;
hwut_info_time: 1415528503L;
}
{
file_name: test-count_character_n.py;
result_list: [
  [ Normal; OK; 0.628561; None; ]
  [ BeginOfLine; OK; 0.617663; None; ]
]
title: Characters;
title_group: Predetermined Character Count;
hwut_info_time: 1410930869L;
}
{
file_name: test-count_character_n-2.py;
result_list: [
  [ Same; OK; 0.409116; None; ]
  [ Different; OK; 0.892844; None; ]
  [ TwoSet; OK; 0.428564; None; ]
  [ Grid; OK; 0.309084; None; ]
  [ Grid-BOL; OK; 0.308327; None; ]
]
title: Characters of different horizontal sizes.;
title_group: Predetermined Character Count;
hwut_info_time: 1415531758L;
}
{
file_name: test-count_character_n-codec.py;
result_list: [
  [ UTF8; OK; 0.270773; None; ]
  [ UTF16; OK; 0.278740; None; ]
]
title: Codec Engine;
title_group: Predetermined Character Count;
hwut_info_time: 1415527944L;
}
{
file_name: test-count_newline_n.py;
result_list: [
  [ ; OK; 0.821213; None; ]
]
title: Newlines;
title_group: Predetermined Character Count;
hwut_info_time: 1410843657L;
}
{
file_name: test-ambiguous_post_condition-detect.py;
result_list: [
  [ ; OK; 0.379168; None; ]
]
title: Detection;
title_group: Pseudo Ambigous Post Condition;
hwut_info_time: 1415530225L;
}
{
file_name: test-ambiguous_post_condition-mount_pseudo.py;
result_list: [
  [ ; OK; 0.091678; None; ]
]
title: Mounting;
title_group: Pseudo Ambigous Post Condition;
hwut_info_time: 1415530225L;
}
{
file_name: test-ambiguous_post_condition-philosophical_cut.py;
result_list: [
  [ ; OK; 0.142478; None; ]
]
title: The Philosophical Cut;
title_group: Pseudo Ambigous Post Condition;
hwut_info_time: 1415530225L;
}
{
file_name: test-StateMachine-clone.py;
result_list: [
  [ ; OK; 0.049695; None; ]
]
title: Cloning;
title_group: StateMachine;
hwut_info_time: 1415528368L;
}
{
file_name: test-StateMachine-get_predecessor_db.py;
result_list: [
  [ linear; OK; 0.335378; 831676962; ]
  [ butterfly; OK; 3.171316; -1903424989; ]
  [ long_loop; OK; 0.381798; -1132237465; ]
  [ nested_loop; FAIL; 0.088394; -342497869; ]
  [ mini_loop; OK; 0.043961; -1072080967; ]
  [ fork; OK; 0.362113; 375926482; ]
  [ fork2; OK; 0.081566; 1247149166; ]
  [ fork3; OK; 2.585682; 2069247824; ]
  [ fork4; OK; 2.815002; 1103825239; ]
]
title: get_predecessor_db;
title_group: StateMachine;
hwut_info_time: 1417776668L;
}
{
file_name: test-setup_post_condition.py;
result_list: [
  [ ; OK; 0.050336; None; ]
]
title: Append Post Condition;
title_group: StateMachine Operations;
hwut_info_time: 1415565087L;
}
{
file_name: test-setup_border_conditions.py;
result_list: [
  [ ; OK; 0.090649; None; ]
]
title: Append Post Condition;
title_group: StateMachine Operations;
hwut_info_time: 1415565087L;
}
{
file_name: test-StateMachine-inverse.py;
result_list: [
  [ ; OK; 0.046560; None; ]
]
title: Inverse;
title_group: StateMachine Operations;
hwut_info_time: 1415528402L;
}
{
file_name: test-parallelize.py;
result_list: [
  [ ; OK; 0.059035; None; ]
]
title: Paralell;
title_group: StateMachine Operations;
hwut_info_time: 1415528400L;
}
{
file_name: test-repeat.py;
result_list: [
  [ ; OK; 0.046508; None; ]
]
title: Repetition with min and max repetition numbers;
title_group: StateMachine Operations;
hwut_info_time: 1415528503L;
}
{
file_name: test-repeat-pure.py;
result_list: [
  [ ; OK; 0.047959; None; ]
]
title: Repetitions Kleene closure 0 or arbitrary repetitions;
title_group: StateMachine Operations;
hwut_info_time: 1415528507L;
}
{
file_name: test-sequentialize.py;
result_list: [
  [ ; OK; 0.045575; None; ]
]
title: Sequence;
title_group: StateMachine Operations;
hwut_info_time: 1415528371L;
}
{
file_name: test-setup_pre_condition.py;
result_list: [
  [ ; OK; 0.049596; None; ]
]
title: Setup Pre-Condition;
title_group: StateMachine Operations;
hwut_info_time: 1415528430L;
}
{
file_name: test-StateMachine-trace-origin-clone.py;
result_list: [
  [ ; OK; 0.045853; None; ]
]
title: Cloning;
title_group: Tracing origin;
hwut_info_time: 1415528369L;
}
{
file_name: test-StateMachine-trace-origin-hopcroft-optimization.py;
result_list: [
  [ ; OK; 0.045424; None; ]
]
title: Hopcroft optimization (minimize state set);
title_group: Tracing origin;
hwut_info_time: 1415528593L;
}
{
file_name: test-StateMachine-trace-origin-create-DFA.py;
result_list: [
  [ ; OK; 0.043548; None; ]
]
title: NFA to DFA (subset construction);
title_group: Tracing origin;
hwut_info_time: 1415482657L;
}
{
file_name: test-StateMachine-trace-origin-create-DFA-2.py;
result_list: [
  [ ; OK; 0.057994; None; ]
]
title: NFA to DFA (subset construction) II;
title_group: Tracing origin;
hwut_info_time: 1415528398L;
}
{
file_name: test-parallelize-trace-origin.py;
result_list: [
  [ ; OK; 0.050742; None; ]
]
title: Paralellization;
title_group: Tracing origin;
hwut_info_time: 1415528400L;
}
{
file_name: test-StateInfo-has_trigger.py;
result_list: [
  [ ; OK; 0.065221; None; ]
]
title: Has Trigger;
title_group: Trigger Set Check;
hwut_info_time: 1410843657L;
}
{
file_name: test-utf16_interval_split.py;
result_list: [
  [ 1; OK; 0.044365; None; ]
  [ 2; OK; 0.044711; None; ]
  [ 3; OK; 0.044747; None; ]
  [ 4; OK; 0.045113; None; ]
  [ 5; OK; 0.041828; None; ]
]
title: Contigous Word Sequence Ranges;
title_group: UTF16 State Split;
hwut_info_time: 1415531758L;
}
{
file_name: test-utf16_number_set_split.py;
result_list: [
  [ ; OK; 4.902954; None; ]
]
title: Larger Number Sets;
title_group: UTF16 State Split;
hwut_info_time: 1415916698L;
}
{
file_name: test-utf8_number_set_split.py;
result_list: [
  [ 1; OK; 0.047857; None; ]
  [ 2; OK; 0.047900; None; ]
  [ 3; OK; 0.046157; None; ]
  [ 4; OK; 0.046676; None; ]
  [ 4b; OK; 0.045916; None; ]
  [ misc; OK; 0.042785; None; ]
]
title: Contigous Byte Sequence Ranges;
title_group: UTF8 State Split;
hwut_info_time: 1415531758L;
}
{
file_name: test-utf8_number_set_split-by-length.py;
result_list: [
  [ 1; OK; 0.045012; None; ]
  [ 2; OK; 0.047591; None; ]
  [ Overlap1; OK; 0.043188; None; ]
  [ Overlap2; OK; 0.046083; None; ]
]
title: Intervals;
title_group: UTF8 State Split;
hwut_info_time: 1415531758L;
}
{
file_name: test-utf8_state_split-do.py;
result_list: [
  [ ; OK; 0.751015; None; ]
]
title: Larger Number Sets;
title_group: UTF8 State Split;
hwut_info_time: 1415916736L;
}
{
file_name: test-utf8_state_split-do-2.py;
result_list: [
  [ ; OK; 0.080399; None; ]
]
title: Larger Number Sets;
title_group: UTF8 State Split;
hwut_info_time: 1415531758L;
}
{
file_name: test-utf8_state_split.py;
result_list: [
  [ 1.1; OK; 0.045337; None; ]
  [ 1.2; OK; 0.046339; None; ]
  [ 2.1; OK; 0.043051; None; ]
  [ 2.2; OK; 0.045173; None; ]
  [ 2.3; OK; 0.045925; None; ]
  [ 3.1; OK; 0.046232; None; ]
  [ 3.2; OK; 0.043052; None; ]
  [ 3.3; OK; 0.045480; None; ]
  [ 4.1; OK; 0.046083; None; ]
  [ 4.2; OK; 0.046549; None; ]
  [ 4.3; OK; 0.050332; None; ]
  [ 4.4; OK; 0.046405; None; ]
]
title: Plug Intermediate States;
title_group: UTF8 State Split;
hwut_info_time: 1415531758L;
}
