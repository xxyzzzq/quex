digraph state_machine_0 {
rankdir=LR;
size="8,5"
node [shape = doublecircle]; 2; 3; 5; 6;
node [shape = circle];
0 -> 2 [label ="['a', 'o']"];
0 -> 1 [label ="'p'"];
0 -> 3 [label ="['q', 'z']"];
1 -> 2 [label ="['a', 'o']"];
1 -> 4 [label ="'p'"];
1 -> 3 [label ="['q', 'z']"];
4 -> 2 [label ="['a', 'o']"];
4 -> 6 [label ="'p'"];
4 -> 3 [label ="['q', 'y']"];
4 -> 5 [label ="'z'"];
7777 -> 0 [label ="'0'"];
}


# start    = 0;
# path     = (0)--'p'-->(1)--'p'-->(4)--'z'-->[5];
# skeleton = {
#    [-oo, '`'] -> DoorID(s=DROP_OUT, d=1)
#    ['a', 'o'] -> DoorID(s=2, d=0)
#    'p'        -> DoorID(s=6, d=0)
#    ['q', 'z'] -> DoorID(s=3, d=0)
#    ['{', oo]  -> DoorID(s=DROP_OUT, d=1)
# }
# wildcard = False;
# 
# start    = 1;
# path     = (1)--'p'-->(4)--'z'-->[5];
# skeleton = {
#    [-oo, '`'] -> DoorID(s=DROP_OUT, d=1)
#    ['a', 'o'] -> DoorID(s=2, d=0)
#    'p'        -> DoorID(s=6, d=0)
#    ['q', 'z'] -> DoorID(s=3, d=0)
#    ['{', oo]  -> DoorID(s=DROP_OUT, d=1)
# }
# wildcard = False;
# 
#
# Some recursions are possible, if the skeleton contains them.
# In this case, the path cannot contain but the 'iterative' char
# plus some exit character.
