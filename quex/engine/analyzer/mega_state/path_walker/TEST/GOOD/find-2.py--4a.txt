# 1 ----> 2
# 2 ----> 3
# 3 ----> 4
# 4 ----> 5
# 6 ----> 7
# 7 ----> 8
# 8 ----> 9
# 9 ----> 10
# 11 ----> 12
# 12 ----> 13
# 13 ----> 14
# 14 ----> 15
# 16 ----> 17
# 17 ----> 18
# 18 ----> 19
# 19 ----> 20
# 21 ----> 22
# 22 ----> 23
# 23 ----> 24
# 24 ----> 25
digraph state_machine_0 {
rankdir=LR;
size="8,5"
node [shape = doublecircle]; 5; 10; 15; 20; 25;
node [shape = circle];
0 -> 1 [label ="'A'"];
0 -> 6 [label ="'B'"];
0 -> 11 [label ="'C'"];
0 -> 16 [label ="'D'"];
0 -> 21 [label ="'E'"];
1 -> 2 [label ="'a'"];
2 -> 3 [label ="'a'"];
3 -> 4 [label ="'a'"];
4 -> 5 [label ="'a'"];
6 -> 7 [label ="'a'"];
7 -> 8 [label ="'a'"];
8 -> 9 [label ="'a'"];
9 -> 10 [label ="'a'"];
11 -> 12 [label ="'a'"];
12 -> 13 [label ="'a'"];
13 -> 14 [label ="'a'"];
14 -> 15 [label ="'a'"];
16 -> 17 [label ="'a'"];
17 -> 18 [label ="'a'"];
18 -> 19 [label ="'a'"];
19 -> 20 [label ="'a'"];
21 -> 22 [label ="'a'"];
22 -> 23 [label ="'a'"];
23 -> 24 [label ="'a'"];
24 -> 25 [label ="'a'"];
7777 -> 0 [label ="'0'"];
}


# start    = 21;
# path     = (21)--'a'-->(22)--'a'-->(23)--'a'-->(24)--'a'-->[25];
# skeleton = {
#    [-oo, oo] -> DROP_OUT
# }
# wildcard = False;
# 
# start    = 16;
# path     = (16)--'a'-->(17)--'a'-->(18)--'a'-->(19)--'a'-->[20];
# skeleton = {
#    [-oo, oo] -> DROP_OUT
# }
# wildcard = False;
# 
# start    = 11;
# path     = (11)--'a'-->(12)--'a'-->(13)--'a'-->(14)--'a'-->[15];
# skeleton = {
#    [-oo, oo] -> DROP_OUT
# }
# wildcard = False;
# 
# start    = 6;
# path     = (6)--'a'-->(7)--'a'-->(8)--'a'-->(9)--'a'-->[10];
# skeleton = {
#    [-oo, oo] -> DROP_OUT
# }
# wildcard = False;
# 
# start    = 1;
# path     = (1)--'a'-->(2)--'a'-->(3)--'a'-->(4)--'a'-->[5];
# skeleton = {
#    [-oo, oo] -> DROP_OUT
# }
# wildcard = False;
# 
#DONE
#
# Some recursions are possible, if the skeleton contains them.
# In this case, the path cannot contain but the 'iterative' char
# plus some exit character.
