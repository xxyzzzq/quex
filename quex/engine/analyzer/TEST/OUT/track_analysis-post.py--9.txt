init-state = 131L
00131() <~ (41, 100), (8, 18), (17, 39)
      == 'x' ==> 00132
      <no epsilon>
00132(S, P1) <~ (8, 19, S, P1), (17, 40), (41, 101)
      == 'y' ==> 00133
      <no epsilon>
00133(S, P13) <~ (8, 20), (17, 41, S, P13), (41, 102)
      == 'a' ==> 00135
      == 'b' ==> 00134
      <no epsilon>
00135(A, P1) <~ (8, 21, A, P1), (41, 103)
      == 'c' ==> 00136
      <no epsilon>
00136() <~ (41, 104)
      == 'd' ==> 00137
      <no epsilon>
00137() <~ (41, 105)
      == 'e' ==> 00138
      <no epsilon>
00138(A, S) <~ (41, 106, A, S)
      <no epsilon>
00134(A, P13) <~ (17, 42, A, P13), (41, 103)
      == 'c' ==> 00136
      <no epsilon>

State 131:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 132:
  .entry:
    .positioner:
        .from 131: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 133:
  .entry:
    .positioner:
        .from 132: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 134:
  .entry:
    .accepter:
        last_acceptance = Pattern17
    .positioner:
        .from 133: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern17;


State 135:
  .entry:
    .accepter:
        last_acceptance = Pattern8
    .positioner:
        .from 133: <nothing>
  .drop_out:
    pos -= 2;  goto Pattern8;


State 136:
  .entry:
    .positioner:
        .from 134: <nothing>
        .from 135: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos -= 3;  goto Pattern8;
        case 17: pos -= 2;  goto Pattern17;


State 137:
  .entry:
    .positioner:
        .from 136: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos -= 4;  goto Pattern8;
        case 17: pos -= 3;  goto Pattern17;


State 138:
  .entry:
  .drop_out:
     goto Pattern41;


