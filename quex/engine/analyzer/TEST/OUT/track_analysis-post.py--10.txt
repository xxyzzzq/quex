init-state = 0L
00000() <~ (47, 125), (20, 50), (11, 29)
      == 'x' ==> 00001
      <no epsilon>
00001(S, P1) <~ (11, 30, S, P1), (20, 51), (47, 126)
      == 'y' ==> 00002
      <no epsilon>
00002(S, P16) <~ (11, 31), (20, 52, S, P16), (47, 127)
      == 'a' ==> 00003
      == 'b' ==> 00007
      <no epsilon>
00003(A, P1) <~ (11, 32, A, P1), (47, 128)
      == 'a' ==> 00003
      == 'c' ==> 00004
      <no epsilon>
00004() <~ (47, 130)
      == 'd' ==> 00005
      <no epsilon>
00005() <~ (47, 131)
      == 'e' ==> 00006
      <no epsilon>
00006(A, S) <~ (47, 132, A, S)
      <no epsilon>
00007(A, P16) <~ (20, 53, A, P16), (47, 129)
      == 'c' ==> 00004
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: position[PostContext_1]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .accepter:
        last_acceptance = Pattern11
    .positioner:
        .from 2: <nothing>
        .from 3: <nothing>
  .drop_out:
    pos = position[PostContext_1] ; goto Pattern11;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
        .from 7: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 11: pos = position[PostContext_1] ; goto Pattern11;
        case 20: pos -= 2;  goto Pattern20;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 11: pos = position[PostContext_1] ; goto Pattern11;
        case 20: pos -= 3;  goto Pattern20;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
     goto Pattern47;


State 7:
  .entry:
    .accepter:
        last_acceptance = Pattern20
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern20;


