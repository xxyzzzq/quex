init-state = 0L
00000() <~ (25, 58), (16, 36), (7, 15)
      == 'a' ==> 00001
      == 'b' ==> 00004
      <no epsilon>
00001(S, P18) <~ (7, 16), (16, 37), (25, 59, S, P18)
      == 'b' ==> 00002
      <no epsilon>
00002(S, P12) <~ (7, 17), (16, 38, S, P12), (25, 60)
      == 'c' ==> 00003
      <no epsilon>
00003(A, S, P18) <~ (7, 18, A, S), (16, 39, A, P12), (25, 61, A, P18)
      <no epsilon>
00004() <~ (7, 16)
      == 'b' ==> 00005
      <no epsilon>
00005() <~ (7, 17)
      == 'c' ==> 00006
      <no epsilon>
00006(A, S) <~ (7, 18, A, S)
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
     goto Pattern7;


State 4:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
     goto Pattern7;


