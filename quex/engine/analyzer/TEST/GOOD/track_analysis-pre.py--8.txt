init-state = 0L
00000 (24, 55), (2, 4), (5, 10)
     == 'a' ==> 00001
     == 'b' ==> 00005
     <no epsilon>
00001 (2, 5, A, pre=bol), (24, 56)
     == 'b' ==> 00002
     <no epsilon>
00002 (24, 57)
     == 'c' ==> 00003
     <no epsilon>
00003 (24, 58)
     == 'd' ==> 00004
     <no epsilon>
00004 (24, 59, A)
     <no epsilon>
00005 (5, 11, A, pre=bol), (24, 57)
     == 'c' ==> 00003
     <no epsilon>

State 0:
  .entry:
    .accepter:
        last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .accepter:
        if      BeginOfLine: last_acceptance = Pattern2
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
        .from 5: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 2: pos -= 2;  goto Pattern2;
        case 5: pos -= 1;  goto Pattern5;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
     goto Pattern24;


State 5:
  .entry:
    .accepter:
        if      BeginOfLine: last_acceptance = Pattern5
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern5;
    pos = lexeme_start_p + 1;  goto Failure;


