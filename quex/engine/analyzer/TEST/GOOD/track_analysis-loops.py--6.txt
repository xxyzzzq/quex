init-state = 0L
00000 (23, 64), (50, 138), (91, 257)
     == 'b' ==> 00001
     == 'd' ==> 00006
    
00001 (23, 65), (50, 139, A, pre=53), (91, 258)
     == 'b' ==> 00001
     == 'c' ==> 00002
    
00002 (23, 67, A, pre=26), (91, 264)
     == 'c' ==> 00002
     == 'f' ==> 00003
    
00003 (91, 261)
     == 'g' ==> 00004
    
00004 (91, 262)
     == 'h' ==> 00005
    
00005 (91, 263, A)
    
00006 (23, 66, A, pre=26), (50, 140), (91, 259)
     == 'd' ==> 00006
     == 'e' ==> 00007
    
00007 (50, 141, A, pre=53), (91, 260)
     == 'e' ==> 00007
     == 'f' ==> 00003
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
    .from 1:
  .drop_out:
    if PreContext_53:  goto Pattern50;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
        if      PreContext_26: last_acceptance = Pattern23
        if 'PreContext_53': position[PostContext_50]  = input_p;
    .from 2: if      PreContext_26: last_acceptance = Pattern23
  .drop_out:
    if PreContext_26:  goto Pattern23;
    else if PreContext_53: pos = position[PostContext_50] ; goto Pattern50;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2: if 'PreContext_26': position[PostContext_23]  = input_p;
    .from 7: if 'PreContext_53': position[PostContext_50]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 50: pos = position[PostContext_50] ; goto Pattern50;
        case 23: pos = position[PostContext_23] ; goto Pattern23;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 50: pos = position[PostContext_50] ; goto Pattern50;
        case 23: pos = position[PostContext_23] ; goto Pattern23;


State 5:
  .entry:
    .from 4:
  .drop_out:
     goto Pattern91;


State 6:
  .entry:
    .from 0:
    .from 6:
  .drop_out:
    if PreContext_26:  goto Pattern23;
    pos = lexeme_start_p + 1;  goto Failure;


State 7:
  .entry:
    .from 6:
        if      PreContext_53: last_acceptance = Pattern50
        if 'PreContext_26': position[PostContext_23]  = input_p;
    .from 7: if      PreContext_53: last_acceptance = Pattern50
  .drop_out:
    if PreContext_53:  goto Pattern50;
    else if PreContext_26: pos = position[PostContext_23] ; goto Pattern23;
    pos = lexeme_start_p + 1;  goto Failure;


State 0:
        [FAILURE]: NONE/set([0L])

State 1:
        [FAILURE]: NONE/set([0L])
        [     50]: 53/set([1L])

State 2:
        [FAILURE]: NONE/set([0L])
        [     23]: 26/set([2L])
    (*) [     50]: 53/set([1L])

State 3:
        [FAILURE]: NONE/set([0L])
    (*) [     23]: 26/set([2L, 6L])
    (*) [     50]: 53/set([1L, 7L])

State 4:
        [FAILURE]: NONE/set([0L])
    (*) [     23]: 26/set([2L, 6L])
    (*) [     50]: 53/set([1L, 7L])

State 5:
        [     91]: NONE/set([5L])

State 6:
        [FAILURE]: NONE/set([0L])
        [     23]: 26/set([6L])

State 7:
        [FAILURE]: NONE/set([0L])
    (*) [     23]: 26/set([6L])
        [     50]: 53/set([7L])


--- Optimized States ---

State 2:
  .entry:
    .from 1:
        if      PreContext_26: last_acceptance = Pattern23
        if 'PreContext_53': position[PostContext_0]  = input_p;
    .from 2: if      PreContext_26: last_acceptance = Pattern23
  .drop_out:
    if PreContext_26:  goto Pattern23;
    else if PreContext_53: pos = position[PostContext_0] ; goto Pattern50;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2: if 'PreContext_26': position[PostContext_1]  = input_p;
    .from 7: if 'PreContext_53': position[PostContext_0]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 50: pos = position[PostContext_0] ; goto Pattern50;
        case 23: pos = position[PostContext_1] ; goto Pattern23;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 50: pos = position[PostContext_0] ; goto Pattern50;
        case 23: pos = position[PostContext_1] ; goto Pattern23;


State 7:
  .entry:
    .from 6:
        if      PreContext_53: last_acceptance = Pattern50
        if 'PreContext_26': position[PostContext_1]  = input_p;
    .from 7: if      PreContext_53: last_acceptance = Pattern50
  .drop_out:
    if PreContext_53:  goto Pattern50;
    else if PreContext_26: pos = position[PostContext_1] ; goto Pattern23;
    pos = lexeme_start_p + 1;  goto Failure;


