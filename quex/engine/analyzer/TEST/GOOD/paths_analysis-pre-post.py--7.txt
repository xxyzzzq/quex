init-state = 0L
00000 (1), (2), (3), (4), (5)
     == 'a' ==> 00001
     == 'b' ==> 00005
    
00001 (1, A, pre=1), (3, S), (4), (5)
     == 'a' ==> 00001
     == 'd' ==> 00002
    
00002 (3), (4, S), (5)
     == 'd' ==> 00002
     == 'e' ==> 00003
    
00003 (3), (4), (5, S)
     == 'f' ==> 00004
    
00004 (3, A, R, pre=3), (4, A, R, pre=4), (5, A, R, pre=5)
    
00005 (2, A, pre=2), (3), (4), (5)
     == 'c' ==> 00006
    
00006 (3, S), (4), (5)
     == 'c' ==> 00006
     == 'd' ==> 00002
    

State 0:
  .entry:
    .from NONE: last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0: if      PreContext_1: last_acceptance = Pattern1
    .from 1: if      PreContext_1: last_acceptance = Pattern1
  .drop_out:
    if PreContext_1:  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
        if 'PreContext_1': position[PostContext_1]  = input_p;
        if 'PreContext_3': position[PostContext_3]  = input_p;
    .from 2:
    .from 6: if 'PreContext_3': position[PostContext_3]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_1] ; goto Pattern1;
        case 2: pos = position[PostContext_2] ; goto Pattern2;


State 3:
  .entry:
    .from 2:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_1] ; goto Pattern1;
        case 2: pos = position[PostContext_2] ; goto Pattern2;


State 4:
  .entry:
    .from 3:
        if      PreContext_3: last_acceptance = Pattern3
        else if PreContext_4: last_acceptance = Pattern4
        else if PreContext_5: last_acceptance = Pattern5
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_1] ; goto Pattern1;
        case 2: pos = position[PostContext_2] ; goto Pattern2;
        case 3: pos = position[PostContext_3] ; goto Pattern3;
        case 4: pos -= 2;  goto Pattern4;
        case 5: pos -= 1;  goto Pattern5;


State 5:
  .entry:
    .from 0: if      PreContext_2: last_acceptance = Pattern2
  .drop_out:
    if PreContext_2:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .from 5: if 'PreContext_2': position[PostContext_2]  = input_p;
    .from 6:
  .drop_out:
    if PreContext_2: pos = position[PostContext_2] ; goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;



--- Optimized States ---

State 2:
  .entry:
    .from 1:
        if 'PreContext_1': position[PostContext_0]  = input_p;
        if 'PreContext_3': position[PostContext_2]  = input_p;
    .from 2:
    .from 6: if 'PreContext_3': position[PostContext_2]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_0] ; goto Pattern1;
        case 2: pos = position[PostContext_1] ; goto Pattern2;


State 3:
  .entry:
    .from 2:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_0] ; goto Pattern1;
        case 2: pos = position[PostContext_1] ; goto Pattern2;


State 4:
  .entry:
    .from 3:
        if      PreContext_3: last_acceptance = Pattern3
        else if PreContext_4: last_acceptance = Pattern4
        else if PreContext_5: last_acceptance = Pattern5
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_0] ; goto Pattern1;
        case 2: pos = position[PostContext_1] ; goto Pattern2;
        case 3: pos = position[PostContext_2] ; goto Pattern3;
        case 4: pos -= 2;  goto Pattern4;
        case 5: pos -= 1;  goto Pattern5;


State 6:
  .entry:
    .from 5: if 'PreContext_2': position[PostContext_1]  = input_p;
    .from 6:
  .drop_out:
    if PreContext_2: pos = position[PostContext_1] ; goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


