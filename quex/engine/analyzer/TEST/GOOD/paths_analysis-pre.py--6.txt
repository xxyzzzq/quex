init-state = 0L
00000 (2), (1), (3), (4)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (1, A), (3)
     == 'b' ==> 00002
    
00002 (3)
     == 'c' ==> 00003
    
00003 (3, A, pre=1)
    
00004 (2, A), (4)
     == 'b' ==> 00005
    
00005 (4)
     == 'c' ==> 00006
    
00006 (4, A, pre=2)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern1;


State 2:
  .entry:
    .from 1:
  .drop_out:
    pos -= 1;  goto Pattern1;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_1:  goto Pattern3;
    pos -= 2;  goto Pattern1;


State 4:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern2;


State 5:
  .entry:
    .from 4:
  .drop_out:
    pos -= 1;  goto Pattern2;


State 6:
  .entry:
    .from 5:
  .drop_out:
    if PreContext_2:  goto Pattern4;
    pos -= 2;  goto Pattern2;


State 0:
        [FAILURE]: NONE/set([0L])

State 1:
        [      1]: NONE/set([1L])

State 2:
        [      1]: NONE/set([1L])

State 3:
        [      1]: NONE/set([1L])
        [      3]: 1/set([3L])

State 4:
        [      2]: NONE/set([4L])

State 5:
        [      2]: NONE/set([4L])

State 6:
        [      2]: NONE/set([4L])
        [      4]: 2/set([6L])

