init-state = 0L
00000 (4, 8), (20, 45), (15, 33), (44, 108)
     == 'a' ==> 00001
     == 'b' ==> 00006
    
00001 (4, 9, A), (15, 34, S), (44, 110)
     == 'a' ==> 00002
    
00002 (4, 10, A), (15, 35), (44, 111)
     == 'a' ==> 00003
    
00003 (15, 36, A, R, pre=18), (44, 112)
     == 'c' ==> 00004
    
00004 (44, 113)
     == 'd' ==> 00005
    
00005 (44, 114, A)
    
00006 (20, 46, A), (44, 109)
     == 'b' ==> 00007
    
00007 (44, 112)
     == 'c' ==> 00004
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern4;


State 2:
  .entry:
    .accepter:
        last_acceptance = Pattern4
    .positioner:
        .from 1: <nothing>
  .drop_out:
     goto Pattern4;


State 3:
  .entry:
    .accepter:
        if      PreContext_18: last_acceptance = Pattern15
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_18: pos -= 2;  goto Pattern15;
    pos -= 1;  goto Pattern4;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
        .from 7: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 20: pos -= 2;  goto Pattern20;
        case 4: pos -= 2;  goto Pattern4;
        case 15: pos -= 3;  goto Pattern15;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
     goto Pattern44;


State 6:
  .entry:
    .accepter:
        last_acceptance = Pattern20
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern20;


State 7:
  .entry:
    .positioner:
        .from 6: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern20;


