init-state = 0L
00000 (41, 100), (8, 18), (17, 39)
     == 'x' ==> 00001
    
00001 (8, 19, S), (17, 40), (41, 101)
     == 'y' ==> 00002
    
00002 (8, 20), (17, 41, S), (41, 102)
     == 'a' ==> 00003
     == 'b' ==> 00007
    
00003 (8, 21, A, R), (41, 103)
     == 'c' ==> 00004
    
00004 (41, 104)
     == 'd' ==> 00005
    
00005 (41, 105)
     == 'e' ==> 00006
    
00006 (41, 106, A)
    
00007 (17, 42, A, R), (41, 103)
     == 'c' ==> 00004
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    pos -= 2;  goto Pattern8;


State 4:
  .entry:
    .from 3: last_acceptance = Pattern8
    .from 7: last_acceptance = Pattern17
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos -= 3;  goto Pattern8;
        case 17: pos -= 2;  goto Pattern17;


State 5:
  .entry:
    .from 4:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos -= 4;  goto Pattern8;
        case 17: pos -= 3;  goto Pattern17;


State 6:
  .entry:
    .from 5:
  .drop_out:
     goto Pattern41;


State 7:
  .entry:
    .from 2:
  .drop_out:
    pos -= 1;  goto Pattern17;


