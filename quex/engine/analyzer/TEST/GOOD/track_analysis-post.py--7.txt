init-state = 0L
00000() <~ (7, 15), (22, 53)
      == 'a' ==> 00001
      <no epsilon>
00001() <~ (7, 16), (22, 54)
      == 'b' ==> 00002
      <no epsilon>
00002(S12) <~ (7, 17), (22, 55, S12)
      == 'c' ==> 00003
      <no epsilon>
00003(A) <~ (7, 18, A), (22, 56)
      == 'd' ==> 00004
      <no epsilon>
00004() <~ (22, 57)
      == 'e' ==> 00005
      <no epsilon>
00005(A, R12) <~ (22, 58, A, R12)
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
     goto Pattern7;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern7;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    pos -= 3;  goto Pattern22;


