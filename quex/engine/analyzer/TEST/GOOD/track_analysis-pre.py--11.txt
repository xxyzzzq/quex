init-state = 0L
00000 (3, 6), (10, 20), (36, 83), (62, 150), (88, 217)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (3, 7, A, pre=6), (36, 85), (62, 152), (88, 218)
     == 'd' ==> 00002
    
00002 (36, 86), (62, 153), (88, 221)
     == 'e' ==> 00003
    
00003 (36, 87, A, pre=39), (62, 154, A, pre=65), (88, 222, A, pre=91)
    
00004 (10, 21, A, pre=13), (36, 84), (62, 151), (88, 219)
     == 'b' ==> 00005
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00005 (36, 88), (62, 155), (88, 220)
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00006 (36, 85), (62, 152), (88, 218)
     == 'd' ==> 00002
    

State 0:
  .entry:
    .accepter:
        last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .accepter:
        if      PreContext_6: last_acceptance = Pattern3
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_6:  goto Pattern3;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
        .from 4: if 'PreContext_13':  position[Acceptance] = input_p;
        .from 5: <nothing>
        .from 6: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 10: pos = position[Acceptance]; goto Pattern10;
        case 3: pos -= 1;  goto Pattern3;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    Checker:
        if      PreContext_39: accept = Pattern36
        else if PreContext_65: accept = Pattern62
        else if PreContext_91: accept = Pattern88
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 3: pos -= 2;  goto Pattern3;
        case 36: goto Pattern36;
        case 10: pos = position[Acceptance]; goto Pattern10;
        case 88: goto Pattern88;
        case 62: goto Pattern62;


State 4:
  .entry:
    .accepter:
        if      PreContext_13: last_acceptance = Pattern10
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_13:  goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: if 'PreContext_13':  position[Acceptance] = input_p;
  .drop_out:
    if PreContext_13: pos -= 1;  goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .positioner:
        .from 4: if 'PreContext_13':  position[Acceptance] = input_p;
        .from 5: <nothing>
  .drop_out:
    if PreContext_13: pos = position[Acceptance]; goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


