init-state = 0L
00000 (11, 22), (66, 160), (38, 87), (3, 6)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (3, 7, A, pre=7), (38, 88), (66, 162)
     == 'd' ==> 00002
    
00002 (38, 90), (66, 163, S)
     == 'e' ==> 00003
    
00003 (38, 92, A, pre=42), (66, 164, A, R, pre=70)
    
00004 (11, 23, A, pre=15), (38, 89), (66, 161)
     == 'b' ==> 00005
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00005 (38, 91), (66, 165)
     == 'c' ==> 00006
     == 'd' ==> 00002
    
00006 (38, 88), (66, 162)
     == 'd' ==> 00002
    

State 0:
  .entry:
    .accepter:
        last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .accepter:
        if      PreContext_7: last_acceptance = Pattern3
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_7:  goto Pattern3;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
        .from 4:if 'PreContext_15':  position[Acceptance] = input_p;
        .from 5: <nothing>
        .from 6: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 11: pos = position[Acceptance]; goto Pattern11;
        case 3: pos -= 1;  goto Pattern3;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    Checker:
        if      PreContext_42: accept = Pattern38
        else if PreContext_70: accept = Pattern66
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 11: pos = position[Acceptance]; goto Pattern11;
        case 66: pos -= 1;  goto Pattern66;
        case 3: pos -= 2;  goto Pattern3;
        case 38: goto Pattern38;


State 4:
  .entry:
    .accepter:
        if      PreContext_15: last_acceptance = Pattern11
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_15:  goto Pattern11;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4:if 'PreContext_15':  position[Acceptance] = input_p;
  .drop_out:
    if PreContext_15: pos -= 1;  goto Pattern11;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .positioner:
        .from 4:if 'PreContext_15':  position[Acceptance] = input_p;
        .from 5: <nothing>
  .drop_out:
    if PreContext_15: pos = position[Acceptance]; goto Pattern11;
    pos = lexeme_start_p + 1;  goto Failure;


