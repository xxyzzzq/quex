init-state = 0L
00000 (1, 29), (2, 62)
     == 'a' ==> 00001
    
00001 (1, 30, S), (2, 63, S)
     == 'b' ==> 00002
    
00002 (1, 31), (2, 64)
     == 'b' ==> 00002
     == 'd' ==> 00003
     == 'e' ==> 00004
    
00003 (1, 32, A, R)
    
00004 (2, 65, A, R)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
        position[PostContext_1]  = input_p;
        position[PostContext_2]  = input_p;
    .from 2:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    pos = position[PostContext_1] ; goto Pattern1;


State 4:
  .entry:
    .from 2:
  .drop_out:
    pos = position[PostContext_2] ; goto Pattern2;



--- Optimized States ---

State 2:
  .entry:
    .from 1: position[PostContext_0]  = input_p;
    .from 2:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern1;


State 4:
  .entry:
    .from 2:
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern2;


