init-state = 0L
00000 
     == 'a' ==> 00001
     == 'b' ==> 00006
    
00001 A(1), S2
     == 'a' ==> 00002
    
00002 A(1)
     == 'a' ==> 00003
    
00003 A(2,pre=1,R2)
     == 'c' ==> 00004
    
00004 
     == 'd' ==> 00005
    
00005 A(4)
    
00006 A(3)
     == 'b' ==> 00007
    
00007 
     == 'c' ==> 00004
    

State 0:
  .entry:
    .from BEFORE_ENTRY: 

.drop_out:
pos = lexeme_start_p + 1;  goto Failure;

State 1:
  .entry:
    .from 0: 

.drop_out:
goto Pattern1;

State 2:
  .entry:
    .from 1: last_acceptance = Pattern1

.drop_out:
goto Pattern1;

State 3:
  .entry:
    .from 2: if PreContext_1:  last_acceptance = Pattern2

.drop_out:
if PreContext_1: pos -= 2;  goto Pattern2;
pos -= 1;  goto Pattern1;

State 4:
  .entry:
    .from 3: 
    .from 7: 

.drop_out:
on last_acceptance:
case 1: pos -= 2;  goto Pattern1;
case 2: pos -= 3;  goto Pattern2;
case 3: pos -= 2;  goto Pattern3;


State 5:
  .entry:
    .from 4: 

.drop_out:
goto Pattern4;

State 6:
  .entry:
    .from 0: last_acceptance = Pattern3

.drop_out:
goto Pattern3;

State 7:
  .entry:
    .from 6: 

.drop_out:
pos -= 1;  goto Pattern3;

