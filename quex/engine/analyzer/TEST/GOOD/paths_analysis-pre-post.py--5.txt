init-state = 0L
00000 (1, 8), (3, 39), (2, 33), (4, 102)
     == 'a' ==> 00001
     == 'b' ==> 00006
    
00001 (1, 9, A), (2, 34, S), (4, 104)
     == 'a' ==> 00002
    
00002 (1, 10, A), (2, 35), (4, 105)
     == 'a' ==> 00003
    
00003 (2, 36, A, R, pre=1), (4, 106)
     == 'c' ==> 00004
    
00004 (4, 107)
     == 'd' ==> 00005
    
00005 (4, 108, A)
    
00006 (3, 40, A), (4, 103)
     == 'b' ==> 00007
    
00007 (4, 106)
     == 'c' ==> 00004
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern1;


State 2:
  .entry:
    .from 1:
  .drop_out:
     goto Pattern1;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_1: pos -= 2;  goto Pattern2;
    pos -= 1;  goto Pattern1;


State 4:
  .entry:
    .from 3:
        if      PreContext_1: last_acceptance = Pattern2
        else: last_acceptance = Pattern1
    .from 7: last_acceptance = Pattern3
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 1: pos -= 2;  goto Pattern1;
        case 2: pos -= 3;  goto Pattern2;
        case 3: pos -= 2;  goto Pattern3;


State 5:
  .entry:
    .from 4:
  .drop_out:
     goto Pattern4;


State 6:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern3;


State 7:
  .entry:
    .from 6:
  .drop_out:
    pos -= 1;  goto Pattern3;


