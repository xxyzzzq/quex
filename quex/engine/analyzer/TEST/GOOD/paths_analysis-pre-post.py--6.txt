init-state = 0L
00000 (2, 46), (1, 12), (3, 83)
     == 'a' ==> 00001
    
00001 (1, 13, A, pre=1), (2, 47, S), (3, 84)
     == 'a' ==> 00002
    
00002 (1, 14, A, pre=1), (2, 48), (3, 85)
     == 'a' ==> 00003
    
00003 (2, 49), (3, 86)
     == 'a' ==> 00004
    
00004 (2, 50, A, R, pre=2), (3, 87)
     == 'b' ==> 00005
    
00005 (3, 88, A)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    if PreContext_1:  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
  .drop_out:
    if PreContext_1:  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_1: pos -= 1;  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .from 3:
  .drop_out:
    if PreContext_2: pos -= 3;  goto Pattern2;
    else if PreContext_1: pos -= 2;  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .from 4:
  .drop_out:
     goto Pattern3;


