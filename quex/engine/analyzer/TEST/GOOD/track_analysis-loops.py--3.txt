init-state = 0L
00000 (50, 159), (104, 331)
     == 'a' ==> 00001
    
00001 (50, 160, A, pre=53), (104, 332, A, pre=107)
     == 'b' ==> 00002
    
00002 (50, 161), (104, 333)
     == 'c' ==> 00002
     == 'd' ==> 00003
    
00003 (50, 162), (104, 334)
     == 'e' ==> 00004
    
00004 (50, 163, A, pre=53), (104, 335, A, pre=107)
     == 'f' ==> 00005
    
00005 (50, 164), (104, 336)
     == 'g' ==> 00006
    
00006 (50, 165, A, pre=53), (104, 337, A, pre=107)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    if PreContext_53:  goto Pattern50;
    else if PreContext_107:  goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
        if 'PreContext_53': position[PostContext_50]  = input_p;
        if 'PreContext_107': position[PostContext_104]  = input_p;
    .from 2:
  .drop_out:
    if PreContext_53: pos = position[PostContext_50] ; goto Pattern50;
    else if PreContext_107: pos = position[PostContext_104] ; goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
        .from 2:
  .drop_out:
    if PreContext_53: pos = position[PostContext_50] ; goto Pattern50;
    else if PreContext_107: pos = position[PostContext_104] ; goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
        .from 3:
  .drop_out:
    if PreContext_53:  goto Pattern50;
    else if PreContext_107:  goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
        .from 4:
  .drop_out:
    if PreContext_53: pos -= 1;  goto Pattern50;
    else if PreContext_107: pos -= 1;  goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
        .from 5:
  .drop_out:
    if PreContext_53:  goto Pattern50;
    else if PreContext_107:  goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


State 0:
        [FAILURE]: NONE/set([0L])

State 1:
        [FAILURE]: NONE/set([0L])
        [     50]: 53/set([1L])
        [    104]: 107/set([1L])

State 2:
        [FAILURE]: NONE/set([0L])
    (*) [     50]: 53/set([1L])
    (*) [    104]: 107/set([1L])

State 3:
        [FAILURE]: NONE/set([0L])
    (*) [     50]: 53/set([1L])
    (*) [    104]: 107/set([1L])

State 4:
        [FAILURE]: NONE/set([0L])
        [     50]: 53/set([4L])
        [    104]: 107/set([4L])

State 5:
        [FAILURE]: NONE/set([0L])
        [     50]: 53/set([4L])
        [    104]: 107/set([4L])

State 6:
        [FAILURE]: NONE/set([0L])
        [     50]: 53/set([6L])
        [    104]: 107/set([6L])


--- Optimized States ---

State 2:
  .entry:
    .from 1:
        if 'PreContext_107': position[PostContext_0]  = input_p;
        if 'PreContext_53': position[PostContext_0]  = input_p;
    .from 2:
  .drop_out:
    if PreContext_53: pos = position[PostContext_0] ; goto Pattern50;
    else if PreContext_107: pos = position[PostContext_0] ; goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_53: pos = position[PostContext_0] ; goto Pattern50;
    else if PreContext_107: pos = position[PostContext_0] ; goto Pattern104;
    pos = lexeme_start_p + 1;  goto Failure;


