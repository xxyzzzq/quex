init-state = 0L
00000 (47, 125), (20, 50), (11, 29)
     == 'x' ==> 00001
    
00001 (11, 30, S), (20, 51), (47, 126)
     == 'y' ==> 00002
    
00002 (11, 31), (20, 52, S), (47, 127)
     == 'a' ==> 00003
     == 'b' ==> 00007
    
00003 (11, 32, A, R), (47, 128)
     == 'a' ==> 00003
     == 'c' ==> 00004
    
00004 (47, 130)
     == 'd' ==> 00005
    
00005 (47, 131)
     == 'e' ==> 00006
    
00006 (47, 132, A)
    
00007 (20, 53, A, R), (47, 129)
     == 'c' ==> 00004
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: position[PostContext_11]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .accepter:
        last_acceptance = Pattern11
    .positioner:
        .from 2: <nothing>
        .from 3: <nothing>
  .drop_out:
    pos = position[PostContext_11] ; goto Pattern11;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
        .from 7: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 11: pos = position[PostContext_11] ; goto Pattern11;
        case 20: pos -= 2;  goto Pattern20;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 11: pos = position[PostContext_11] ; goto Pattern11;
        case 20: pos -= 3;  goto Pattern20;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
     goto Pattern47;


State 7:
  .entry:
    .accepter:
        last_acceptance = Pattern20
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern20;



--- Optimized States ---

State 2:
  .entry:
    .positioner:
        .from 1: position[PostContext_0]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .accepter:
        last_acceptance = Pattern11
    .positioner:
        .from 2: <nothing>
        .from 3: <nothing>
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern11;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
        .from 7: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 11: pos = position[PostContext_0] ; goto Pattern11;
        case 20: pos -= 2;  goto Pattern20;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 11: pos = position[PostContext_0] ; goto Pattern11;
        case 20: pos -= 3;  goto Pattern20;


