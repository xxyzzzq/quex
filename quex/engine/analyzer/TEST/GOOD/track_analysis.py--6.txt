init-state = 0L
00000() <~ (1, 2), (20, 47)
      == 'a' ==> 00001
      == 'b' ==> 00005
      <no epsilon>
00001(A, S) <~ (1, 3, A, S), (20, 48)
      == 'b' ==> 00002
      <no epsilon>
00002() <~ (20, 49)
      == 'c' ==> 00003
      <no epsilon>
00003() <~ (20, 50)
      == 'd' ==> 00004
      <no epsilon>
00004(A, S) <~ (20, 51, A, S)
      <no epsilon>
00005(A, S) <~ (1, 3, A, S), (20, 49)
      == 'c' ==> 00003
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
     .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern1;


State 2:
  .entry:
     .positioner:
        .from 1: position[Acceptance] = input_p;
  .drop_out:
    pos -= 1;  goto Pattern1;


State 3:
  .entry:
     .positioner:
        .from 2: <nothing>
        .from 5: position[Acceptance] = input_p;
  .drop_out:
    pos = position[Acceptance]; goto Pattern1;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
     goto Pattern20;


State 5:
  .entry:
     .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern1;


