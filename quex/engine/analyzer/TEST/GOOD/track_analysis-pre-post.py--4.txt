init-state = 0L
00000 (10, 22), (24, 53), (45, 107)
     == 'a' ==> 00001
    
00001 (10, 23, S), (24, 54), (45, 108)
     == 'b' ==> 00002
    
00002 (10, 24), (24, 55), (45, 109)
     == 'c' ==> 00003
    
00003 (10, 25, A, R, pre=14), (24, 56, A, pre=28), (45, 110)
     == 'd' ==> 00004
    
00004 (45, 111)
     == 'e' ==> 00005
    
00005 (45, 112)
     == 'f' ==> 00006
    
00006 (45, 113, A)
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_14: pos -= 2;  goto Pattern10;
    else if PreContext_28:  goto Pattern24;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    if PreContext_14: pos -= 3;  goto Pattern10;
    else if PreContext_28: pos -= 1;  goto Pattern24;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    if PreContext_14: pos -= 4;  goto Pattern10;
    else if PreContext_28: pos -= 2;  goto Pattern24;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
     goto Pattern45;


