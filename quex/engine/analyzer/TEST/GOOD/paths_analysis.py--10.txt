init-state = 0L
00000 (2), (1)
     == '1' ==> 00001
     == 'a' ==> 00004
    
00001 (2)
     == 'e' ==> 00002
    
00002 (2)
     == 'f' ==> 00003
    
00003 (2, A)
    
00004 (1, A), (2)
     == 'b' ==> 00005
     == 'x' ==> 00001
    
00005 (1, A), (2)
     == 'e' ==> 00002
    

State 0:
  .entry:
    .from NONE: last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
    .from 4: position[PostContext_1]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos -= 1;  goto Pattern1;


State 2:
  .entry:
    .from 1:
    .from 5: position[PostContext_1]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_1] ; goto Pattern1;


State 3:
  .entry:
    .from 2:
  .drop_out:
     goto Pattern2;


State 4:
  .entry:
    .from 0: last_acceptance = Pattern1
  .drop_out:
     goto Pattern1;


State 5:
  .entry:
    .from 4:
        last_acceptance = Pattern1
        position[PostContext_1]  = input_p;
  .drop_out:
     goto Pattern1;



--- Optimized States ---

State 1:
  .entry:
    .from 0:
    .from 4: position[PostContext_0]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos -= 1;  goto Pattern1;


State 2:
  .entry:
    .from 1:
    .from 5: position[PostContext_0]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 1: pos = position[PostContext_0] ; goto Pattern1;


State 5:
  .entry:
    .from 4:
        last_acceptance = Pattern1
        position[PostContext_0]  = input_p;
  .drop_out:
     goto Pattern1;


