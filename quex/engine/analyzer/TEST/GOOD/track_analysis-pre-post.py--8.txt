init-state = 0L
00000 (54, 139), (10, 25), (24, 59)
     == 'x' ==> 00001
    
00001 (10, 26, S), (24, 60, S), (54, 140)
     == 'a' ==> 00002
     == 'b' ==> 00006
    
00002 (10, 27, A, R, pre=13), (54, 142)
     == 'a' ==> 00002
     == 'c' ==> 00003
    
00003 (54, 143)
     == 'd' ==> 00004
    
00004 (54, 144)
     == 'e' ==> 00005
    
00005 (54, 145, A)
    
00006 (24, 61, A, R, pre=27), (54, 141)
     == 'b' ==> 00006
     == 'c' ==> 00003
    

State 0:
  .entry:
    .from NONE: last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
        if      PreContext_13: last_acceptance = Pattern10
        if 'PreContext_13': position[PostContext_10]  = input_p;
    .from 2: if      PreContext_13: last_acceptance = Pattern10
  .drop_out:
    if PreContext_13: pos = position[PostContext_10] ; goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
    .from 6:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 24: pos = position[PostContext_24] ; goto Pattern24;
        case 10: pos = position[PostContext_10] ; goto Pattern10;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 24: pos = position[PostContext_24] ; goto Pattern24;
        case 10: pos = position[PostContext_10] ; goto Pattern10;


State 5:
  .entry:
    .from 4:
  .drop_out:
     goto Pattern54;


State 6:
  .entry:
    .from 1:
        if      PreContext_27: last_acceptance = Pattern24
        if 'PreContext_27': position[PostContext_24]  = input_p;
    .from 6: if      PreContext_27: last_acceptance = Pattern24
  .drop_out:
    if PreContext_27: pos = position[PostContext_24] ; goto Pattern24;
    pos = lexeme_start_p + 1;  goto Failure;



--- Optimized States ---

State 2:
  .entry:
    .from 1:
        if      PreContext_13: last_acceptance = Pattern10
        if 'PreContext_13': position[PostContext_0]  = input_p;
    .from 2: if      PreContext_13: last_acceptance = Pattern10
  .drop_out:
    if PreContext_13: pos = position[PostContext_0] ; goto Pattern10;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
    .from 6:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 24: pos = position[PostContext_0] ; goto Pattern24;
        case 10: pos = position[PostContext_0] ; goto Pattern10;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 24: pos = position[PostContext_0] ; goto Pattern24;
        case 10: pos = position[PostContext_0] ; goto Pattern10;


State 6:
  .entry:
    .from 1:
        if      PreContext_27: last_acceptance = Pattern24
        if 'PreContext_27': position[PostContext_0]  = input_p;
    .from 6: if      PreContext_27: last_acceptance = Pattern24
  .drop_out:
    if PreContext_27: pos = position[PostContext_0] ; goto Pattern24;
    pos = lexeme_start_p + 1;  goto Failure;


