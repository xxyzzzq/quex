init-state = 0L
00000 (25, 67)
     == 'a' ==> 00001
    
00001 (25, 68, A)
     == 'a' ==> 00002
     == 'b' ==> 00004
    
00002 (25, 69)
     == 'e' ==> 00003
    
00003 (25, 71, A)
    
00004 (25, 70)
     == 'c' ==> 00002
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern25;


State 2:
  .entry:
    .positioner:
        .from 1: position[Acceptance] = input_p;
        .from 4: <nothing>
  .drop_out:
    pos = position[Acceptance]; goto Pattern25;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
     goto Pattern25;


State 4:
  .entry:
    .positioner:
        .from 1: position[Acceptance] = input_p;
  .drop_out:
    pos -= 1;  goto Pattern25;


