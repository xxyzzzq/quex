init-state = 0L
00000 (6, 12), (24, 54), (42, 99)
     == 'a' ==> 00001
    
00001 (6, 13, A, pre=10), (24, 55, S), (42, 100)
     == 'a' ==> 00002
    
00002 (6, 14, A, pre=10), (24, 56), (42, 101)
     == 'a' ==> 00003
    
00003 (24, 57), (42, 102)
     == 'a' ==> 00004
    
00004 (24, 58, A, R, pre=28), (42, 103)
     == 'b' ==> 00005
    
00005 (42, 104, A)
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_10:  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    if PreContext_10:  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_10: pos -= 1;  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    if PreContext_28: pos -= 3;  goto Pattern24;
    else if PreContext_10: pos -= 2;  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
     goto Pattern42;


