init-state = 0L
00000 (23, 52), (6, 12), (40, 95)
     == 'a' ==> 00001
    
00001 (6, 13, A, pre=9), (23, 53, S), (40, 96)
     == 'a' ==> 00002
    
00002 (6, 14, A, pre=9), (23, 54), (40, 97)
     == 'a' ==> 00003
    
00003 (23, 55), (40, 98)
     == 'a' ==> 00004
    
00004 (23, 56, A, R, pre=26), (40, 99)
     == 'b' ==> 00005
    
00005 (40, 100, A)
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_9:  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    if PreContext_9:  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_9: pos -= 1;  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    if PreContext_26: pos -= 3;  goto Pattern23;
    else if PreContext_9: pos -= 2;  goto Pattern6;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
     goto Pattern40;


