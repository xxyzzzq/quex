init-state = 0L
00000 (1, 2), (20, 47)
     == 'a' ==> 00001
     == 'b' ==> 00005
    
00001 (1, 3, A, pre=bol), (20, 48)
     == 'b' ==> 00002
    
00002 (20, 49)
     == 'c' ==> 00003
    
00003 (20, 50)
     == 'd' ==> 00004
    
00004 (20, 51, A)
    
00005 (1, 3, A, pre=bol), (20, 49)
     == 'c' ==> 00003
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: if 'BeginOfLine':  position[Acceptance] = input_p;
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
        .from 5: if 'BeginOfLine':  position[Acceptance] = input_p;
  .drop_out:
    if BeginOfLine: pos = position[Acceptance]; goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
     goto Pattern20;


State 5:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


