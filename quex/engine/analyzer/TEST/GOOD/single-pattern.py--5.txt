init-state = 0L
00000 (26, 70)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (26, 72, S)
     == 'a' ==> 00001
     == 'd' ==> 00002
    
00002 (26, 73)
     == 'd' ==> 00002
     == 'f' ==> 00003
    
00003 (26, 74, A, R, pre=29)
    
00004 (26, 71)
     == 'c' ==> 00005
    
00005 (26, 75, S)
     == 'd' ==> 00002
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: if 'PreContext_29':  position[PostContext_26]  = input_p;
        .from 2: <nothing>
        .from 5: if 'PreContext_29':  position[PostContext_26]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_29: pos = position[PostContext_26] ; goto Pattern26;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;



--- Optimized States ---

State 2:
  .entry:
    .positioner:
        .from 1: if 'PreContext_29':  position[PostContext_0]  = input_p;
        .from 2: <nothing>
        .from 5: if 'PreContext_29':  position[PostContext_0]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_29: pos = position[PostContext_0] ; goto Pattern26;
    pos = lexeme_start_p + 1;  goto Failure;


