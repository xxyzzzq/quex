init-state = 0L
00000 (14, 31), (32, 72), (64, 157)
     == 'b' ==> 00001
     == 'd' ==> 00006
    
00001 (14, 33), (32, 73, A, pre=35), (64, 159)
     == 'c' ==> 00002
    
00002 (14, 32, A, pre=17), (64, 160)
     == 'f' ==> 00003
    
00003 (64, 161)
     == 'f' ==> 00003
     == 'g' ==> 00004
    
00004 (64, 162)
     == 'h' ==> 00005
    
00005 (64, 163, A)
    
00006 (14, 32, A, pre=17), (32, 74), (64, 158)
     == 'e' ==> 00007
    
00007 (32, 73, A, pre=35), (64, 160)
     == 'f' ==> 00003
    

State 0:
  .entry:
    .from NONE: last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0: if      PreContext_35: last_acceptance = Pattern32
  .drop_out:
    if PreContext_35:  goto Pattern32;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
        if      PreContext_17: last_acceptance = Pattern14
        if 'PreContext_35': position[PostContext_32]  = input_p;
  .drop_out:
    if PreContext_17:  goto Pattern14;
    else if PreContext_35: pos -= 1;  goto Pattern32;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2: if 'PreContext_17': position[PostContext_14]  = input_p;
    .from 3:
    .from 7: if 'PreContext_35': position[PostContext_32]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 32: pos = position[PostContext_32] ; goto Pattern32;
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 14: pos = position[PostContext_14] ; goto Pattern14;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 32: pos = position[PostContext_32] ; goto Pattern32;
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 14: pos = position[PostContext_14] ; goto Pattern14;


State 5:
  .entry:
    .from 4:
  .drop_out:
     goto Pattern64;


State 6:
  .entry:
    .from 0: if      PreContext_17: last_acceptance = Pattern14
  .drop_out:
    if PreContext_17:  goto Pattern14;
    pos = lexeme_start_p + 1;  goto Failure;


State 7:
  .entry:
    .from 6:
        if      PreContext_35: last_acceptance = Pattern32
        if 'PreContext_17': position[PostContext_14]  = input_p;
  .drop_out:
    if PreContext_35:  goto Pattern32;
    else if PreContext_17: pos -= 1;  goto Pattern14;
    pos = lexeme_start_p + 1;  goto Failure;


State 0:
        [FAILURE]: NONE/set([0L])

State 1:
        [FAILURE]: NONE/set([0L])
        [     32]: 35/set([1L])

State 2:
        [FAILURE]: NONE/set([0L])
        [     14]: 17/set([2L])
        [     32]: 35/set([1L])

State 3:
        [FAILURE]: NONE/set([0L])
    (*) [     14]: 17/set([2L, 6L])
    (*) [     32]: 35/set([1L, 7L])

State 4:
        [FAILURE]: NONE/set([0L])
    (*) [     14]: 17/set([2L, 6L])
    (*) [     32]: 35/set([1L, 7L])

State 5:
        [     64]: NONE/set([5L])

State 6:
        [FAILURE]: NONE/set([0L])
        [     14]: 17/set([6L])

State 7:
        [FAILURE]: NONE/set([0L])
        [     14]: 17/set([6L])
        [     32]: 35/set([7L])


--- Optimized States ---

State 2:
  .entry:
    .from 1:
        if      PreContext_17: last_acceptance = Pattern14
        if 'PreContext_35': position[PostContext_0]  = input_p;
  .drop_out:
    if PreContext_17:  goto Pattern14;
    else if PreContext_35: pos -= 1;  goto Pattern32;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2: if 'PreContext_17': position[PostContext_1]  = input_p;
    .from 3:
    .from 7: if 'PreContext_35': position[PostContext_0]  = input_p;
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 32: pos = position[PostContext_0] ; goto Pattern32;
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 14: pos = position[PostContext_1] ; goto Pattern14;


State 4:
  .entry:
    .from 3:
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 32: pos = position[PostContext_0] ; goto Pattern32;
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 14: pos = position[PostContext_1] ; goto Pattern14;


State 7:
  .entry:
    .from 6:
        if      PreContext_35: last_acceptance = Pattern32
        if 'PreContext_17': position[PostContext_1]  = input_p;
  .drop_out:
    if PreContext_35:  goto Pattern32;
    else if PreContext_17: pos -= 1;  goto Pattern14;
    pos = lexeme_start_p + 1;  goto Failure;




