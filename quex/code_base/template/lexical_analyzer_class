// -*- C++ -*-   vim: set syntax=cpp:
#ifndef __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$
#define __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$

// STL (Std C++ Lib)
#include<vector> 
#include<map>
#include<istream>  // gets: istream and wistream
#ifdef __QUEX_OPTION_UNIT_TEST
#   include <quex/code_base/StrangeStream_unit_tests>
#endif


// IConv Coding Name for the internally used character coding. 
// -- never use a dynamic length coding for the internal handling (e.g. never use UTF8)
// -- never use a coding that requires more bytes than QUEX_TYPE_CHARACTER contains,
//    e.g. do not use "UCS-4" (4 bytes) when the character type is uin16_t (2 bytes).
// Coding must be defined before the inclusion of 'definitions' since this file will
// otherwise define a default value
#define QUEX_SETTING_CORE_ENGINE_DEFAULT_CHARACTER_CODING ((char*)"$$CORE_ENGINE_CHARACTER_CODING$$")

#ifndef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE_DISABLED
$$SWITCH$$ QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
#endif
#ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
#   ifndef     QUEX_SETTING_TOKEN_QUEUE_SIZE
#       define QUEX_SETTING_TOKEN_QUEUE_SIZE  ((size_t)$$TOKEN_QUEUE_SIZE$$)
#   endif
#   ifndef     QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER
#       define QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER ((size_t)$$TOKEN_QUEUE_SAFETY_BORDER$$)
#   endif
#endif

// CHARACTER TYPE: Type that represents the number of bytes used in the engine to store
//                 a character. This is independent of the coding (ASCII, WinArabic, ...)
//
// Both character types are clearly related, because they are supposed to relate to the 
// same type of objects in memory. The following example shows, that 'uint8_t' and 'char'
// belong together, the lexeme type cannot be 'uint8_t' because the std-string functions
// accept 'char*' and not 'uint8_t' (which is most propperly 'unsigned char').
//
// NOTE: If in parallel another engine is built with other bytes per character settings,
//       then the engines will also include their own header with their own definition
//       of QUEX_TYPE_CHARACTER. Thus there is no danger at all. 
//       Templatifying the lexer would be possible, but the author has in mind to bring out
//       a 'pure C' version of the quex generated engine. Thus templating would make this 
//       goal harder achievable.
#include<quex/code_base/compatibility/inttypes.h>
#define QUEX_TYPE_CHARACTER   $$QUEX_TYPE_CHARACTER$$

// TOKEN DEFINITION: (Must come before 'quex/code_base/definitions' so that it wont
//                    override the QUEX_TYPE_TOKEN_ID.)
#include "$$TOKEN_ID_DEFINITION_FILE$$"
#include "$$TOKEN_CLASS_DEFINITION_FILE$$"

#include<quex/code_base/definitions>

#define QUEX_VERSION  "$$QUEX_VERSION$$"
// OPTIONS: ____________________________________________________________________
//
// Activate/Deactivate Options via comment/uncomment. Options without a 
// double underline '__' at the beginning can be turned off in the created 
// engine. Options that do start with '__' configure the machine for the
// specified behavior. Such options are better not touched.
//
// -- Line Number / Column Number Counting:
//    Turning counting off may result in engine speed-up.
#ifndef    QUEX_OPTION_LINE_NUMBER_COUNTING            
$$SWITCH$$ QUEX_OPTION_LINE_NUMBER_COUNTING         
#endif
#ifdef    QUEX_OPTION_LINE_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_LINE_NUMBER_COUNTING
#endif
#ifndef    QUEX_OPTION_COLUMN_NUMBER_COUNTING          
$$SWITCH$$ QUEX_OPTION_COLUMN_NUMBER_COUNTING       
#endif
#ifdef    QUEX_OPTION_COLUMN_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_COLUMN_NUMBER_COUNTING
#endif

// -- Mode Transitions:
//    If the engine was created without the flag '--no-mode-transition-check'
//    then code for mode transition control is inserted. It can be deactivated
//    by commenting the following option out.
#ifndef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
$$SWITCH$$ QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK_DISABLED
#   undef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif

// -- Verbosity
// #define QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED

// -- Debugging: 
//    If the engine was created with the '--debug' flag then it contains 
//    debugging code. The effect of this code fragments can be turned off
//    by commenting the following options out.
#ifndef QUEX_OPTION_DEBUG_TOKEN_SENDING
$$SWITCH$$ QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#ifdef QUEX_OPTION_DEBUG_TOKEN_SENDING_DISABLED
#   undef QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#ifndef    QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE_DISABLED
#   define QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE
#endif
#ifndef QUEX_OPTION_DEBUG_MODE_TRANSITIONS
$$SWITCH$$ QUEX_OPTION_DEBUG_MODE_TRANSITIONS
#endif
#ifdef QUEX_OPTION_DEBUG_MODE_TRANSITIONS_DISABLED
#   undef QUEX_OPTION_DEBUG_MODE_TRANSITIONS
#endif
#ifndef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
$$SWITCH$$ QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif
#ifdef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES_DISABLED
#   undef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif

// -- Include Stack Support:
//    Easy handling of include files/streams via 'push' and 'pop'
//    Turn this off, if you do not use 'inclusion' in your files and
//    you want to save some bytes.
#ifndef  QUEX_OPTION_INCLUDE_STACK_SUPPORT
$$SWITCH$$ QUEX_OPTION_INCLUDE_STACK_SUPPORT
#endif
#ifdef    QUEX_OPTION_INCLUDE_STACK_SUPPORT_DISABLED
#   undef QUEX_OPTION_INCLUDE_STACK_SUPPORT
#endif

#ifndef    QUEX_SETTING_BUFFER_LIMIT_CODE
#   define QUEX_SETTING_BUFFER_LIMIT_CODE     ($$BUFFER_LIMIT_CODE$$)
#endif

/* NOTE: A cast to 'size_t' would it make impossible to use the macro in 
 *       pre-processor comparisons.                                       */
#ifndef     QUEX_SETTING_BUFFER_SIZE
#    define QUEX_SETTING_BUFFER_SIZE  (/*(size_t)*/65536)
#endif

#ifndef  QUEX_OPTION_STRING_ACCUMULATOR
$$SWITCH$$ QUEX_OPTION_STRING_ACCUMULATOR
#endif 

//   If one mode requires indentation support, then the lexical analyser
//   class must be setup for indentation counting. The following flag is
//   defined or undefined by the lexical analyser generator quex.
$$SWITCH$$ __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
  
//   Quex can determine whether certain handlers are not used at all.
//   If so, computation time can be spared and quex comments the following
//   options out.
$$SWITCH$$ __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
#ifdef    __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
#endif
$$SWITCH$$ __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
#ifdef    __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
#endif
$$SWITCH$$ QUEX_OPTION_ENABLE_ICONV
#ifdef    QUEX_OPTION_ENABLE_ICONV_DISABLED
#   undef QUEX_OPTION_ENABLE_ICONV
#endif
$$SWITCH$$ QUEX_OPTION_ENABLE_ICU
#ifdef    QUEX_OPTION_ENABLE_ICU_DISABLED
#   undef QUEX_OPTION_ENABLE_ICU
#endif
#if defined(QUEX_OPTION_ENABLE_ICONV) || defined(QUEX_OPTION_ENABLE_ICU)
#    ifndef     QUEX_SETTING_TRANSLATION_BUFFER_SIZE
#        define QUEX_SETTING_TRANSLATION_BUFFER_SIZE ((size_t)65536)
#    endif
#else
#    ifndef     QUEX_SETTING_TRANSLATION_BUFFER_SIZE
#        define QUEX_SETTING_TRANSLATION_BUFFER_SIZE ((size_t)0)
#    endif
#endif
#define QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  $$CONVERTER_NEW$$

//   Begin of line pre-condition introduces an extra flag in the buffer
//   structure. Only out-comment this in case of tough memory restrictions,
//   if no begin of line pre-condition is required.
$$SWITCH$$ __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
#ifdef     __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION_DISABLED
#   undef  __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
#endif

namespace quex {
    template <class QuexCharacterType> class Quex$$LEXER_CLASS_NAME$$;
    class $$LEXER_CLASS_NAME$$;

$$LEX_ID_DEFINITIONS$$
}    

#include<quex/code_base/buffer/Buffer>
#include<quex/code_base/buffer/BufferFiller>

// Quex/User
#define CLASS            $$LEXER_CLASS_NAME$$

#include <quex/code_base/template/QuexMode>

#include <quex/code_base/template/Analyser>

#include <quex/code_base/template/Counter>
namespace quex { 
#ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
    typedef CounterWithIndentation CounterType;
#elif    defined(QUEX_OPTION_LINE_NUMBER_COUNTING) \
       | defined(QUEX_OPTION_COLUMN_NUMBER_COUNTING)
    typedef Counter                CounterType;
#else
    typedef CounterPseudo          CounterType;
#endif
}

#ifdef QUEX_OPTION_STRING_ACCUMULATOR
#   include <quex/code_base/template/Accumulator>
#endif
#ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
#   include <quex/code_base/TokenQueue>
#endif
#ifdef QUEX_OPTION_POST_CATEGORIZER
#   include <quex/code_base/template/PostCategorizer>
#endif
#ifdef QUEX_OPTION_INCLUDE_STACK_SUPPORT
#   include <quex/code_base/template/IncludeStack>
#endif

#ifndef    __QUEX_OPTION_ANALYZER_RETURNS_TOKEN_ID
$$SWITCH$$ __QUEX_OPTION_ANALYZER_RETURNS_TOKEN_ID
#endif

// START:
$$LEXER_DERIVED_CLASS_DECL$$
// :END

// User defined header content. _________________________________________________
//
// This is pasted after the definitions, such that the user can make use of them.
// START:
$$USER_DEFINED_HEADER$$
// :END

#include <quex/code_base/temporary_macros_on>
namespace quex {
    
$$MODE_SPECIFIC_ANALYSER_FUNCTIONS$$

    class CLASS :
        protected QuexAnalyser {

        /* DISABLED */ CLASS(const CLASS&);

    public:
        CLASS();
        CLASS(const std::string&        Filename,       const char* IConvInputCodingName = 0x0, 
              QuexBufferFillerTypeEnum  ICT=QUEX_AUTO);
        CLASS(std::istream*             p_input_stream, const char* IConvInputCodingName = 0x0, 
              QuexBufferFillerTypeEnum  ICT=QUEX_AUTO);
        CLASS(std::wistream*            p_input_stream, const char* IConvInputCodingName = 0x0, 
              QuexBufferFillerTypeEnum  ICT=QUEX_AUTO);
#       if defined(__QUEX_OPTION_UNIT_TEST)
        template <class UnderlyingStreamT>
        CLASS(quex::StrangeStream<UnderlyingStreamT>*  p_input_stream, 
              const char*                              IConvInputCodingName = 0x0, 
              QuexBufferFillerTypeEnum                 ICT=QUEX_AUTO);
#       endif
        CLASS(std::FILE*                input_fh,       const char* IConvInputCodingName = 0x0, 
              QuexBufferFillerTypeEnum  ICT=QUEX_AUTO);

        virtual ~CLASS();

        /* Direct Access to Memory */
        bool                  buffer_copy(QUEX_TYPE_CHARACTER* Content, const size_t Size);
        bool                  buffer_append(QUEX_TYPE_CHARACTER* Content, const size_t Size);
        void                  buffer_prepare(const size_t CharacterN);
        QUEX_TYPE_CHARACTER*  buffer_begin();
        QUEX_TYPE_CHARACTER*  buffer_end();
        const size_t          buffer_size();
        QUEX_TYPE_CHARACTER*  buffer_text_end();
        const size_t          buffer_distance_to_text_end();
        
        // -- token stream: read next token
#       ifdef __QUEX_OPTION_ANALYZER_RETURNS_TOKEN_ID
        QUEX_TYPE_TOKEN_ID   get_token();
        QUEX_TYPE_TOKEN_ID   get_token(QUEX_TYPE_TOKEN*   result_p);
#       ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
        QUEX_TYPE_TOKEN_ID   get_token(QUEX_TYPE_TOKEN**  result_pp);
#       endif
#       else
        void                 get_token();
        void                 get_token(QUEX_TYPE_TOKEN*   result_p);
#       ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
        void                 get_token(QUEX_TYPE_TOKEN**  result_pp);
#       endif
#       endif   
        //
        // (*) Mode handling
        //
        //     -- modes: read access
        QuexMode&     mode();
        const int     mode_id() const;
        const char*   mode_name() const;
        //
        //     -- modes: changing lexical analysis mode
        void        set_mode_brutally(const int       LexerMode);
        void        set_mode_brutally(const QuexMode& Mode);
        //
        void        operator<<(const int MODE_ID);               // not to be used in concatination
        void        operator<<(/* NOT const*/ QuexMode& Mode);  // not to be used in concatination
        //
        void        pop_mode();
        void        pop_drop_mode();
        void        push_mode(QuexMode& new_mode);
        //
        void        enter_mode(/* NOT const*/ QuexMode& TargetMode);
        //
        //     -- map: mode id to mode and vice versa
        QuexMode&   map_mode_id_to_mode(const int        ModeID);       
        const int   map_mode_to_mode_id(const QuexMode& Mode) const;

        // (*) Token sending
        void        send(); /* empty function, for uniformity (see token sending via singleton) */
        void        send(const $$TOKEN_CLASS$$& That);
        void        send(const QUEX_TYPE_TOKEN_ID TokenID);
        void        send_n(const int N, const QUEX_TYPE_TOKEN_ID TokenID);
        template <typename ContentT> 
        void        send(const QUEX_TYPE_TOKEN_ID TokenID, ContentT Content);


#       ifdef  QUEX_OPTION_LINE_NUMBER_COUNTING
        int  line_number() const          { return line_number_at_begin(); }
        int  line_number_at_begin() const { return counter._line_number_at_begin; }
        int  line_number_at_end() const   { return counter._line_number_at_end; }
#       endif
#       ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
        int  column_number() const          { return column_number_at_begin(); }
        int  column_number_at_begin() const { return counter._column_number_at_begin; }
        int  column_number_at_end() const   { return counter._column_number_at_end; }
#       endif
#       ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
        int  indentation()                    { return counter._indentation; }
        void disable_next_indentation_event() { counter.disable_next_indentation_event(); }
#       endif

        //
        // (*) Version information
        const char* version() const; // created by quex for version/date information

    private:
        // (*) Helper
        void    move_forward(const size_t);
        void    move_backward(const size_t);
        size_t  tell();
        void    seek(const size_t);

    public:
        // handle with extreme care:
        void   _reset();

        // (*) Mode database: allows to match from 'lex mode id' to a real mode object.
        //     LexModeID = 0 is not used, mode indices from 1 to ModeN 
        //     (compatibility to lex/flex core: INITIAL == 0, but initial is bend immediately
        //      to quex's start mode.)
        QuexMode*  mode_db[$$MAX_MODE_CLASS_N$$+1];  

    public:
$$MODE_OBJECT_MEMBERS$$

    private:
        QuexMode*   __current_mode_p;

        // -- with the quex core engine(s) each mode has a dedicated analyser function.
        //    (with the flex core engine, modes were modelled as start conditions
        //     of a single engine)
        //    The function pointer to the currently active mode's function is located in 
        //    the base class QUEX_CORE_ANALYSER_STRUCT
        //
    private:
        // (*) mode stack allows for pushing and popping of lexical analysis modes
        std::vector<QuexMode*>   _mode_stack;

        // NOTE: A pointer to an object of the token queue/object is used in order to make
        //       memory management more flexible. The token queue/token object is heavily
        //       used and it should be possible to put it somewhere in memory with other
        //       heavily used data so that the cache can take advantage of data locality.
#       ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE 
    private:
        // (*) The Token Queue ___________________________________________________________
        //     The token queue is **private**, because the user does not need direct
        //      access. get_token(Token**) is enough to get access to the current token. 
        QuexTokenQueue*   _token_queue;
#       else
    public:
        // (*) The Token _________________________________________________________________
        //     get_token(Token**) does not make a whole lot of sense, since the token 
        //     pointer always points to the same object. The object can be accessed
        //     by this **public** pointer.
        QUEX_TYPE_TOKEN*    token;
#       endif
    public:
        // (*) Who and what am I ? _______________________________________________________
        $$LEXER_DERIVED_CLASS_NAME$$&   self;

    private:
        // (*) Sometimes we just want to tell the filename, ... for destructor to close ..
        FILE*    __file_handle_allocated_by_constructor;

    public:
#       ifdef  QUEX_OPTION_INCLUDE_STACK_SUPPORT
        IncludeStack       include_stack;
#       endif 
        //      -- include events (a file is included)
        void virtual on_include(const char* Filename) {}
        void virtual on_include_exit() {}

#       ifdef QUEX_OPTION_STRING_ACCUMULATOR
    public:
        // (*) Accumulator (accumulate lexemes from multiple patterns ____________________
        Accumulator        accumulator;
#       endif
    private:
        CounterType        counter;
    public:
#       ifdef QUEX_OPTION_POST_CATEGORIZER
        PostCategorizer    post_categorizer;
#       endif

    private:
        // (*) All Modes are Friends _____________________________________________________
$$MODE_CLASS_FRIENDS$$  
        // (*) User defined Friends ______________________________________________________
$$LEXER_CLASS_FRIENDS$$
        // (*) User's Lexer Class Body Extenstion ________________________________________
$$CLASS_BODY_EXTENSION$$
#       ifdef QUEX_OPTION_INCLUDE_STACK_SUPPORT
        friend class       IncludeStack;
        friend class       IncludeStack::memento;
#       endif

    private:
        void __debug_print_transition(QuexMode* Source, QuexMode* Target);

        // (*) Common core of all constructors ___________________________________________
        template <class InputHandleT> 
        void                        __constructor_core(InputHandleT*, 
                                                       QuexBufferFillerTypeEnum, 
                                                       const char* IConvInputCodingName);

        QuexBufferFillerTypeEnum    __constructor_filler_assert(QuexBufferFillerTypeEnum BFT, 
                                                                const char* IANA_InputCodingName);
    };
 
    template <class InputHandleT> inline void
    CLASS::__constructor_core(InputHandleT*             input_handle, 
                              QuexBufferFillerTypeEnum  BFT, const char* IANA_InputCodingName)
    {
#       if defined(QUEX_OPTION_ASSERTS) && ! defined(QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED)
        std::cout << "###############################################################################\n";
        std::cout << "## NOTE: In order to disable this message, you can do two things. Either, \n";
        std::cout << "## define 'QUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED' which only disables\n";
        std::cout << "## this particular message, but leaves the asserts intact. Or, define the macro\n";
        std::cout << "## 'QUEX_OPTION_ASSERTS_DISABLED' which also disarms all internal asserts.\n";
        std::cout << "##-----------------------------------------------------------------------------\n";
        std::cout << "## You are running a lexical analyser generated by quex in 'paranoid' mode.\n";
        std::cout << "## This is very good, in a way that any tiny misbehavior will cause a comment\n";
        std::cout << "## and a program exit. However, the paranoia is a heavy load on speed perfor-\n";
        std::cout << "## mance!\n";
        std::cout << "##-----------------------------------------------------------------------------\n";
        std::cout << "## The lexical analyser is very low-level and the smallest error\n";
        std::cout << "## can have desastrous consequences. Leaving the asserts helps you to find\n";
        std::cout << "## subtle errors in your code--and if you find one in the lexical analyser, \n";
        std::cout << "## then please, report it at\n"; 
        std::cout << "##\n";
        std::cout << "##          http://sourceforge.net/tracker/?group_id=168259&atid=846112\n";
        std::cout << "##\n";
        std::cout << "###############################################################################\n";
#       endif

#       ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE 
        _token_queue = new QuexTokenQueue;
        QuexTokenQueue_init(_token_queue);
#       else
        token = new QUEX_TYPE_TOKEN;
        token_repetion_n = 0;
#       endif
        mode_db[0] = 0x0;
        // LexModeID = 0 is not used, mode indices from 1 to ModeN
$$CONSTRUCTOR_MODE_DB_INITIALIZATION_CODE$$

        set_mode_brutally($$INITIAL_LEXER_MODE_ID$$);

        if( BFT != QUEX_MEMORY ) {
            QuexAnalyser_construct((QuexAnalyser*)this,
                                   __current_mode_p->analyser_function,
                                   input_handle,
                                   BFT, IANA_InputCodingName, 
                                   QUEX_SETTING_BUFFER_SIZE,
                                   QUEX_SETTING_TRANSLATION_BUFFER_SIZE);
        } else {
            QuexAnalyser_construct_wo_filler((QuexAnalyser*)this,
                                             __current_mode_p->analyser_function,
                                             QUEX_SETTING_BUFFER_SIZE, 0, 0);
        }

$$CONSTRUCTOR_EXTENSTION$$
    }   

    inline const char* 
    CLASS::version() const
    { 
        return "$$LEXER_CLASS_NAME$$: Version $$LEXER_BUILD_VERSION$$. Date $$LEXER_BUILD_DATE$$\n"
               "Generated by Quex $$QUEX_VERSION$$";
    }
}

#include <quex/code_base/temporary_macros_off>

#define __QUEX_SETTING_DERIVED_CLASS_NAME    $$LEXER_DERIVED_CLASS_NAME$$
#define __QUEX_SETTING_MAX_MODE_CLASS_N      $$MAX_MODE_CLASS_N$$
#define __QUEX_SETTING_INITIAL_LEXER_MODE_ID $$INITIAL_LEXER_MODE_ID$$

#include <quex/code_base/template/constructor.i>
#include <quex/code_base/template/Counter.i>
#ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
#   include <quex/code_base/template/CounterWithIndentation.i>
#endif
#ifdef QUEX_OPTION_STRING_ACCUMULATOR
#    include <quex/code_base/template/Accumulator.i>
#endif

#include <quex/code_base/template/token_sending.i>
#include <quex/code_base/template/token_receiving.i>

#include <quex/code_base/template/mode_handling.i>
#ifdef  QUEX_OPTION_INCLUDE_STACK_SUPPORT
#   include <quex/code_base/template/IncludeStack.i>
#endif
#include <quex/code_base/template/misc.i>
#include <quex/code_base/template/buffer_access.i>

#undef __QUEX_SETTING_DERIVED_CLASS_NAME
#undef __QUEX_SETTING_MAX_MODE_CLASS_N
#undef __QUEX_SETTING_INITIAL_LEXER_MODE_ID 
#undef CLASS

#include <quex/code_base/template/Analyser.i>
#include <quex/code_base/buffer/converter/BufferFiller_Converter.i>

#if defined(QUEX_OPTION_ASSERTS) && defined (QUEX_OPTION_ASSERTS_DISABLED)
#    error "Ambiguous configuration options."
#endif
#endif // __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$
