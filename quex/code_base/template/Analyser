/* -*- C++ -*- vim: set syntax=cpp: */
#ifndef __INCLUDE_GUARD__QUEX__CODE_BASE__ANALYSER_MINIMAL__
#define __INCLUDE_GUARD__QUEX__CODE_BASE__ANALYSER_MINIMAL__

#include <quex/code_base/definitions>
#include <quex/code_base/buffer/Buffer>
#include <quex/code_base/buffer/BufferFiller>

#if ! defined(__QUEX_SETTING_PLAIN_C)
namespace quex {
#endif

    /* The following presents a minimal structure for a lexical analyser to work with the 
     * constructed engine. Actually, it should only be useful for unit tests. Else, it has
     * more a documentary character telling: This is the heart of the matter--anything else
     * is just decoration! Any 'real' lexical analyser should be derived from this class. */
    struct __QuexAnalyser_tag {
        QuexBuffer                   buffer;
        QUEX_ANALYSER_FUNCTION_TYPE  current_analyser_function;
#       ifdef QUEX_OPTION_ASSERTS
        /* When a mode change happens and the user does not 'return' but 'CONTINUE'
         * an error must be logged, since the following characters are still swallowed
         * by the current function and not the new one. For this one needs to return and
         * then continue further. */
        QUEX_ANALYSER_FUNCTION_TYPE  DEBUG_analyser_function_at_entry;
#       endif
    };
    typedef struct __QuexAnalyser_tag QuexAnalyser;

    QUEX_INLINE void
    QuexAnalyser_init(QuexAnalyser* me,
                      QUEX_ANALYSER_FUNCTION_TYPE AnalyserFunction,
                      QUEX_CHARACTER_TYPE* memory_chunk, const size_t Size, 
                      QuexBufferFiller*    BufferFiller);

#if ! defined(__QUEX_SETTING_PLAIN_C)
} /* namespace quex */
#endif

#include <quex/code_base/template/Analyser.i>
#endif /* __INCLUDE_GUARD__QUEX__CODE_BASE__ANALYSER_MINIMAL__ */
