/* -*- C++ -*- vim: set syntax=cpp: */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__ANALYSER
#define __QUEX_INCLUDE_GUARD__ANALYZER__ANALYSER
/****************************************************************************
 *
 * IMPORTANT NOTE:
 *
 * It is problematic to include 'Token' inside 'Analyzer'. This would create
 * problems with user defined token headers. Thus, we **must** include the
 * token class before header 'Analyser'                                     
 *
 ****************************************************************************/
#include <quex/code_base/definitions>
#include <quex/code_base/buffer/Buffer>
#include <quex/code_base/buffer/BufferFiller>

#include <quex/code_base/temporary_macros_on>

QUEX_NAMESPACE_MAIN_OPEN

    struct QUEX_NAME(Mode_tag);

    typedef struct QUEX_NAME(Engine_tag) {
        /* Analyzer Engine: This class provides the minimum information for the analyzis
         *                  process.                                                      */
        QUEX_NAME(Buffer)             buffer;

        /* Each mode has a dedicated analyzer function.  The function pointer
         * to the currently active mode's function is stored redundantly in 
         * 'current_analyzer_function' to accelerate the access to it.                    */
        struct QUEX_NAME(Mode_tag)*   __current_mode_p; 
        QUEX_TYPE_ANALYZER_FUNCTION  current_analyzer_function;

#if     defined(QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE) \
     || defined(QUEX_OPTION_ASSERTS)
        /* When a mode change happens and the user does not 'return' but 'CONTINUE'
         * an error must be logged, since the following characters are still swallowed
         * by the current function and not the new one. For this one needs to return and
         * then continue further.                                                         */
        QUEX_TYPE_ANALYZER_FUNCTION  DEBUG_analyzer_function_at_entry;
#       endif

    } QUEX_NAME(Engine);

    TEMPLATE_IN(InputHandleT) void
    QUEX_NAME(Engine_construct)(QUEX_NAME(Engine)*   me,
                                QUEX_TYPE_ANALYZER_FUNCTION  AnalyserFunction,
                                InputHandleT*                input_handle,
                                QUEX_TYPE_CHARACTER*         InputMemory,
                                const size_t                 BufferMemorySize,
                                const char*                  CharacterEncodingName, 
                                const size_t                 TranslationBufferMemorySize,
                                bool                         ByteOrderReversionF);

    QUEX_INLINE void 
    QUEX_NAME(Engine_destruct)(QUEX_NAME(Engine)* me);

    TEMPLATE_IN(InputHandleT) void
    QUEX_NAME(Engine_reset)(QUEX_NAME(Engine)*   me,
                            QUEX_TYPE_ANALYZER_FUNCTION  AnalyserFunction,
                            InputHandleT*                input_handle, 
                            const char*                  CharacterEncodingName, 
                            const size_t                 TranslationBufferMemorySize);

    QUEX_INLINE bool 
    QUEX_NAME(Engine_buffer_reload_backward)(QUEX_NAME(Buffer)* buffer);

    QUEX_INLINE bool 
    QUEX_NAME(Engine_buffer_reload_forward)(QUEX_NAME(Buffer)*         buffer, 
                                            QUEX_TYPE_CHARACTER_POSITION* last_acceptance_input_position,
                                            QUEX_TYPE_CHARACTER_POSITION* post_context_start_position,
                                            const size_t                  PostContextN);


QUEX_NAMESPACE_MAIN_CLOSE

#include <quex/code_base/temporary_macros_off>

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__ANALYSER */
