/* -*- C++ -*- vim: set syntax=cpp:
 * (C) 2005-2010 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY              */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__MEMBER__TOKEN_SENDING
#define __QUEX_INCLUDE_GUARD__ANALYZER__MEMBER__TOKEN_SENDING

#include <quex/code_base/token/TokenPolicy>

QUEX_NAMESPACE_MAIN_OPEN

#   define self (*this)

#   define self_token_p()      (__QUEX_CURRENT_TOKEN_P)

#   define self_send(ID)                    \
        do {                                    \
            __QUEX_ASSERT_SEND_ENTRY();         \
            self_token_set_id(ID);              \
            QUEX_TOKEN_POLICY_PREPARE_NEXT();   \
        } while ( 0 )

#ifdef     QUEX_OPTION_TOKEN_REPETITION_SUPPORT
#   define self_send_n(RepetitionN, ID)     \
        do {                                                                \
            self_token_set_id(ID);                                          \
            QUEX_NAME_TOKEN(repetition_n_set)(self_token_p(), RepetitionN); \
            QUEX_TOKEN_POLICY_PREPARE_NEXT();                               \
        } while ( 0 )
#else
#   define self_send_n(RepetitionN, ID) \
        QUEX_ERROR_EXIT("\n" \
          QUEX_SOURCE_POS() "Use of self_send_n() without repetition support.\n" \
          QUEX_SOURCE_POS() "Define at least 'repeated_token_id' in the quex file.")
#endif

#define self_send1(ID, Str)                                   \
        do {                                                  \
            __QUEX_ASSERT_SEND_ENTRY();                       \
            self_token_set_id(ID);                            \
            QUEX_NAME_TOKEN(take_text)(self_token_p(), &self,           \
                                       (Str),                           \
                                       (Str) + QUEX_NAME(strlen)(Str)); \
            QUEX_TOKEN_POLICY_PREPARE_NEXT();                           \
        } while ( 0 )

#define self_send2(ID, StrBegin, StrEnd)          \
        do {                                      \
            __QUEX_ASSERT_SEND_ENTRY();           \
            self_token_set_id(ID);                             \
            QUEX_NAME_TOKEN(take_text)(self_token_p(), &self,  \
                                       (StrBegin), (StrEnd));  \
            QUEX_TOKEN_POLICY_PREPARE_NEXT();                  \
        } while ( 0 )


#   undef self

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__MEMBER__TOKEN_SENDING */

