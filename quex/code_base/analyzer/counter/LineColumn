/* -*- C++ -*-   vim: set syntax=cpp:
 * (C) Frank-Rene Schaefer                               */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN
#define __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN

#if ! defined(__QUEX_SETTING_PLAIN_C)
#include <cstddef> 
#else
#include <stddef.h>
#endif
#include <quex/code_base/definitions>
#include <quex/code_base/analyzer/counter/Base>

QUEX_NAMESPACE_COMPONENTS_OPEN

    typedef struct {
        __CounterBase  base;
    } Counter;

    QUEX_INLINE void  Counter_construct(Counter* me, struct QUEX_TYPE_ANALYZER_DATA_TAG* lexer);
    QUEX_INLINE void  Counter_copy_construct(Counter* me, const Counter* That);
    QUEX_INLINE void  Counter_reset(Counter* me);

    QUEX_INLINE void  Counter_count(Counter* me, QUEX_TYPE_CHARACTER* Lexeme, QUEX_TYPE_CHARACTER* LexemeEnd);
    QUEX_INLINE void  Counter_count_NoNewline(Counter* me, const ptrdiff_t LexemeLength);
    QUEX_INLINE void  Counter_count_FixNewlineN(Counter*             me,
                                                QUEX_TYPE_CHARACTER* Lexeme,
                                                QUEX_TYPE_CHARACTER* LexemeEnd,
                                                const int            LineNIncrement);

    QUEX_INLINE QUEX_TYPE_CHARACTER*
    __Counter_count_chars_to_newline_backwards(Counter* me, QUEX_TYPE_CHARACTER* Begin,
                                             QUEX_TYPE_CHARACTER* End,
                                             const ptrdiff_t      LexemeLength,
                                             const bool           LicenseToIncrementLineCountF /*=false*/);

    QUEX_INLINE void  Counter_print_this(Counter* me);


QUEX_NAMESPACE_COMPONENTS_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN */
