/* -*- C++ -*-   vim: set syntax=cpp:
 *
 * (C) 2004-2009 Frank-Rene Schaefer
 *
 * __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN_INDENTATION_I__ may be undefined in case
 *    that multiple lexical analyzers are used. Then, the name of the
 *    QUEX_TYPE_ACCUMULATOR must be different.                             */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN_INDENTATION
#define __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN_INDENTATION

#if ! defined(__QUEX_SETTING_PLAIN_C)
#include <cstddef> 
#else
#include <stddef.h>
#endif
#include <quex/code_base/definitions>
#include <quex/code_base/analyzer/Analyser>
#include <quex/code_base/analyzer/counter/Base>

QUEX_NAMESPACE_COMPONENTS_OPEN

#   ifdef __QUEX_OPTION_COUNTER
    QUEX_INLINE void  Counter_shift_end_values_to_start_values(__CounterBase* me);
#   else
#      define Counter_shift_end_values_to_start_values(me)  /* empty */
#   endif

    struct QUEX_TYPE_ANALYZER_DATA_TAG;

    typedef struct {
        __CounterBase   base;

        struct QUEX_TYPE_ANALYZER_DATA_TAG*   _the_lexer;

        int     _indentation;                 /* number of columns to first non-whitespace  */
        /*                                     * in the current line.                       */
        bool    _indentation_count_enabled_f; /* count whitespace for indentation?          */
        bool    _indentation_event_enabled_f; /* trigger when first non-whitespace occurs?  */
    } CounterWithIndentation;

    QUEX_INLINE void
    CounterWithIndentation_construct(CounterWithIndentation* me, struct QUEX_TYPE_ANALYZER_DATA_TAG* lexer);

    QUEX_INLINE void
    CounterWithIndentation_copy_construct(CounterWithIndentation* me, const CounterWithIndentation* That);

    QUEX_INLINE void
    CounterWithIndentation_init(CounterWithIndentation* me);

    QUEX_INLINE void
    CounterWithIndentation_on_end_of_file(CounterWithIndentation* me);

    QUEX_INLINE void    
    CounterWithIndentation_icount(CounterWithIndentation*  me,
                                  QUEX_TYPE_CHARACTER*     Lexeme,
                                  QUEX_TYPE_CHARACTER*     LexemeEnd);

    QUEX_INLINE void
    __CounterWithIndentation_count_whitespace_to_first_non_whitespace(CounterWithIndentation* me,
                                                                      QUEX_TYPE_CHARACTER* start_consideration_it, 
                                                                      QUEX_TYPE_CHARACTER* Begin,
                                                                      QUEX_TYPE_CHARACTER* End,
                                                                      const bool           LicenseToIncrementLineCountF);
    QUEX_INLINE void    
    CounterWithIndentation_icount_NoNewline(CounterWithIndentation*  me,
                                            QUEX_TYPE_CHARACTER*     Lexeme,
                                            const int                LexemeL);
    QUEX_INLINE void  
    CounterWithIndentation_icount_NoNewline_NeverStartOnWhitespace(CounterWithIndentation* me, 
                                                                   const int ColumnNIncrement); 

    QUEX_INLINE void  
    CounterWithIndentation_icount_NoNewline_ContainsOnlySpace(CounterWithIndentation*  me, 
                                                              const int                ColumnNIncrement);

    QUEX_INLINE void
    CounterWithIndentation_count_indentation_aux(CounterWithIndentation*  me,
                                                 QUEX_TYPE_CHARACTER*     start_consideration_it,
                                                 QUEX_TYPE_CHARACTER*     Begin,
                                                 QUEX_TYPE_CHARACTER*     End, 
                                                 const bool               LicenseToIncrementLineCountF);
    QUEX_INLINE void 
    CounterWithIndentation_print_this(CounterWithIndentation* me);

QUEX_NAMESPACE_COMPONENTS_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN_INDENTATION */
