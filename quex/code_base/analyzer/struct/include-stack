/* -*- C++ -*- vim: set syntax=cpp:
 * (C) 2005-2010 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY              */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__STRUCT__INCLUDE_STACK
#define __QUEX_INCLUDE_GUARD__ANALYZER__STRUCT__INCLUDE_STACK

#include <quex/code_base/definitions>

QUEX_NAMESPACE_MAIN_OPEN 

#ifdef __QUEX_OPTION_PLAIN_C

/* The constructor 'core' function is implemented per analyzer.
 * It's implementation happens inside the generated source file.             */

/* Level (1) __________________________________________________________________
 *                                                                           */
QUEX_INLINE bool QUEX_NAME(include_push_file_name)(QUEX_TYPE_ANALYZER*  me,
                                                   const char*          Filename, 
                                                   const char*          CodecName /* = 0x0   */);

/* Level (2) __________________________________________________________________
 *                                                                           */
QUEX_INLINE bool QUEX_NAME(include_push_FILE)(QUEX_TYPE_ANALYZER*  me,
                                              const char*          InputName,
                                              __QUEX_STD_FILE*     fh, 
                                              const char*          CodecName   /* = 0x0   */,
                                              bool                 BinaryModeF /* = false */);

#if defined(QUEX_OPTION_POSIX)
QUEX_INLINE bool QUEX_NAME(include_push_POSIX)(QUEX_TYPE_ANALYZER*  me,
                                               const char*          InputName,
                                               __QUEX_STD_FILE*     fh, 
                                               const char*          CodecName /* = 0x0   */);
#endif


/* Level (3) __________________________________________________________________
 *                                                                           */
QUEX_INLINE bool QUEX_NAME(include_push_ByteLoader)(
                           QUEX_TYPE_ANALYZER*    me,
                           const char*            InputName,
                           QUEX_NAME(ByteLoader)* byte_loader,
                           const char*            CodecName);

/* Level (4) __________________________________________________________________
 *                                                                           */
QUEX_INLINE bool QUEX_NAME(include_push_BufferFiller)(
                           QUEX_TYPE_ANALYZER*      me,
                           const char*              InputName,
                           QUEX_NAME(BufferFiller)* filler); 

/* Level (5) __________________________________________________________________
 *                                                                           */
QUEX_INLINE bool QUEX_NAME(include_push_memory)(
                           QUEX_TYPE_ANALYZER*  me,
                           const char*          InputName,
                           QUEX_TYPE_CHARACTER* BufferMemoryBegin, 
                           size_t               BufferMemorySize,
                           QUEX_TYPE_CHARACTER* BufferEndOfFileP); 

/* Basic constructions ________________________________________________________
 *                                                                           */
QUEX_INLINE bool   QUEX_NAME(basic_include_push)(QUEX_TYPE_ANALYZER* me,
                                                 const char*         InputName,
                                                 QUEX_NAME(Buffer)*  new_buffer_setup);
QUEX_INLINE bool   QUEX_NAME(user_memento_pack)(QUEX_TYPE_ANALYZER*            me, 
                                                const char*                    InputName,
                                                struct QUEX_NAME(Memento_tag)* memento);
QUEX_INLINE void   QUEX_NAME(user_memento_unpack)(QUEX_TYPE_ANALYZER*            me, 
                                                  struct QUEX_NAME(Memento_tag)* memento);

QUEX_INLINE bool   QUEX_NAME(include_pop)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE void   QUEX_NAME(include_stack_delete)(QUEX_TYPE_ANALYZER* me);
QUEX_INLINE bool   QUEX_NAME(include_detect_recursion)(QUEX_TYPE_ANALYZER* me,
                                                       const char*         InputName);

#endif

QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__STRUCT__INCLUDE_STACK */
