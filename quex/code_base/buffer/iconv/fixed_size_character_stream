// : -*- C++ -*-  vim: set syntax=cpp:
// (C) 2007 Frank-Rene Schaefer
#ifndef __INCLUDE_GUARD__QUEX_BUFFER_INPUT_STRATEGY_ICONV__
#define __INCLUDE_GUARD__QUEX_BUFFER_INPUT_STRATEGY_ICONV__
//
//  PURPOSE:
//  
//  Reads data from a stream and converts the incoming characters into a
//  character format required by the user. The user can specify the coding
//  format of the input stream as well as the coding format in which he
//  wants it to be put into his buffer.
//
//  NOTE: Streams for the quex::buffer comply to three simple requirements:
//
//        tell()          returning a value of the current input position
//        seek(pos)       sets the the current input position in the stream
//        read_characters(buffer, N) fills the buffer with N characters from the stream.
//                                   returns the number of actually filled characters.
//  
//  ASSUMPTION: 
//  
//  -- The input character format is arbitrary. It can be anything that is
//     supported by 'iconv'. Flexible character length codings are supported.
//  
//  -- The user's characters format has a fixed character size for each
//     character. Any coding that involves different byte numbers for different
//     characters or 'history' cannot be provided as user format.
//  
//  PRINCIPLE: 
//  
//  A data stream delivers characters in an arbitrary coding format.
//  These characters are stored bytewise inside a 'raw buffer'. Then this data is
//  transformed into the users coding format. The result is directly put into
//  the user's buffer. 
//  
//  (1) Fill as many bytes from the stream into the raw buffer
//  
//       Stream:         ||aa.aa.aa.bb.cc.cc.cc.cc.dd.dd.ee.ee.ee.ee.ff.ff.gg.||
//  
//       Raw Buffer:     ||aa.aa.aa.bb.cc.cc.cc.cc.dd.dd.ee.ee.ee||
//  
//  
//  (2) Convert characters in the raw buffer and store into users buffer
//  
//        User's Buffer: ||AA.AA.BB.BB.CC.CC________________________||
//  
//  (2b) If user's buffer is filled, than **QUIT**
//  
//  (3a) Copy unconverted bytes to the beginning of the raw buffer
//  
//        Raw Buffer:    ||ee.ee.ee______________________________||
//  
//  (3b) Load remaining bytes from the stream into raw buffer
//  
//        Raw Buffer:    ||ee.ee.ee.ee.ff.ff.gg.hh.ii.ii.________||
//         
//        Goto (2)
//  
//  (2) Convert characters from raw buffer and store them into user's buffer
//  
//        User's Buffer: ||AA.AA.BB.BB.CC.CC.DD.DD.EE.EE.FF.FF.GG.GG||
//  
//  (2b) see above.


#include <quex/code_base/asserts>
#include <quex/code_base/buffer/input_policy>
#include <quex/code_base/buffer/fixed_size_character_stream>

#include <iostream>       // for: fixed_size_character_stream_base<istream*>
#include <cstdio>         // for: fixed_size_character_stream_base<FILE*>
#include <cerrno>
#include <stdexcept>
extern "C" { 
#include <iconv.h>
#include <quex/code_base/compatibility/inttypes.h>
}
#include <quex/code_base/compatibility/iconv-argument-types.h>

namespace quex {

    template <class InputHandleType, class CharacterCarrierType>
    class fixed_size_character_stream_iconv
        : public fixed_size_character_stream<CharacterCarrierType> {


        static const size_t SizeOfCharacter = sizeof(CharacterCarrierType);
        typedef typename InputPolicy<InputHandleType*>::stream_position stream_position;
        typedef typename InputPolicy<InputHandleType*>::stream_offset   stream_offset;
       
        /* DISABLED */ fixed_size_character_stream_iconv();

     public:
        // NOTE: It makes sense to have multiple fixed_size_character_stream_iconv objects use
        //       the same raw buffer, since this buffer is only used temporarily
        //       while loading.
        fixed_size_character_stream_iconv(InputHandleType* input_handle, 
                                          uint8_t* raw_buffer_p, size_t raw_buffer_size,
                                          const char* FromCoding, const char* ToCoding);
        ~fixed_size_character_stream_iconv();

        virtual size_t    tell_character_index()                 { return InputPolicy<InputHandleType*>::tell(ih); }
        virtual void      seek_character_index(const size_t Pos) { 
            long tmp = (long)Pos;
            InputPolicy<InputHandleType*>::seek(ih, tmp); 
        }
        virtual void      close()                                {  }
        virtual void      destroy_handle()                       { if( ih ) delete ih; ih = 0x0; }

        virtual size_t    read_characters(CharacterCarrierType* buffer, const size_t N);
        virtual void      register_begin_of_file();

    private:
        struct buffer_info {
            uint8_t*  start;
            size_t    size;
            uint8_t*  position;
            size_t    bytes_left_n;

            void   print(const char* name, int until_idx=-1); 
        };

        // (*) housekeeping for statistics:
        struct statistic_info {
            float    avrg;
            size_t   sample_n;
            void     adapt(size_t ConvertedByteN, buffer_info* user_buffer, size_t SizeOfChar);
            size_t   estimate_raw_byte_n(const int CharacterN, const size_t BufferSize);
        };

        InputHandleType* ih;
        stream_position  start_position;  // position in stream where analysis started
        size_t           next_character_to_be_read_i;

        // -- conversion data
        iconv_t          iconv_handle;

        buffer_info      raw_buffer;
        statistic_info   statistics;

        size_t __convert(const size_t LoadedByteN, buffer_info* user_buffer);
        size_t __prepare_next_run(size_t iconv_report, buffer_info* user_buffer);

#       ifdef __QUEX_OPTION_UNIT_TEST_INPUT_STRATEGY_ICONV
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_CONSTRUCTOR(const char* From, const char* To,
                                                                   iconv_t IconvResult);
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_BUFFER_LOAD(size_t LoadedByteN);
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_ICONV_REPORT(size_t Report);
        void QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_AND_USER_BUFFER(buffer_info* user_buffer);
#       endif
    };
}

#include <quex/code_base/buffer/iconv/debug.i>

#define TEMPLATE_IN  template<class InputHandleType, class CharacterCarrierType>
#define CLASS        fixed_size_character_stream_iconv<InputHandleType, CharacterCarrierType>

namespace quex {

    TEMPLATE_IN 
        CLASS::fixed_size_character_stream_iconv(InputHandleType* input_handle, 
                                                 uint8_t*    raw_buffer_p, size_t      raw_buffer_size,
                                                 const char* FromCoding,   const char* ToCoding) 
        { 
            ih = input_handle;

            raw_buffer.start = raw_buffer_p;
            raw_buffer.size  = raw_buffer_size;

            iconv_handle = iconv_open(ToCoding, FromCoding);

            statistics.avrg     = 2.0;
            statistics.sample_n = 0;

            next_character_to_be_read_i = (size_t)0;

            QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_CONSTRUCTOR(FromCoding, ToCoding, iconv_handle);
        }

    TEMPLATE_IN CLASS::~fixed_size_character_stream_iconv() 
    { iconv_close(iconv_handle); }

    TEMPLATE_IN size_t 
        CLASS::read_characters(CharacterCarrierType* user_buffer_p, const size_t N) 
    {
        // NOTE: There was an idea to allow multiple fixed_size_character_stream_iconv objects
        //       access to the same intermediate buffer. In this case (i.e.
        //       this function is called with the same raw_buffer.start
        //       inside two threads) the function would have to block.

        buffer_info  user_buffer;

        user_buffer.start        = (uint8_t*)user_buffer_p;
        user_buffer.size         = N * SizeOfCharacter;
        user_buffer.position     = user_buffer.start;
        user_buffer.bytes_left_n = user_buffer.size;

        raw_buffer.position      = raw_buffer.start;
        raw_buffer.bytes_left_n  = raw_buffer.size;

        // -- estimated number of bytes to be read 
        //    however:  we cannot read more than the size of the intermediate buffer allows
        size_t bytes_to_read = statistics.estimate_raw_byte_n(N, raw_buffer.size); 
        //
        while( 1 + 1 == 2 ) {
            const size_t LoadedByteN = \
                         InputPolicy<InputHandleType*>::load_bytes(ih, raw_buffer.position, bytes_to_read);

            QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_BUFFER_LOAD(LoadedByteN);

            // -- convert raw data and store in target buffer
            size_t report = __convert(LoadedByteN, &user_buffer);
            const size_t ConvertedByteN = LoadedByteN - raw_buffer.bytes_left_n;
            statistics.adapt(ConvertedByteN, &user_buffer, SizeOfCharacter);

            // -- has user buffer been filled to the given limit N ?
            if( ! user_buffer.bytes_left_n ) { 
               next_character_to_be_read_i += N;
               return /* sum converted characters = */ N;
            }

            // -- are there still bytes in the stream? 
            if( LoadedByteN != bytes_to_read )  { 
               next_character_to_be_read_i += statistics.sample_n;
               return statistics.sample_n; // EOF
            }

            // -- are there some bytes stuck in the intermediate buffer?
            //    principally no, otherwise they should have been converted.
            //    however, it is possible that one cut in between a character 
            //    code (return value == -1).
            __quex_assert( report == (size_t)(-1) || raw_buffer.bytes_left_n == 0 );

            __prepare_next_run(report, &user_buffer);
        };
    }

    TEMPLATE_IN size_t CLASS::__convert(const size_t LoadedByteN, buffer_info* user_buffer) 
    {
        raw_buffer.bytes_left_n = LoadedByteN + (raw_buffer.position - raw_buffer.start);
        raw_buffer.position     = raw_buffer.start;

        /*  IF YOU GET AN ERROR HERE, THEN PLEASE HAVE A LOOK AT THE FILE:
         *
         *      quex/code_base/compatibility/iconv-argument-types.h
         * 
         *  The issue is, that 'iconv' is defined on different systems with different
         *  types of the second argument. There are two variants 'const char**'
         *  and 'char **'. The file above tries to adapt via a 'typedef' according
         *  to your system. Obviously, your system is not treated correctly, so
         *  please, contact the author <fschaef@users.sourceforge.net> and notify
         *  him about the macro that identifies your system. */
        size_t report = iconv(iconv_handle, 
                              (__Adapter_FuncIconv_SecondArgument)(&raw_buffer.position), &raw_buffer.bytes_left_n,
                              (char**)&(user_buffer->position),                           &(user_buffer->bytes_left_n));

        QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_ICONV_REPORT(report);

        if( report == (size_t)-1 ) {
            switch( errno ) {
            case EILSEQ:
                throw std::range_error("Invalid byte sequence encountered for given character coding.");
            case EINVAL:
                // There is no problem, if the raw buffer ends in the middle of a character, since
                // the caller will copy the remaining part and restart with more bytes from the stream.
                return report;
            case E2BIG:
                throw std::range_error("Output buffer cannot hold number of coded characters.");
            }
        }
        return report;
    }

    TEMPLATE_IN size_t CLASS::__prepare_next_run(size_t iconv_report, buffer_info* user_buffer) 
    {
#       ifdef  __QUEX_OPTION_UNIT_TEST_INPUT_STRATEGY_ICONV
        std::cout << "(*) prepare next run\n";
#       endif
        if( iconv_report == (size_t)(-1) ) {
            // -- copy the part of the character that was read to the beginning
            //    of the raw buffer
            // -- iconv is so nice to let .position point to the begin of the last
            //    incomplete character
            std::memmove(raw_buffer.start, raw_buffer.position, raw_buffer.bytes_left_n);

            // -- read into the remaining part of the buffer
            raw_buffer.position     = raw_buffer.start + raw_buffer.bytes_left_n;
            raw_buffer.bytes_left_n = raw_buffer.size  - raw_buffer.bytes_left_n;
        } else {
            // -- nothing to be done. next buffer reload can happen at start of raw buffer
            raw_buffer.position     = raw_buffer.start;
            raw_buffer.bytes_left_n = raw_buffer.size;
        }
        //
        const size_t byte_n_from_last_run = raw_buffer.position - raw_buffer.start;

        QUEX_UNIT_TEST_ICONV_INPUT_STRATEGY_PRINT_RAW_AND_USER_BUFFER(user_buffer);

        return statistics.estimate_raw_byte_n(user_buffer->bytes_left_n / SizeOfCharacter, 
                                              raw_buffer.size - byte_n_from_last_run);
    }

    /*
    TEMPLATE_IN void CLASS::map_to_stream_position(const int CharacterIndex)
    { 
        stream_position   position_backup = InputPolicy<InputHandleType*>::tell(ih);

        /-*- There is a potential problem with varying character sizes of some encodings.
         * Since the function is (most probably) called seldomly--namely only in 'load_backward()'
         * which is only called when stepping backwards very far for a **long** precondition.
         * Thus, this function implements the safe variant by stepping through the stream
         * until the position is reached. -*-/

        /-*- Let's assume we are able to estimate the position with a precision not worse
         * then 128 characters (This means that for example, one character may be coded with
         * one byte, the other one with 256 bytes). Thus we target a position of 256 
         * characters below the CharacterIndex, and then step character by character until
         * the CharacterIndex is reached. -*-/ 
        const int             CharacterIndex_Minus1 = CharacterIndex - 1;
        CharacterCarrierType  tmp[32];
        int                   characters_to_read = 0;
        const int             StepN = (int)(CharacterIndex_Minus1 / 16);

        for(int i=0; i <= StepN ; ++i) {
            CLASS::read_characters((CharacterCarrierType*)tmp, 16);
        }
        if( CharacterIndex_Minus1 % 16 ) {
            CLASS::read_characters((CharacterCarrierType*)tmp, CharacterIndex_Minus1 % 16);
        }

        stream_position   result = InputPolicy<InputHandleType*>::tell(ih);
        InputPolicy<InputHandleType*>::seek(ih, position_backup);
        return result;
    }
    */

    TEMPLATE_IN void CLASS::register_begin_of_file() 
    { start_position = InputPolicy<InputHandleType*>::tell(ih); }

    TEMPLATE_IN void CLASS::statistic_info::adapt(size_t ConvertedByteN, 
                                                  buffer_info* user_buffer, 
                                                  size_t SizeOfChar) 
    {
        const size_t M_plus_N = (   user_buffer->position
                                    - user_buffer->start) / SizeOfChar;

        if( M_plus_N == 0 ) return;
        // -- adapt avarage of bytes per character
        //    avrg     = sum over n elements / n
        //    new avrg = sum over (n + m) elements / (n + m)
        //             = sum over n elements / (n + m) + sum over m elements / (n + m)
        //             = old avrg * n / (n + m) + sum over m elements / (n + m)
        //    with partial avrg = sum over m elements / m
        //             = old avrg * n / (n + m) + partial avrg * m / (n + m)
        //             = (old avrg * n + partial avrg * m) / (n + m)
        const float N            = sample_n;
        const float M            = M_plus_N - N;
        const float partial_avrg = ConvertedByteN / M;
        //
        avrg      = (avrg * N + partial_avrg * M) / (float)M_plus_N;
        sample_n  = M_plus_N;
    }

    TEMPLATE_IN size_t CLASS::statistic_info::estimate_raw_byte_n(const int CharacterN, 
                                                                  const size_t BufferSize) 
    {
        float bytes_to_read = float(CharacterN) * avrg * 1.015;  // 1.5% safety margin

        return (size_t)(bytes_to_read > BufferSize ? BufferSize : bytes_to_read);
    }

#undef CLASS
#undef TEMPLATE_IN

}

#endif // __INCLUDE_GUARD__QUEX_BUFFER_INPUT_STRATEGY_ICONV__
