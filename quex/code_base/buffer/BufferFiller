/* -*- C++ -*- vim: set syntax=cpp: */
#ifndef __QUEX_INCLUDE_GUARD__BUFFER__BUFFER_FILLER
#define __QUEX_INCLUDE_GUARD__BUFFER__BUFFER_FILLER

#include <quex/code_base/definitions>
#include <quex/code_base/buffer/Buffer>

#include <quex/code_base/temporary_macros_on>

QUEX_NAMESPACE_MAIN_OPEN

     typedef struct QUEX_TYPE_BUFFER_FILLER_TAG {
        /* PURPOSE: This is the interface that the buffer sees of the buffer filler. Its
         *          task is to coordinate the filling of buffer content from a stream 
         *          in the background. Some fillers may convert characters or filter.
         *          All fillers must provide functions for the following pointers. The 
         *          pointers are set with the function
         *
         *              BufferFiller_setup_functions(...) 
         *
         *          which shall be called in any '_construct' function of a filler. Note,
         *          that filler types shall inherit this class. This means, that the first
         *          element of the derived struct is to be of this type and best called 'base'.
         *          For example, please, consider the 'plain' and 'iconv' implementations
         *          in the correspondent sub directories.                                    */

        /* -- 'Tell' returns the character index of the last character read. This corresponds   
         *    to the character index of the last character that is currently in the buffer.  */
        size_t   (*tell_character_index)(struct __QuexBufferFiller_tag*);

        /* -- 'Seek' sets the input position for the next buffer-read-action.
         *    NOTE: This differs from QuexBuffer_seek(...) in the sense, that it only sets the
         *          stream to a particular position given by a character index. QuexBuffer_seek(..)
         *          sets the _input_p to a particular position.                                      */
        void     (*seek_character_index)(struct __QuexBufferFiller_tag*, const size_t Index);

        /* -- 'Read' reads N characters from a stream into a buffer (independent of their size)      */
        size_t   (*read_characters)(struct __QuexBufferFiller_tag*,
                                    QUEX_TYPE_CHARACTER* memory, const size_t N);

        /* -- 'Overflow' is user defined handler for the case that the distance from lexeme start  
         *    to lexeme end exceeds the buffer size.                                                 */
        bool     (*_on_overflow)(QUEX_TYPE_BUFFER*, bool ForwardF);

        /* -- 'Destructor' -- There are derived 'classes' from this one. The user only stores a 
         *    pointer to QuexBufferFiller, and requires a way to delete the whole object.            */ 
        void     (*delete_self)(struct __QuexBufferFiller_tag*);

    } QUEX_TYPE_BUFFER_FILLER;

    QUEX_INLINE void 
    QUEX_NAME(BufferFiller_setup_functions)(QUEX_TYPE_BUFFER_FILLER*   me,
                                            size_t       (*tell_character_index)(QUEX_TYPE_BUFFER_FILLER*),
                                            void         (*seek_character_index)(QUEX_TYPE_BUFFER_FILLER*, const size_t),
                                            size_t       (*read_characters)(QUEX_TYPE_BUFFER_FILLER*,
                                                                            QUEX_TYPE_CHARACTER*, const size_t),
                                            void         (*delete_self)(QUEX_TYPE_BUFFER_FILLER*));
    TEMPLATE_IN(InputHandleT) QUEX_TYPE_BUFFER_FILLER*
    QUEX_NAME(BufferFiller_new)(InputHandleT*  input_handle, 
                         const char*    CharacterEncodingName,
                         const size_t   TranslationBufferMemorySize);
    QUEX_INLINE void    QUEX_NAME(BufferFiller_delete_self)(QUEX_TYPE_BUFFER_FILLER*); 

    QUEX_INLINE void    QUEX_NAME(BufferFiller_initial_load)(QUEX_TYPE_BUFFER*);
    QUEX_INLINE size_t  QUEX_NAME(BufferFiller_load_forward)(QUEX_TYPE_BUFFER*);
    QUEX_INLINE size_t  QUEX_NAME(BufferFiller_load_backward)(QUEX_TYPE_BUFFER*);

    /* Helper function for buffer fillers trying to deal with strange streams or 
     * dynamic length character encodings.                                             */
    QUEX_INLINE void    QUEX_NAME(BufferFiller_step_forward_n_characters)(QUEX_TYPE_BUFFER_FILLER*  me,
                                                                          const size_t              ForwardN);

QUEX_NAMESPACE_MAIN_CLOSE

#include <quex/code_base/temporary_macros_off>

#include <quex/code_base/buffer/plain/BufferFiller_Plain>
#include <quex/code_base/buffer/converter/BufferFiller_Converter>

#endif /* __QUEX_INCLUDE_GUARD__BUFFER__BUFFERFILLER */
