/* PURPOSE: Test Buffer_move_away_passed_content()
 *
 * The tested function shall free some space ahead inside the buffer,
 * so that new content can be loaded. Detailed comment, see function
 * definition.
 *
 * Moving depends on:   * _read_p, 
 *                      * _lexeme_start_p
 *                      * whether the buffer contains the end of file or not.
 *                      * QUEX_SETTING_BUFFER_MIN_FALLBACK_N
 *                      * QUEX_TYPE_CHARACTER
 *
 * The last two are compile-time parameters. The first three may be
 * varried dynamically. 
 *
 * EXPERIMENT: Setup buffer of 5 elements.
 *
 * Let this file be compiled with '-DQUEX_SETTING_BUFFER_MIN_FALLBACK_N=3'
 * for all experiments. Multiple versions of compiled objects may exist:
 *
 *        QUEX_TYPE_CHARACTER  QUEX_SETTING_BUFFER_MIN_FALLBACK_N
 *          uint8_t             0
 *          uint8_t             1
 *          uint8_t             2
 *          uint32_t            2
 *
 * The parameters '_read_p' and '_lexeme_start_p' are varried the following
 * way:
 *    _lexeme_start_p -> begin ... end of buffer
 *    _read_p         -> begin, 
 *                       _lexeme_start_p-1, _lexeme_start_p, _lexeme_start_p+1, 
 *                       end of buffer
 *    end of file     = true, false
 *
 * Before each copying process the buffer is reset into its initial state. Test
 * cases are generated by hwuts generator, i.e. 'hwut gen this-file.c'.      */

/* 
<<hwut-iterator: G>> 
------------------------------------------------------------------------
#include <stdint.h>
------------------------------------------------------------------------
    int lexeme_start_i;    int read_i;                                   int eof_f; 
    |0:4|;                 |lexeme_start_i-1:lexeme_start_i+1| in |0:4|; [0, 1];

------------------------------------------------------------------------
*/
#include <move_away_passed_content-gen.h>
#include "commonly-pasted.cpp" /* requires 'G_t' from above header. */

static QUEX_TYPE_CHARACTER  content[] = { '5', '4', '3', '2', '1' }; 
const  ptrdiff_t            ContentSize = sizeof(content)/sizeof(content[0]);
static QUEX_TYPE_CHARACTER  memory[12];
const  ptrdiff_t            MemorySize = sizeof(memory)/sizeof(memory[0]);

int
main(int argc, char** argv)
{
    QUEX_NAME(Buffer)   buffer;
    G_t                 it;
    QUEX_TYPE_CHARACTER lsp_char, rp_char;

    if( cl_has(argc, argv, "--hwut-info") ) {
        printf("move_away_passed_content: (BPC=%i, FB=%i);\n", 
               sizeof(QUEX_TYPE_CHARACTER),
               (int)QUEX_SETTING_BUFFER_MIN_FALLBACK_N);
        return 0;
    }
    stderr = stdout;

    G_init(&it);
    
    printf("        lexeme_start_p: read_p: end_p: end_index: buffer:\n");
    while( G_next(&it) ) {
        instantiate_iterator(&buffer, &it, 
                             &memory[0], MemorySize, 
                             &content[0], ContentSize);
        printf("\n-( %2i )---------------------------------------------\n", (int)G_key_get(&it));
        self_print(&buffer);

        lsp_char = *buffer._lexeme_start_p;
        rp_char  = *buffer._read_p;

        QUEX_NAME(Buffer_move_away_passed_content)(&buffer);

        self_print(&buffer);

        /* Asserts after print, so that errors appear clearly. */
        hwut_verify(   buffer._read_p         <= &buffer._memory._front[1 + QUEX_SETTING_BUFFER_MIN_FALLBACK_N] 
                    || buffer._lexeme_start_p <= &buffer._memory._front[1 + QUEX_SETTING_BUFFER_MIN_FALLBACK_N]);
        hwut_verify(lsp_char == *buffer._lexeme_start_p);
        hwut_verify(rp_char  == *buffer._read_p);

        QUEX_NAME(Buffer_destruct)(&buffer);
    }
}


