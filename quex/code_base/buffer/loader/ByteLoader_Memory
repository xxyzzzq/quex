/* vim: ft=c: 
 *
 *  PURPOSE: This ByteLoader reads directly from a chunk of memory. 
 *
 *  Instead of reading from a file, it reads from a byte array which is passed
 *  to the constructor. The positioning inside the array is given by the offset
 *  to the beginning of the byte array. As such 'tell()' returns the offset to
 *  the beginning of the array and 'seek()' sets the offset of the array from
 *  where the next content is to be read.
 *
 *         position -----------. 
 *         Begin  ---.         |
 *                   |         | 
 *         array:    [*.*.*.*.*.x.x.x.x.x.x.x.*.*.*.*.*.*]
 *                             |             |
 *                             |--- load_n ->|  
 *                             '-------------'
 *                                   '---------------------->  
 *                                         bytes transferred upon 'load()'
 *
 *  It is intended for testing applications where fast access to predictable 
 *  content is required.
 *
 *  The 'ownership', i.e. who has to free the memory, remains in the hands of
 *  the one who passed it to this byte loader.
 *
 * (C) Frank-Rene Schaefer                                                   */
#ifndef  __QUEX_INCLUDE_GUARD__BUFFER__LOADER__BYTE_LOADER_MEMORY
#define  __QUEX_INCLUDE_GUARD__BUFFER__LOADER__BYTE_LOADER_MEMORY

#include <quex/code_base/buffer/loader/ByteLoader>

QUEX_NAMESPACE_MAIN_OPEN

#ifdef __cplusplus
extern "C" {
#endif
#include <stdio.h>
#ifdef __cplusplus
}
#endif

typedef struct QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG { 
    QUEX_NAME(ByteLoader)  base;
    struct {
        const uint8_t*     begin_p;
        const uint8_t*     end_p;
        const uint8_t*     position;
    } byte_array;
} QUEX_NAME(ByteLoader_Memory);

QUEX_INLINE QUEX_NAME(ByteLoader)*    QUEX_NAME(ByteLoader_Memory_new)(const uint8_t*  BeginP,
                                                                       const uint8_t*  EndP);

QUEX_NAMESPACE_MAIN_CLOSE

#endif /*  __QUEX_INCLUDE_GUARD__BUFFER__LOADER__BYTE_LOADER_MEMORY */
