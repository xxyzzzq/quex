The Lexeme macro does some safety checks when compiled with
QUEX_OPTION_ASSERTS. These checks are sometimes nonsense in
generated code. This test checks that no code is generated
that referes to the Lexeme macros.

/home/fschaef/prj/quex/trunk/quex/core.py:143:        txt += "                \"    Proposal: Define 'on_failure' and analyze 'Lexeme'.\\n\");\n"
/home/fschaef/prj/quex/trunk/quex/output/cpp/action_code_formatter.py:53:        txt += '<< ") %s: %s \'" << Lexeme << "\'\\n";\n' % (Mode.name, SafePatternStr)
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:235:/* Lexeme descriptions: There is a temporary zero stored at the end of each
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:603:    ObjectName = "Lexeme"
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:623:        # Note: The variable must be named 'exactly' like the given name. 'xLexeme' or 'Lexemey'
/home/fschaef/prj/quex/trunk/quex/core_engine/generator/languages/cpp.py:624:        #       shall not trigger a treatment of 'Lexeme'.
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:249:        #  QUEX_TKN_XYZ(Lexeme)     --> call take_text(Lexeme, LexemeEnd)
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:257:            if argument_list[0] == "Lexeme":
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:264:                error_msg("When one unnamed argument is specified it must be 'Lexeme'\n"
/home/fschaef/prj/quex/trunk/quex/input/code_fragment.py:274:                      "     one argument:   'Lexeme'   =>  token.take_text(..., LexemeBegin, LexemeEnd);\n"
