/*

MODE: TEST

    PATTERN-ACTION PAIRS:
      (  5) TEST: [_a-zA-Z]+
      ( 11) TEST: [ \t\n]+

*/

self.mode_name         = 'TEST'
self.pattern           = '[_a-zA-Z]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      self.action            = '{\nself.counter.__shift_end_values_to_start_values();\nself.counter.count_NoNewline(LexemeL);\nstd::cout << "IDENTIFIER" << std::endl;\n\n}'
self.pattern_index     = 5L

self.mode_name         = 'TEST'
self.pattern           = '[ \\t\\n]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      self.action            = '{\nself.counter.__shift_end_values_to_start_values();\nself.counter.count(Lexeme, LexemeEnd);\nstd::cout << "WHITESPACE" << std::endl;\n\n}'
self.pattern_index     = 11L

self.mode_name         = 'TEST'
self.pattern           = '[_a-zA-Z]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      self.action            = '{\nself.counter.__shift_end_values_to_start_values();\nself.counter.count_NoNewline(LexemeL);\nstd::cout << "IDENTIFIER" << std::endl;\n\n}'
self.pattern_index     = 5L

self.mode_name         = 'TEST'
self.pattern           = '[ \\t\\n]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      self.action            = '{\nself.counter.__shift_end_values_to_start_values();\nself.counter.count(Lexeme, LexemeEnd);\nstd::cout << "WHITESPACE" << std::endl;\n\n}'
self.pattern_index     = 11L

