header {
#include <vector>
#include <string>
#include <iostream>
}
token_type {
   name = europa::deutschland::baden_wuertemberg::ispringen::MeinToken;

   standard {
        id            :    unsigned;
        line_number   :    unsigned;
        column_number :    unsigned;
   }
   distinct {
       name        :  std::basic_string<QUEX_TYPE_CHARACTER>;
       number_list :  std::vector<int>;
   }
   union {
       { 
          mini_x       : int8_t;
          mini_y       : int8_t;
       }
       { 
          big_x        : int16_t;
          big_y        : int16_t;
       }
       who_is_that     : uint16_t;
   }
   inheritable;
   constructor { std::cout << "Constructor\n"; }
   destructor  { std::cout << "Destructor\n"; }
   copy        { 
       std::cout << "Copy\n"; 
       /* Copy core elements: id, line, and column number */
       _id         = That._id;
#      ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#      ifdef QUEX_OPTION_LINE_NUMBER_COUNTING
              _line_n = That._line_n;
#      endif
#      ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
                     _column_n = That._column_n;
#      endif
#      endif

       /* copy all members */
       name        = That.name;
       number_list = That.number_list;
       /* plain content copy of the union content */
       content     = That.content;
   }
}

token {
    N1a
    N1b
    N1c
    
    N2a
    N2b
    N2c
    
    N3a
    N3b
    N3c
    
    WHO
}

start = REAL;

mode REAL : { 
    1      => QUEX_TKN_N1a(Lexeme); 
    mini_1 => QUEX_TKN_N1b(mini_x=(int8_t)11, mini_y=(int8_t)11); 
    big_1  => QUEX_TKN_N1c(big_x=(int16_t)11, big_y=(int16_t)11);
    /**/
    2      => QUEX_TKN_N2a(Lexeme); 
    mini_2 => QUEX_TKN_N2b(mini_x=(int8_t)12, mini_y=(int8_t)12); 
    big_2  => QUEX_TKN_N1c(big_x=(int16_t)12, big_y=(int16_t)12);
    /**/
    3      => QUEX_TKN_N3a(Lexeme); 
    mini_3 => QUEX_TKN_N3b(mini_x=(int8_t)13, mini_y=(int8_t)13); 
    big_3  => QUEX_TKN_N1c(big_x=(int16_t)13, big_y=(int16_t)13);
    /**/
    who    => QUEX_TKN_WHO(who_is_that=(int16_t)4711);
    /**/
    [ \t\n] { }
}
