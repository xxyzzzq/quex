Before, one can start with the installation of {\quex}, one has to make sure
that Python (http://www.python.org) and flex (http://flex.sourceforge.net) are
both installed. Most linux distributions provide handy rpm packages of those
two on CD. Then, there are only two things to do:

. Extract the file `quex-x.x.x.tar.gz` into a directory
    that fits your little heart's desires.

. Setting the environment variable `QUEX\_PATH` in your system
    environment to the place where you installed {\quex}. If you are using
    a Unix system and the bash-shell add the following line to your
    `.bashrc`-file:

--------------------------------------
   export QUEX_PATH=the/directory/where/quex/was/installed/
--------------------------------------

    if you installed {\quex} in the directory given on the right hand side of
    the assignment.
    
. Make a link from the file `\$QUEX\_PATH/quex.py` to` 
      \$EXECPATH/quex` where `\$EXECPATH` is a path where executables can
    be found by your system.  If you work on a unix system, you might want to
    type
--------------------------------------
    > ln -s the/directory/where/quex/was/installed/quex.py \
            /usr/local/bin/quex
--------------------------------------
     You might want to ensure executable rights with
--------------------------------------
    > chmod a+rx the/directory/where/quex/was/installed/quex.py
    > chmod a+rx /usr/local/bin/quex
--------------------------------------

. Supplying your c++ compiler with the include path
  '\$QUEX\_PATH/templates'. If you are using g++ simply add the 
  option
--------------------------------------
         -I$(QUEX_PATH)/code_base 
--------------------------------------
  to the list of compiler flags. An example of how this is done can 
  be observed in the test applications which come with the
  distribution of {\quex}.

That is all. Now, you should either copy the directories `DEMO/*` to a
place where you want to work on it, or simply change directory to there.  These
directories contain sample applications 000, 001, $\ldots$. Change to the directory of the
sample applications and type '`make`'. If everything is setup propperly
you will get your first {\quex}-made lexical analyser executable in the frame
of some seconds. The 'normal' Makefile in these directories creates a lexical analyzer
with a quex-core engine. If you want to create a core engine via flex you
need to type '`make -f Makefile.flex\_core`' thus relying on the second makefile.


The example applications depict easy ways to specify
traditional lexical analysers, they show some special features of {\quex} such
as mode transitions, and more. The application in `DEMO/002` shows a
sample lexical analyser the deals with indentation blocks, i.e. higher and
lower indentation opens and closes function blocks. Play a little with the
sample applications and then continue with the remainder of this document.

