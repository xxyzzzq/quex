Stream Navigation
=================

Independent of the underlying character encoding :ref:`sec-character-encodings`
quex's generated lexical analyzers are equiped with functions for stream
navigation on character basis. All required mechanisms of buffer loading and
stream positioning is taking care of in the background. The current character
index can be accessed by the function:

.. code-block:: cpp

    size_t  tell();

It reports the current character index where the lexical analyzer is going to
continue its next step. The lexical analyzer can be set to a certain position
by means of the following functions:

.. code-block:: cpp

    void    seek(const size_t CharacterIndex);
    void    seek_forward(const size_t CharacterIndex);
    void    seek_backward(const size_t CharacterIndex);

The first function moves the input pointer to an absolute position. The
remaining two functions move the input pointer relative to its current
position. 

.. warning:: The usage of the above functions is similar to the usage of 'goto' in 
   many popular programming languages. In particular it is possible to stall the 
   lexical analyzer by un-coordinatedly ``seek``-ing backwards. 
   
   Also, the ``seek`` functions *do not* take care of the line and column number
   adaption. This must be done manually, if desired. That is somehow the new line 
   and column numbers must be determined and then set explicitly:

   .. code-block:: cpp

       here = self.tell();
       self.seek(Somewhere);

       my_computation_of_line_and_column(here, Somewhere, 
                                         &line_n, &column_n);

       self.column_number_set(column_n);
       self.line_number_set(line_n);

   Note, that ``column_number_set(...)`` and ``line_number_set(...)`` define 
   the column and line numbers of the next pattern to match.

The reading of the current lexeme can be undone by

.. code-block:: cpp

    void    undo();

It sets the input pointer to where it was before the current lexeme was
matched.  This function has several advantages over the ``seek`` functions.
First of all it is very fast. Since the lexical analyzer knows that no buffer
reloading is involved, it can do the operation very quickly. Second, it can
take care of the line and column numbers. The user does not have to compute
anything manually. Nevertheless, it should be used with care. It is still
possible if the undo is not combined with a mode change for example.
