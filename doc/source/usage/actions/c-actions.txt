C/C++ Code Segments
===================

Alternatively to the convenient definition of actions in terms of token sending
and mode transition, more sophisticated behavior can be specified by inserting
directly code fragments as pattern-actions or event handlers. The syntax for 
such definitions is simply to enclose them in curly brackets as in the following
example 

.. code-block:: cpp

    mode SOMETHING {
        ...

        {P_STRING_DELIMITER} {
            self << STRING_READER; 
            self.send(QUEX_TKN_EVENT_MODE_CHANGE);
            return;
        }

        ...

        on_end_of_stream {
            self.send(QUEX_TKN_ELSE);
            self.allow_opening_indentation_f = true;
            return;
        }
    }

The patterns ``P_IF_KEYWORD`` and ``P_STRING_DELIMITER`` are supposed to be
defined in a ``define`` section. The lexical analyzer can be accessed via the
reference ``self.``. The member function ``send`` works similar to the brackets
in the previous token senders. The first argument is the token-id and the
remaining arguments are arguments as they are passed to the constructor of the
token class. The operator `<<` allows to specify mode transitions. As can be
seen in the example, the occurence of a string delimiter triggers a transition
to a mode called ``STRING_READER``. The definition of the *end of stream*
handler demonstrates that event handlers and pattern actions are defined with
the same syntax.
