Unicode is distinguished from other coding standards not only with 
respect to its level of completeness including all possibly used 
character sets. Moreover, much effort has been accomplished in 
categorizing characters, providing terminology for concepts related
to letter systems and defining _character properties_. Unicode
defines a fixed set of properties that a character can have.
The most important property for a lexical analyzer
is the 'code point', i.e. the integer value that represents a 
character. However, there are other interesting properties that
simplify the description of regular expressions.

Quex supports Unicode Standard Properties through the `$$\P{..}$$`
expressions, where the `P` stands for property. For a quex user
properties can be devided into two categories: 

- Binary Properties, i.e. properties that a character either has
  or has not. For example, a character is either a whitespace 
  character or it is not. Sets of characters having a binary
  property can be accessed through `$$\P{binary_property}$$`.
 
- Non-Binary Properties, i.e. properties that require a particular
  value related to it. For example, each character belongs to a 
  certain script. A character belonging to the greek script 
  has the property 'Script=Greek'. Sets of characters that have
  a certain property setting can be accessed via `$$\P{property=value}$$`.

Note, that the result of a `$$\P{...}$$` expression is always
a _set of characters_. Therefore, it cannot be used inside 
a quotes string expression. For convinience, the properties
'Name' and 'General_Category' are provided through the shortcuts
`\N{...}` and `\G{...}`. Thus, `\N{MIDDLE DOT}` is a shorthand
for `\P{Name=MIDDLE DOT}` and `\G{Uppercase_Letter}` is a shorthand
for `\P{General_Category=Uppercase_Letter}`. 

Unicode 5.0 provides more than 17000 character names, so please consult the
standard literature for settings of the `Name` property
footnote:[Alternatively, consider the file `UnicodeData.txt` that comes with
the quex application]. Note also, that names as defined in Unicode 1.0
can be accessed through the 'Unicode_1_Name' property. This property also 
contains names of control functions according to ISO 6429 \cite{}.

As for the General_Category property, the appendix provides the list of 
possible settings <<sec:appendix-property-general-category>>. At this place,
more detailed information is specified about provided properties, their
meaning, and settings of other likely-to-be-used properties.

When starting to write lexical analyzers using a wider range of unicode
characters the reliance on properties becomes almost unavoidable. However, the
huge volume of characters requires some sophisticated tool to browse through
properties and related character sets. For this purpose quex provides a _query
mode_. This mode allows the user to specify some queries on the command line
and get the response immediately on the console. This subject is handled
in section <<sec:query/intro>>.

As an option to facilitate the specification of property values, quex allows
you to use wildcards `$$*$$`, `$$?$$` and simple character sets such as as
$$[AEIOUX-Z]$$ for the characters A, E, I, O, U, X, Y, and Z. If the first
character is an '!' then the inverse character set is considered.  This is
conform with unix file name matching.  set specifications such as $$[a-z]$$
such to facilitate the search. It is advisable, though, to use quex's query
functionality first <<sec:query/intro>> in order to get an impression to what
value such a wild-card expression expands.

