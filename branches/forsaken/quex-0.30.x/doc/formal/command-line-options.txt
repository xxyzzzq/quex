This section lists the command line options to control the behavior of the
generated lexical analyzer.  Numbers following these options can be either
decimal, without any prefix, hexadecimal with a '0x' prefix or octal with a
'0o' prefix.  

`-i`, `--mode-files` _file-list_::
        
	    _file-list_ = list of files of the file containing mode definitions
	    (see sections \ref{sec:practical/modes},
	     \ref{sec:practical/pattern-action-pairs}, and
	     \ref{sec:formal/generated-class/mode-handling}). DEFAULT = `<empty>`

`--token-prefix` _name_::
	
	    _name_ = Name prefix that is to be sticked in front of any name
	    given in the token-id files. For example, if a token-id file contains
	    the name `COMPLEX`' and the token-prefix is `TOKEN\_PRE\_`'
	    then the token-id inside the code will be `TOKEN\_PRE\_COMPLEX`. DEFAULT = `"TKN\_"`.

`--token-offset` _number_::
        
	    _number_ = Number where the numeric values for the token-ids start
	    to count. DEFAULT = `"10000"`

`--token-queue`::

        Enables the sending of tokens via a queue. Note, this can be a little
        slower than commicating tokens via a single global token structure. 
        However, it may allow more elegant solutions in particular cases.

`--token-id-termination` _number_::
        
	    _number_ = Token identifier for the event of 'end of token stream'.
	    DEFAULT = `"0"`.

`--token-id-uninitialized` _number_::
        
        _number_ = Token identifier of a token that has not yet been
        initialized.  Any token that arives the user 'by purpose' should not
        contain this identifier.  It is basically a means for debuggin in order
        to check wether tokens slip through due to whatever erroneous behavior.
        DEFAULT = `"1"`.

`--version-id` _name_::

	   `name` = arbitrary name of the version that was generated. This string
	    is reported by the `version()` member function of the lexical analyser. 
        DEFAULT = `"0.0.0-pre-release"`

`--foreign-token-id-file` _filename_::
        
	    _filename_ = Name of the file that contains an alternative definition
	    of the numerical values for the token-ids (see also section
	    \ref{sec:formal/macro}). DEFAULT = `<empty>`

`-o`, `--engine` _name_::
        
	    _name_ = Name of the lexical analyser class that is to be created
	    inside the namespace`quex`. This name also determines the
		filestem of the output files generated by quex. DEFAULT = `"lexer"`

`--debug`::

	    If provided, then code fragments are created to
	    activate the output of every pattern match. Then defining the macro
	    `QUEX\_OPTION\_DEBUG\_QUEX\_PATTERN\_MATCHES` activates those printouts in the
	    standard error output. Note, that this options produces considerable
	    code overhead. DEFAULT = `<disabled>`

`--no-mode-transition-check`:: 

	    Turns off the mode transition check and makes the engine a little faster.
	    During development this option should not be used. But the final lexical
	    analyzer should be created with this option set. DEFAULT = `<disabled>`, which means
        that mode transition check is enabled.

`--string-accumulator`, `--sacc`::

        Turns the string accumulator option on. This allows to use the string 
        accumulator to accumulate lexemes. See class 'quex::Accumulator'.

`--post-categorizer`::

        Turns the post categorizer option on. This allows to have a 'secondary'
        mapping from lexemes to token ids based on their name. See class
        'quex::PostCategorizer'.

For the support of derivation from the generated lexical analyzer class the
following command line options can be used.

`--derived-class` _name_::
        
	   `name` = If specified, name of the derived class that the user intends to provide
	    (see section \ref{sec:formal/derivation}). Note, specifying this option
	     signalizes that the user wants to derive from the generated class. If this
	     is not desired, this option, and the following, have to be left out. DEFAULT = `<empty>`
        
`--derived-class-file` _filename_::
        
	    _filename_ = If specified, name of the file where the derived class is
	    defined.  This option makes only sense in the context of optio`n
		--derived-class`. DEFAULT = `<empty>`

`--friend-class` _name-list_::
        
	    _name-list_ = Names of classes that shall be friends of the
	    generated lexical analyser. This is to be used, if other classes 
		need to have access to protected or private members of the      
		analyser. It is only to be used by specialists. DEFAULT = `<empty>`

Additionally, there are options for specialists who want to provide their own
token-class:

`--token-class` _name_::
        
	    _name_ = Name of the token class that the user defined. Note that the 
	    token class needs to be specified in namespace quex. DEFAULT = `"token"`

`--token-class-file` _filename_::
        
	    _filename_ = Name of file that contains the definition of the
	    token class. DEFAULT = `"$(QUEX\_PATH)/code_base/token"`


Even if a non-quex token class is provided, still the token-id generator may
be useful. By default, it remains in place. The user, however, can specify the
following option to disable it:

`--user-token-id-file` _filename_::
        
	    _filename_ = Name of file that contains the definition of the
	    token-ids and the mapping function from numerical token-ids to
	    `std::string` objects, i.e. human readable names. DEFAULT = `<disabled>`

There may be cases where the characters used to indicate buffer limit,
end-of-stream and begin-of-stream need to be redefined, because the
default code points appear in a pattern footnote:[As for 'normal' ASCII
or Unicode based lexical analyzers, this would most probably not be a
good design decision. But, when other, alien, non-unicode codings are to
be used, this case is conceivable.].  Also, note that the '.' regular
expression (meaning 'nothing but newline or end of file') needs check for
begin-of-buffer and end-of-buffer in the general case. Giving both the
same value may come with some speedup, and does not hurt. None of these
values should be equal to the buffer limit delimiter. The following
options allow to modify the values discussed above.  
      

`--buffer-limit` _number_:: DEFAULT = `"0x0"`

`--begin-of-stream` _number_:: DEFAULT = `"0x19"`

`--end-of-stream` _number_:: DEFAULT = `"0x1A"`

If the trivial end-of-line pre-condition (i.e. the '\$' at the end of a regular
expression) is used, the by default quex produces code that runs on both Unix
and DOS-like Systems. Practically, this means that it matches against 'newline' 0x0A 
and 'carriage return/newline' 0x0D 0x0A. For the case that the resulting analyzer
only runs on a Unix machine some tiny performance improvements might be achieved
by disabling the 0x0D 0x0A sequence and only triggering on 0x0A. In this case,
the following flag may be specified:

`--no-DOS`:: DEFAULT=`<enabled>`

For unicode support it is essential to allow iconv support \cite{}. For this 
the iconv library must be installed on your system. On Unix systems this library
is usually present. If a coding other than ASCII is required, specify the following
options:

`--iconv`::
        
	    Enable the use of the iconv library for character stream decoding. This option
        is a _must_ for unicode support. DEFAULT = `<disabled>` 

`--bytes-per-ucs-code-point`, `-b` _["1", "2", "4", "wchar_t"]_::
        
	    With this option the internal representation of character is specified. It 
            determines the byte number per character which compose the lexeme strings
	    and on which the lexical analyzer engine internally operates. The byte number
	    should at least suffice to carry the desired input coding space. You can
	    only specify 1 byte, 2 byte or 4 byte per character. If`wchar\_t` is specified
	    quex automatically adapts to the correspondent type of the  operating
	    system environment where the target code is compiled. 
	    Use this, if option`--iconv` is used and you are in doubt. DEFAULT = `"2"`

`--endian`  _["little", "big", "<system>"]_::
        
	    There are two types of byte ordering for integer number for different CPUs.
	    For creating a lexical analyzer engine on the same CPU type as quex runs
	    then this option is not required, since quex finds this out by its own.
	    If you create an engine for a different plattform, you must know its byte ordering
	    scheme, i.e. little endian or big endian, and specify it after `--endian`'. DEFAULT=`"<system>"`

For version information pass option `--version`' or `-v`'. The
options `--help` and `-h`' are reserved for requesting a help text. Those
are the options for using quex in the 'normal' mode where it creates
lexical analyzers. However, quex provides some services to query and 
test character sets. If one of those options is called, then quex does not
create a lexical analyzer but responds with some information requested 
by the user. Those options are the following.

`--property` _[name]_::

   If _name_ is specified, then information about the property with the given
   name is displayed. Note, that _name_ can also be a property alias. If _name_
   is not specified, then brief information about all available unicode
   properties is displayed.

`--set-by-property` _setting_::

   For binary properties only the property name has to be specified. All other
   properties require a term of the form `property-name = value`. Quex then
   displays the set of character that has this particular property.

`--set-by-expression` _expression_::

   Character set expressions that are ususally specified in '$$[:$$' ... '$$:]$$' brackets
   can be specified as _expression_. Quex then displays the set of characters that results
   from it.

`--property-match` _wildcard-expression_::

   Quex allows to use wildcards in property values. Using this option allows
   to displays the list of values to which the given wildcard expression 
   expands. Example: The wildcard-expression `Name=*LATIN*` gives all settings of property `Name` that
   contain the string `LATIN`.

`--numeric`::

   If this option is specified the numeric character codes are displayed rather
   then the utf8 characters.

`--intervals`::

   This option disables the display of single character or single character codes.
   In this case sets of adjacent characters are displayed as intervals. This provides
   a some more brief display.

Additionally, quex provides the ability to display transition diagrams of
produces state machines graphically. The following command line options support
this feature:

`--plot` _graphic format_::

        Runs quex in the plotting mode. Rather than producing source code, quex
        produces transition diagrams of the defined modes. For quering possible graphic
        formats, run quex with the `--plot-format-list` command line option.
        Note, for this option to work, the graphviz package needs to be installed 
        (see www.graphviz.org).

`--plot-format-list`::

        Lists all possible graphic formats for which quex can produce transition
        graphs.

