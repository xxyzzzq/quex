// -*- C++ -*-   vim: set syntax=cpp:
#ifndef __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$
#define __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$

// STL (Std C++ Lib)
#include<vector> 
#include<map>
#include<fstream>
#include<cassert>
#include<quex/code_base/compatibility/inttypes.h>
#include<quex/code_base/asserts>
#include<cstdio>    // provides: FILE*

#define QUEX_VERSION  "$$QUEX_VERSION$$"
// OPTIONS: ____________________________________________________________________
//
// Activate/Deactivate Options via comment/uncomment. Options without a 
// double underline '__' at the beginning can be turned off in the created 
// engine. Options that do start with '__' configure the machine for the
// specified behavior. Such options are better not touched.
//
//
// -- Line Number / Column Number Counting:
//    Turning counting off may result in engine speed-up.
#ifndef QUEX_OPTION_LINE_NUMBER_COUNTING            
$$SWITCH$$ QUEX_OPTION_LINE_NUMBER_COUNTING         
#endif
#ifdef QUEX_OPTION_LINE_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_LINE_NUMBER_COUNTING
#endif
#ifndef QUEX_OPTION_COLUMN_NUMBER_COUNTING          
$$SWITCH$$ QUEX_OPTION_COLUMN_NUMBER_COUNTING       
#endif
#ifdef QUEX_OPTION_COLUMN_NUMBER_COUNTING_DISABLED
#   undef QUEX_OPTION_COLUMN_NUMBER_COUNTING
#endif

// -- Mode Transitions:
//    If the engine was created without the flag '--no-mode-transition-check'
//    then code for mode transition control is inserted. It can be deactivated
//    by commenting the following option out.
#ifndef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
$$SWITCH$$ QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif
#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK_DISABLED
#   undef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
#endif

// -- Debugging: 
//    If the engine was created with the '--debug' flag then it contains 
//    debugging code. The effect of this code fragments can be turned off
//    by commenting the following options out.
#ifndef QUEX_OPTION_DEBUG_TOKEN_SENDING
$$SWITCH$$ QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#ifdef QUEX_OPTION_DEBUG_TOKEN_SENDING_DISABLED
#   undef QUEX_OPTION_DEBUG_TOKEN_SENDING
#endif
#ifndef QUEX_OPTION_DEBUG_MODE_TRANSITIONS
$$SWITCH$$ QUEX_OPTION_DEBUG_MODE_TRANSITIONS
#endif
#ifdef QUEX_OPTION_DEBUG_MODE_TRANSITIONS_DISABLED
#   undef QUEX_OPTION_DEBUG_MODE_TRANSITIONS
#endif
#ifndef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
$$SWITCH$$ QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif
#ifdef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES_DISABLED
#   undef QUEX_OPTION_DEBUG_QUEX_PATTERN_MATCHES
#endif

// -- Include Stack Support:
//    Easy handling of include files/streams via 'push' and 'pop'
//    Turn this off, if you do not use 'inclusion' in your files and
//    you want to save some bytes.
#ifndef  QUEX_OPTION_INCLUDE_STACK_SUPPORT
$$SWITCH$$ QUEX_OPTION_INCLUDE_STACK_SUPPORT
#endif
#ifdef QUEX_OPTION_INCLUDE_STACK_SUPPORT_DISABLED
#   undef QUEX_OPTION_INCLUDE_STACK_SUPPORT
#endif

#ifndef    QUEX_SETTING_BUFFER_LIMIT_CODE
#   define QUEX_SETTING_BUFFER_LIMIT_CODE     ($$BUFFER_LIMIT_CODE$$)
#endif
#ifndef     QUEX_SETTING_BUFFER_SIZE
#    define QUEX_SETTING_BUFFER_SIZE  ((size_t)65536)
#endif
#ifndef     QUEX_SETTING_BUFFER_FALLBACK_SIZE
#    define QUEX_SETTING_BUFFER_FALLBACK_SIZE  ((size_t)10)
#endif
#ifndef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
$$SWITCH$$ QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
#endif
#ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
#   ifndef     QUEX_SETTING_TOKEN_QUEUE_INITIAL_SIZE
#       define QUEX_SETTING_TOKEN_QUEUE_INITIAL_SIZE  ((size_t)2048)
#   endif
#endif
#ifndef  QUEX_OPTION_STRING_ACCUMULATOR
$$SWITCH$$ QUEX_OPTION_STRING_ACCUMULATOR
#endif 

//   If one mode requires indentation support, then the lexical analyser
//   class must be setup for indentation counting. The following flag is
//   defined or undefined by the lexical analyser generator quex.
$$SWITCH$$ __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
//
//   Quex can determine whether certain handlers are not used at all.
//   If so, computation time can be spared and quex comments the following
//   options out.
$$SWITCH$$ __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
#ifdef __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
#endif
$$SWITCH$$ __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
#ifdef __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT_DISABLED
#   undef __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
#endif
$$SWITCH$$ __QUEX_CORE_OPTION_ICONV_BUFFERS_ENABLED
#ifdef __QUEX_CORE_OPTION_ICONV_BUFFERS_ENABLED_DISABLED
#   undef __QUEX_CORE_OPTION_ICONV_BUFFERS_ENABLED
#endif
#ifdef __QUEX_CORE_OPTION_ICONV_BUFFERS_ENABLED
#    ifndef     QUEX_SETTING_ICONV_TRANSLATION_BUFFER_SIZE
#        define QUEX_SETTING_ICONV_TRANSLATION_BUFFER_SIZE ((size_t)65536)
#    endif
#endif

// 
//   Begin of line pre-condition introduces an extra flag in the buffer
//   structure. Only out-comment this in case of tough memory restrictions,
//   if no begin of line pre-condition is required.
$$SWITCH$$ __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
#ifdef __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION_DISABLED
#   undef  __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
#endif

namespace quex {
    class $$LEXER_CLASS_NAME$$;

$$LEX_ID_DEFINITIONS$$
}    

// CHARACTER TYPE: Type that represents the number of bytes used in the engine to store
//                 a character. This is independent of the coding (ASCII, WinArabic, ...)
//
// Both character types are clearly related, because they are supposed to relate to the 
// same type of objects in memory. The following example shows, that 'uint8_t' and 'char'
// belong together, the lexeme type cannot be 'uint8_t' because the std-string functions
// accept 'char*' and not 'uint8_t' (which is most propperly 'unsigned char').
//
// NOTE: If in parallel another engine is built with other bytes per character settings,
//       then the engines will also include their own header with their own definition
//       of QUEX_CHARACTER_TYPE. Thus there is no danger at all. 
//       Templatifying the lexer would be possible, but the author has in mind to bring out
//       a 'pure C' version of the quex generated engine. Thus templating would make this 
//       goal harder achievable.
typedef $$QUEX_CHARACTER_TYPE$$  QUEX_CHARACTER_TYPE;        
// IConv Coding Name for the internally used character coding. 
//   -- never use a dynamic length coding for the internal handling (e.g. never use UTF8)
//   -- never use a coding that requires more bytes than QUEX_CHARACTER_TYPE contains,
//      e.g. do not use "UCS-4" (4 bytes) when the character type is uin16_t (2 bytes).
const char QUEX_SETTING_CORE_ENGINE_CHARACTER_CODING[] = "$$CORE_ENGINE_CHARACTER_CODING$$";

// NOTE: The original design of the core engine was independent of quex's global
//       mode oriented design. The author thinks this is a good idea, because then
//       the analyzer functions can still used easily in isolation from the rest
//       of the engine. They can be a starting point for an even more improved
//       post-hand coded lexical analyzer or for embedded systems where memory
//       resrictions are tough. THUS: We communicate the class name to the analyzer
//       functions via a macro and NOT via traits or anything like that.
typedef quex::$$LEXER_CLASS_NAME$$  QUEX_LEXER_CLASS;

#include "$$TOKEN_ID_DEFINITION_FILE$$"
#include "$$TOKEN_CLASS_DEFINITION_FILE$$"

#ifdef  __QUEX_CORE_OPTION_ICONV_BUFFERS_ENABLED
#    include<quex/code_base/buffer/iconv/BufferFiller_IConv>
#else
#    include<quex/code_base/buffer/plain/BufferFiller_Plain>
#endif
#include<quex/code_base/buffer/Buffer>

// Quex/User
#define CLASS                            $$LEXER_CLASS_NAME$$
#define __QUEX_SETTING_TOKEN_CLASS_NAME  $$TOKEN_CLASS$$

#include <quex/code_base/template/Counter>

namespace quex { 
    class QuexMode;

#ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
    typedef CounterWithIndentation  CounterType;
#elif    defined(QUEX_OPTION_LINE_NUMBER_COUNTING) \
       | defined(QUEX_OPTION_COLUMN_NUMBER_COUNTING)
    typedef Counter                 CounterType;
#else
    typedef CounterPseudo           CounterType;
#endif
}

#ifdef QUEX_OPTION_STRING_ACCUMULATOR
#   include <quex/code_base/template/Accumulator>
#endif
#ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
#   include <quex/code_base/TokenQueue>
#endif
#ifdef QUEX_OPTION_POST_CATEGORIZER
#   include <quex/code_base/template/PostCategorizer>
#endif
#ifdef QUEX_OPTION_INCLUDE_STACK_SUPPORT
#   include <quex/code_base/template/IncludeStack>
#endif


// RETURN: _____________________________________________________________________
//
//  -- Return from pattern action to the function that called the
//     lexer - but only in case that the token stack was filled.
//
//     QUEX core: If not, the analyser function automatically jumps to the 
//                initial state. This happens through a little trick,
//                were 'break' jumps to the goto statement that guides
//                to the entry point of the state machine that is
//                currently active.
//
//     This is very handy, when dealing with functions that not
//     necessarily fill the token queue, such as push_pure_text_token().
//     If no pure text appeared, the stack is empty after this function
//     call. Similar things happen with table patterns.
//
//  -- Note, that at some point in time End of File <<EOF>> will
//     hit the token stack, so the lexing won't continue infinitly.
//     
//
#ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE 
#   define RETURN                                                                \
    if( self._token_queue->is_empty() ) { CONTINUE; }                            \
    else {                                                                       \
        /* since return happens voluntarily, no check for mode change will be */ \
        /* necessary.                                                         */ \
        self.__previous_mode_p = self.__current_mode_p;                          \
        return /* self._token_queue->top()->type_id() */;                        \
   }
#else
#   define RETURN  return
#endif


// START:
$$LEXER_DERIVED_CLASS_DECL$$
// :END

// User defined header content. _________________________________________________
//
// This is pasted after the definitions, such that the user can make use of them.
// START:
$$USER_DEFINED_HEADER$$
// :END

#include <quex/code_base/template/QuexMode>
namespace quex {

#   include <quex/code_base/temporary_macros_on>
    
$$MODE_SPECIFIC_ANALYSER_FUNCTIONS$$

    /* NOTE: Implement the created class as a template with a preceeding '__' in the
     *       name. So, if the user likes, he can create his own templated lexer with
     *       a different character carrier type (e.g. uint32_t, instead of whatsoever).
     *       The default is defined by QUEX_CHARACTER_TYPE. Thus, later on in this file
     *       the class $$LEXER_CLASS_NAME$$ is defined as 
     *
     *                      __$$LEXER_CLASS_NAME$$<QUEX_CHARACTER_TYPE>
     */
    template <class CharacterCarrierType>
    class __$$LEXER_CLASS_NAME$$ :
        protected QuexAnalyser<CharacterCarrierType> {

        /* DISABLED */ $$LEXER_CLASS_NAME$$();
        /* DISABLED */ $$LEXER_CLASS_NAME$$(const $$LEXER_CLASS_NAME$$&);

    public:
        $$LEXER_CLASS_NAME$$(const std::string& Filename,  const char* IConvInputCodingName = 0x0);
        $$LEXER_CLASS_NAME$$(std::istream* p_input_stream, const char* IConvInputCodingName = 0x0);
        $$LEXER_CLASS_NAME$$(std::FILE* input_fh,          const char* IConvInputCodingName = 0x0);

        virtual ~$$LEXER_CLASS_NAME$$();
        //
        // -- token stream: read next token
#       ifndef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
        QUEX_TOKEN_ID_TYPE   get_token();
#       else
        QUEX_TOKEN_ID_TYPE   get_token($$TOKEN_CLASS$$*  result_p);
        void                 get_token($$TOKEN_CLASS$$** result_pp);
#       endif   
        //
        // (*) Mode handling
        //
        //     -- modes: read access
        QUEX_MODE_TYPE&    mode();
        const int     mode_id() const;
        const char*   mode_name() const;
        //
        //     -- modes: changing lexical analysis mode
        void        set_mode_brutally(const int        LexerMode);
        void        set_mode_brutally(const QUEX_MODE_TYPE& Mode);
        //
        void        operator<<(const int MODE_ID);               // not to be used in concatination
        void        operator<<(/* NOT const*/ QUEX_MODE_TYPE& Mode);  // not to be used in concatination
        //
        void        pop_mode();
        void        pop_drop_mode();
        void        push_mode(QUEX_MODE_TYPE& new_mode);
        //
        void        enter_mode(/* NOT const*/ QUEX_MODE_TYPE& TargetMode);
        //
        //     -- map: mode id to mode and vice versa
        QUEX_MODE_TYPE&  map_mode_id_to_mode(const int        ModeID);       
        const int   map_mode_to_mode_id(const QUEX_MODE_TYPE& Mode) const;

        // (*) buffer handling
        Buffer   buffer;
        template <class InputHandle> 
        quex::QuexBuffer<CharacterCarrierType>* create_buffer(InputHandle* input_handle, 
                                                         const char*  IConvInputCodingName = 0x0);
          
        // (*) Token sending
        void        send(); /* empty function, for uniformity (see token sending via singleton) */
        void        send(const $$TOKEN_CLASS$$& That);
        void        send(const QUEX_TOKEN_ID_TYPE TokenID);
        void        send_n(const int N, const QUEX_TOKEN_ID_TYPE TokenID);
        template <typename ContentT> 
        void        send(const QUEX_TOKEN_ID_TYPE TokenID, ContentT Content);


#       ifdef  QUEX_OPTION_LINE_NUMBER_COUNTING
        int  line_number() const          { return line_number_at_begin(); }
        int  line_number_at_begin() const { return counter._line_number_at_begin; }
        int  line_number_at_end() const   { return counter._line_number_at_end; }
#       endif
#       ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
        int  column_number() const          { return column_number_at_begin(); }
        int  column_number_at_begin() const { return counter._column_number_at_begin; }
        int  column_number_at_end() const   { return counter._column_number_at_end; }
#       endif
#       ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
        int  indentation()                    { return counter._indentation; }
        void disable_next_indentation_event() { counter.disable_next_indentation_event(); }
#       endif

        //
        // (*) Version information
        const char* version() const; // created by quex for version/date information

    private:
        // (*) Helper
        //      -- put whole pattern back into the 'stream to be lexed'
        void  move_forward(const size_t);
        void  move_backward(const size_t);

    public:
        // handle with extreme care:
        void   _reset();

        // (*) Mode database: allows to match from 'lex mode id' to a real mode object.
        //     LexModeID = 0 is not used, mode indices from 1 to ModeN 
        //     (compatibility to lex/flex core: INITIAL == 0, but initial is bend immediately
        //      to quex's start mode.)
        QUEX_MODE_TYPE*  mode_db[$$MAX_MODE_CLASS_N$$+1];  

    public:
$$MODE_OBJECT_MEMBERS$$

    private:
        // -- keeping track of the currently active mode
        //    Inside analyzer function of a mode, it is possible that the analyzer
        //    does not return immediately after a mode has been set. I.e. it calls
        //    CONTINUE. In this case, it needs to be checked wether the return has
        //    to be forced. The caller, can then call the newly setup analyzer function
        //    from where the current one has been called --- see get_token().
        QUEX_MODE_TYPE*   __current_mode_p;
        QUEX_MODE_TYPE*   __previous_mode_p;
        // -- with the quex core engine(s) each mode has a dedicated analyser function.
        //    (with the flex core engine, modes were modelled as start conditions
        //     of a single engine)
        //    The function pointer to the currently active mode's function is located in 
        //    the base class QUEX_CORE_ANALYSER_STRUCT
        //
    private:
        // (*) mode stack allows for pushing and popping of lexical analysis modes
        std::vector<QUEX_MODE_TYPE*>   _mode_stack;

        // (*) The Token Queue ___________________________________________________________
        //
        // Any time a token is created, it is pushed on the token queue. Lexical analysis
        // only happens if stack is empty, so that it is filled up again.
        //
        // NOTE: A token stack is necessary whenever tokens are created that do not
        //       relate directly to patterns. A token stack gives the great possibility
        //       to 'send' tokens from anywhere inside an action or a state transition.
        // 
        //       Otherwise, one would be restricted to sending one token by pattern.        
        //
#       ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE 
    private:
        TokenQueue<$$TOKEN_CLASS$$>*   _token_queue;
#       else
    public:
        $$TOKEN_CLASS$$                 the_token;
#       endif
    public:
        // (*) Who and what am I ? _______________________________________________________
        $$LEXER_DERIVED_CLASS_NAME$$&   self;

    public:
#       ifdef  QUEX_OPTION_INCLUDE_STACK_SUPPORT
        IncludeStack  include_stack;
#       endif 
        //      -- include events (a file is included)
        void virtual on_include(const char* Filename) {}
        void virtual on_include_exit() {}

#       ifdef QUEX_OPTION_STRING_ACCUMULATOR
    public:
        // (*) Accumulator (accumulate lexemes from multiple patterns ____________________
        Accumulator        accumulator;
#       endif
    private:
        CounterType        counter;
    public:
#       ifdef QUEX_OPTION_POST_CATEGORIZER
        PostCategorizer    post_categorizer;
#       endif

    private:
        // (*) All Modes are Friends _____________________________________________________
$$MODE_CLASS_FRIENDS$$  
        // (*) User defined Friends ______________________________________________________
$$LEXER_CLASS_FRIENDS$$
        // (*) User's Lexer Class Body Extenstion ________________________________________
$$CLASS_BODY_EXTENSION$$
#       ifdef QUEX_OPTION_INCLUDE_STACK_SUPPORT
        friend class       IncludeStack;
#       endif

    private:
        void __debug_print_transition(QUEX_MODE_TYPE* Source, QUEX_MODE_TYPE* Target);

        // (*) Common core of all constructors ___________________________________________
        template <class InputHandleP> 
        void     __constructor_core(InputHandleP, const char* IConvInputCodingName);

#       ifdef __QUEX_CORE_OPTION_ICONV_BUFFERS_ENABLED
        // (*) Translation buffer ________________________________________________________
        // Iconv requires an intermediate buffer to read data into, before it can trans-
        // late it into a target character coding format. However, if there are more than
        // one input buffer, they could all use the same iconv translation buffer, since
        // they do not translate at the same time.
        uint8_t   iconv_translation_buffer[QUEX_SETTING_ICONV_TRANSLATION_BUFFER_SIZE];
#       endif
    };
 
#   ifdef QUEX_CHARACTER_TYPE
    typedef $$LEXER_CLASS_NAME$$   __$$LEXER_CLASS_NAME$$<QUEX_CHARACTER_TYPE>;
#   endif

    template <class InputHandleP> inline void
    CLASS::__constructor_core(InputHandleP input_handle, const char* IConvInputCodingName) 
    {
#       ifdef QUEX_OPTION_ACTIVATE_ASSERTS
        std::cout << "!! You are running a lexical analyser generated by quex in 'paranoid' mode.\n";
        std::cout << "!! This is very good, in a way that anything unexpected will cause a comment\n";
        std::cout << "!! and a program exit. However, the paranoia is a heavy load on speed performance!\n";
        std::cout << "!! To disable it, please, compile with the following compile option:\n";
        std::cout << "!! \"-DQUEX_OPTION_ASSERTS_DISABLED\".\n"
#       endif

        QUEX_CORE_BUFFER_TYPE* tmp = this->create_buffer(input_handle, IConvInputCodingName);
        QUEX_CORE_ANALYSER_STRUCT_init(this, 0, tmp, __current_mode_analyser_function_p);

#       ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE 
        _token_queue = new TokenQueue<$$TOKEN_CLASS$$>(QUEX_SETTING_TOKEN_QUEUE_INITIAL_SIZE);    
#       endif

        mode_db[0] = 0x0;
        // LexModeID = 0 is not used, mode indices from 1 to ModeN
$$CONSTRUCTOR_MODE_DB_INITIALIZATION_CODE$$

        set_mode_brutally($$INITIAL_LEXER_MODE_ID$$);

        __previous_mode_p = __current_mode_p;  // required for detection of mode changes inside
        //                                     // pattern actions
        __continue_analysis_after_adapting_mode_function_p_f = false;

$$CONSTRUCTOR_EXTENSTION$$
    }   

    inline const char* 
    CLASS::version() const
    { 
        return "$$LEXER_CLASS_NAME$$: Version $$LEXER_BUILD_VERSION$$. Date $$LEXER_BUILD_DATE$$\n"
               "Generated by Quex $$QUEX_VERSION$$";
    }
#   include <quex/code_base/temporary_macros_off>

#   define __QUEX_SETTING_DERIVED_CLASS_NAME    $$LEXER_DERIVED_CLASS_NAME$$
#   define __QUEX_SETTING_MAX_MODE_CLASS_N      $$MAX_MODE_CLASS_N$$
#   define __QUEX_SETTING_INITIAL_LEXER_MODE_ID $$INITIAL_LEXER_MODE_ID$$

#   include <quex/code_base/template/constructor.i>
#   include <quex/code_base/template/Counter.i>
#   ifdef __QUEX_OPTION_INDENTATION_TRIGGER_SUPPORT
#      include <quex/code_base/template/CounterWithIndentation.i>
#   endif
#   ifdef QUEX_OPTION_STRING_ACCUMULATOR
#       include <quex/code_base/template/Accumulator.i>
#   endif

#   ifdef QUEX_OPTION_TOKEN_SENDING_VIA_QUEUE
#      include <quex/code_base/template/token_receiving_via_queue.i>
#      include <quex/code_base/template/token_sending_via_queue.i>
#   else
#      include <quex/code_base/template/token_receiving_via_singleton.i>
#      include <quex/code_base/template/token_sending_via_singleton.i>
#   endif
#   include <quex/code_base/template/mode_handling.i>
#   ifdef  QUEX_OPTION_INCLUDE_STACK_SUPPORT
#      include <quex/code_base/template/IncludeStack.i>
#   endif
#   include <quex/code_base/template/misc.i>

#   undef __QUEX_SETTING_DERIVED_CLASS_NAME
#   undef __QUEX_SETTING_MAX_MODE_CLASS_N
#   undef __QUEX_SETTING_INITIAL_LEXER_MODE_ID 
#   undef __QUEX_SETTING_TOKEN_CLASS_NAME
#   undef CLASS

}

#endif // __INCLUDE_GUARD__QUEX__$$INCLUDE_GUARD_EXTENSION$$
