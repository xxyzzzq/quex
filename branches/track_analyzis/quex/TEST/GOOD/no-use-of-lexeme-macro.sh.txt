The Lexeme macro does some safety checks when compiled with
QUEX_OPTION_ASSERTS. These checks are sometimes nonsense in
generated code. This test checks that no code is generated
that referes to the Lexeme macros.

<<QUEX_PATH>>/quex/input/files/code_fragment.py:249:        #  QUEX_TKN_XYZ(Lexeme)     --> call take_text(Lexeme, LexemeEnd)
<<QUEX_PATH>>/quex/input/files/code_fragment.py:257:            if argument_list[0] == "Lexeme":
<<QUEX_PATH>>/quex/input/files/code_fragment.py:264:                error_msg("When one unnamed argument is specified it must be 'Lexeme'\n"          + \
<<QUEX_PATH>>/quex/input/files/code_fragment.py:267:                          "QUEX_TKN_MY_ID(Lexeme + 1, LexemeEnd - 2);\n"                             + \
<<QUEX_PATH>>/quex/input/files/code_fragment.py:276:                      "     one argument:   'Lexeme'   =>  token.take_text(..., LexemeBegin, LexemeEnd);\n"
<<QUEX_PATH>>/quex/input/files/code_fragment.py:299:            idx = value.find("Lexeme")
<<QUEX_PATH>>/quex/input/files/code_fragment.py:304:                    error_msg("Assignment of token member '%s' with 'Lexeme' directly being involved. The\n" % member_name + 
<<QUEX_PATH>>/quex/input/files/code_fragment.py:305:                              "'Lexeme' points into the text buffer and it is not owned by the token object.\n"
<<QUEX_PATH>>/quex/input/files/code_fragment.py:308:                              "   (1) Use '(Lexeme)', i.e. surround 'Lexeme' by brackets to indicate\n"
<<QUEX_PATH>>/quex/input/files/code_fragment.py:311:                              "       is not directly dependent anymore on 'Lexeme'. This is particularly\n"
<<QUEX_PATH>>/quex/input/files/code_fragment.py:315:                              "          \"%s(Lexeme+1, LexemeEnd-2)\"\n" % TokenName + 
<<QUEX_PATH>>/quex/input/files/code_fragment.py:316:                              "          \"%s(Lexeme)\"\n" % TokenName + 
<<QUEX_PATH>>/quex/output/cpp/action_preparation.py:174:        txt += "                \"    Proposal: Define 'on_failure' and analyze 'Lexeme'.\\n\");\n"
<<QUEX_PATH>>/quex/engine/generator/languages/cpp.py:277:    /* Lexeme setup: 
<<QUEX_PATH>>/quex/engine/generator/languages/cpp.py:280:     * references to the 'Lexeme'. 'LexemeNull' provides a reference to an empty
<<QUEX_PATH>>/quex/engine/generator/languages/cpp.py:567:    ObjectName = "Lexeme"
<<QUEX_PATH>>/quex/engine/generator/languages/cpp.py:587:        # Note: The variable must be named 'exactly' like the given name. 'xLexeme' or 'Lexemey'
<<QUEX_PATH>>/quex/engine/generator/languages/cpp.py:588:        #       shall not trigger a treatment of 'Lexeme'.
