init-state = 76L
00076() <~ (24, 55), (2, 4), (5, 10)
      == 'a' ==> 00077
      == 'b' ==> 00078
      <no epsilon>
00077(A, S, bol) <~ (2, 5, A, S, bol), (24, 56)
      == 'b' ==> 00081
      <no epsilon>
00081() <~ (24, 57)
      == 'c' ==> 00079
      <no epsilon>
00079() <~ (24, 58)
      == 'd' ==> 00080
      <no epsilon>
00080(A, S) <~ (24, 59, A, S)
      <no epsilon>
00078(A, S, bol) <~ (5, 11, A, S, bol), (24, 57)
      == 'c' ==> 00079
      <no epsilon>

State 76:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 77:
  .entry:
    .accepter:
        if      BeginOfLine: last_acceptance = Pattern2
    .positioner:
        .from 76: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 78:
  .entry:
    .accepter:
        if      BeginOfLine: last_acceptance = Pattern5
    .positioner:
        .from 76: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern5;
    pos = lexeme_start_p + 1;  goto Failure;


State 79:
  .entry:
    .positioner:
        .from 81: <nothing>
        .from 78: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 2: pos -= 2;  goto Pattern2;
        case 5: pos -= 1;  goto Pattern5;


State 80:
  .entry:
  .drop_out:
     goto Pattern24;


State 81:
  .entry:
    .positioner:
        .from 77: <nothing>
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


