init-state = 0L
00000() <~ (11, 29), (23, 62)
      == 'a' ==> 00001
      <no epsilon>
00001(S, P13) <~ (11, 30, S, P1), (23, 63, S, P13)
      == 'b' ==> 00002
      <no epsilon>
00002() <~ (11, 31), (23, 64)
      == 'b' ==> 00002
      == 'd' ==> 00003
      == 'e' ==> 00004
      <no epsilon>
00003(A, P1) <~ (11, 32, A, P1)
      <no epsilon>
00004(A, P13) <~ (23, 65, A, P13)
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1:
             position[PostContext_1]  = input_p;
             position[PostContext_13]  = input_p;
        .from 2: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos = position[PostContext_1] ; goto Pattern11;


State 4:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos = position[PostContext_13] ; goto Pattern23;


