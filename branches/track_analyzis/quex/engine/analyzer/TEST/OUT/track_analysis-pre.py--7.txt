init-state = 68L
00068() <~ (21, 49), (2, 4)
      == 'a' ==> 00070
      == 'b' ==> 00069
      <no epsilon>
00070(A, S, bol) <~ (2, 5, A, S, bol), (21, 50)
      == 'b' ==> 00071
      <no epsilon>
00071() <~ (21, 51)
      == 'c' ==> 00072
      <no epsilon>
00072() <~ (21, 52)
      == 'd' ==> 00073
      <no epsilon>
00073(A, S) <~ (21, 53, A, S)
      <no epsilon>
00069(A, S, bol) <~ (2, 5, A, S, bol), (21, 51)
      == 'c' ==> 00072
      <no epsilon>

State 68:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 69:
  .entry:
    .positioner:
        .from 68: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 70:
  .entry:
    .positioner:
        .from 68: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 71:
  .entry:
    .positioner:
        .from 70:if 'BeginOfLine':  position[Acceptance] = input_p;
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 72:
  .entry:
    .positioner:
        .from 69:if 'BeginOfLine':  position[Acceptance] = input_p;
        .from 71: <nothing>
  .drop_out:
    if BeginOfLine: pos = position[Acceptance]; goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 73:
  .entry:
  .drop_out:
     goto Pattern21;


