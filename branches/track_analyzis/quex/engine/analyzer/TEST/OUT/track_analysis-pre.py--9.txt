init-state = 74L
00074() <~ (2, 4), (4, 8), (23, 53)
      == 'a' ==> 00075
      == 'b' ==> 00076
      <no epsilon>
00075(A, S, bol) <~ (2, 5, A, S, bol), (23, 55)
      == 'b' ==> 00079
      <no epsilon>
00079() <~ (23, 54)
      == 'c' ==> 00077
      <no epsilon>
00077() <~ (23, 56)
      == 'd' ==> 00078
      <no epsilon>
00078(A, S) <~ (23, 57, A, S)
      <no epsilon>
00076(A, S) <~ (4, 9, A, S), (23, 54)
      == 'c' ==> 00077
      <no epsilon>

State 74:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 75:
  .entry:
    .accepter:
        if      BeginOfLine: last_acceptance = Pattern2
    .positioner:
        .from 74: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 76:
  .entry:
    .accepter:
        last_acceptance = Pattern4
    .positioner:
        .from 74: <nothing>
  .drop_out:
     goto Pattern4;


State 77:
  .entry:
    .positioner:
        .from 76: <nothing>
        .from 79: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 2: pos -= 2;  goto Pattern2;
        case 4: pos -= 1;  goto Pattern4;


State 78:
  .entry:
  .drop_out:
     goto Pattern23;


State 79:
  .entry:
    .positioner:
        .from 75: <nothing>
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


