init-state = 0L
00000() <~ (41, 100), (8, 18), (17, 39)
      == 'x' ==> 00001
      <no epsilon>
00001(S, P1) <~ (8, 19, S, P1), (17, 40), (41, 101)
      == 'y' ==> 00002
      <no epsilon>
00002(S, P13) <~ (8, 20), (17, 41, S, P13), (41, 102)
      == 'a' ==> 00003
      == 'b' ==> 00007
      <no epsilon>
00003(A, P1) <~ (8, 21, A, P1), (41, 103)
      == 'c' ==> 00004
      <no epsilon>
00004() <~ (41, 104)
      == 'd' ==> 00005
      <no epsilon>
00005() <~ (41, 105)
      == 'e' ==> 00006
      <no epsilon>
00006(A, S) <~ (41, 106, A, S)
      <no epsilon>
00007(A, P13) <~ (17, 42, A, P13), (41, 103)
      == 'c' ==> 00004
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .accepter:
        last_acceptance = Pattern8
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 2;  goto Pattern8;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
        .from 7: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos -= 3;  goto Pattern8;
        case 17: pos -= 2;  goto Pattern17;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 8: pos -= 4;  goto Pattern8;
        case 17: pos -= 3;  goto Pattern17;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
     goto Pattern41;


State 7:
  .entry:
    .accepter:
        last_acceptance = Pattern17
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern17;


