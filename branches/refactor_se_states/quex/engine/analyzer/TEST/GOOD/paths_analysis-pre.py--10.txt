init-state = 0L
00000 
     == 'a' ==> 00001
     == 'b' ==> 00005
    
00001 A(1,pre=1)
     == 'a' ==> 00001
     == 'd' ==> 00002
    
00002 
     == 'e' ==> 00003
    
00003 A(3)
     == 'f' ==> 00004
    
00004 A(4,pre=3), A(5,pre=4), A(6,pre=5)
    
00005 A(2,pre=2)
     == 'c' ==> 00006
    
00006 
     == 'c' ==> 00006
     == 'd' ==> 00002
    

State 0:
  .entry:
    .from NONE: last_acceptance = Failure

.drop_out:
pos = lexeme_start_p + 1;  goto Failure;

State 1:
  .entry:
    .from 0: if PreContext_1:  last_acceptance = Pattern1
    .from 1: if PreContext_1:  last_acceptance = Pattern1

.drop_out:
if PreContext_1: goto Pattern1;
pos = lexeme_start_p + 1;  goto Failure;

State 2:
  .entry:
    .from 1: 
    .from 6: 

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 1: pos -= 1;  goto Pattern1;
case 2: pos = position[PostContext_2] ; goto Pattern2;


State 3:
  .entry:
    .from 2: 

.drop_out:
goto Pattern3;

State 4:
  .entry:
    .from 3: 

.drop_out:
if PreContext_3: goto Pattern4;
else if PreContext_4: goto Pattern5;
else if PreContext_5: goto Pattern6;
pos -= 1;  goto Pattern3;

State 5:
  .entry:
    .from 0: if PreContext_2:  last_acceptance = Pattern2

.drop_out:
if PreContext_2: goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;

State 6:
  .entry:
    .from 5: if 'PreContext_2': position[PostContext_2]  = input_p;
    .from 6: 

.drop_out:
if PreContext_2: pos = position[PostContext_2] ; goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;

State 0:
        [MATCH_FAILURE]: NONE/set([0L])

State 1:
        [MATCH_FAILURE]: NONE/set([0L])
        [      1]: 1/set([1L])

State 2:
        [MATCH_FAILURE]: NONE/set([0L])
        [      1]: 1/set([1L])
    (*) [      2]: 2/set([5L])

State 3:
        [      3]: NONE/set([3L])

State 4:
        [      3]: NONE/set([3L])
        [      4]: 3/set([4L])
        [      5]: 4/set([4L])
        [      6]: 5/set([4L])

State 5:
        [MATCH_FAILURE]: NONE/set([0L])
        [      2]: 2/set([5L])

State 6:
        [MATCH_FAILURE]: NONE/set([0L])
    (*) [      2]: 2/set([5L])


--- Optimized States ---

State 2:
  .entry:
    .from 1: 
    .from 6: 

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 1: pos -= 1;  goto Pattern1;
case 2: pos = position[PostContext_0] ; goto Pattern2;


State 6:
  .entry:
    .from 5: if 'PreContext_2': position[PostContext_0]  = input_p;
    .from 6: 

.drop_out:
if PreContext_2: pos = position[PostContext_0] ; goto Pattern2;
pos = lexeme_start_p + 1;  goto Failure;

