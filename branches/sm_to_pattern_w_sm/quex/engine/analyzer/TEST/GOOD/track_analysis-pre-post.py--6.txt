init-state = 0L
00000() <~ (43, 102), (11, 23), (29, 65)
      == 'a' ==> 00001
      <no epsilon>
00001(A, R, pre=9) <~ (11, 24, A, pre=9), (29, 66, S), (43, 103)
      == 'a' ==> 00002
      <no epsilon>
00002(A, pre=9) <~ (11, 25, A, pre=9), (29, 67), (43, 104)
      == 'a' ==> 00003
      <no epsilon>
00003() <~ (29, 68), (43, 105)
      == 'a' ==> 00004
      <no epsilon>
00004(A, R, pre=27) <~ (29, 69, A, R, pre=27), (43, 106)
      == 'b' ==> 00005
      <no epsilon>
00005(A) <~ (43, 107, A)
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_9:  goto Pattern11;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    if PreContext_9:  goto Pattern11;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_9: pos -= 1;  goto Pattern11;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    if PreContext_27: pos -= 3;  goto Pattern29;
    else if PreContext_9: pos -= 2;  goto Pattern11;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
     goto Pattern43;


