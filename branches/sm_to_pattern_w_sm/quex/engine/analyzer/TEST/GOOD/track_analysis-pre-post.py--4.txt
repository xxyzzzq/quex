init-state = 0L
00000() <~ (29, 65), (46, 111), (14, 30)
      == 'a' ==> 00001
      <no epsilon>
00001(S3) <~ (14, 31, S3), (29, 66), (46, 112)
      == 'b' ==> 00002
      <no epsilon>
00002() <~ (14, 32), (29, 67), (46, 113)
      == 'c' ==> 00003
      <no epsilon>
00003(A, R3, pre=27) <~ (14, 33, A, R3, pre=12), (29, 68, A, pre=27), (46, 114)
      == 'd' ==> 00004
      <no epsilon>
00004() <~ (46, 115)
      == 'e' ==> 00005
      <no epsilon>
00005() <~ (46, 116)
      == 'f' ==> 00006
      <no epsilon>
00006(A) <~ (46, 117, A)
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_12: pos -= 2;  goto Pattern14;
    else if PreContext_27:  goto Pattern29;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    if PreContext_12: pos -= 3;  goto Pattern14;
    else if PreContext_27: pos -= 1;  goto Pattern29;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    if PreContext_12: pos -= 4;  goto Pattern14;
    else if PreContext_27: pos -= 2;  goto Pattern29;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
     goto Pattern46;


