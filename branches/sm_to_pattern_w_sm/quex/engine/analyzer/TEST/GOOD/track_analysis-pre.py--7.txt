init-state = 0L
00000() <~ (21, 49), (2, 4)
      == 'a' ==> 00001
      == 'b' ==> 00005
      <no epsilon>
00001(A, pre=bol) <~ (2, 5, A, pre=bol), (21, 50)
      == 'b' ==> 00002
      <no epsilon>
00002() <~ (21, 51)
      == 'c' ==> 00003
      <no epsilon>
00003() <~ (21, 52)
      == 'd' ==> 00004
      <no epsilon>
00004(A) <~ (21, 53, A)
      <no epsilon>
00005(A, pre=bol) <~ (2, 5, A, pre=bol), (21, 51)
      == 'c' ==> 00003
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1:if 'BeginOfLine':  position[Acceptance] = input_p;
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
        .from 5:if 'BeginOfLine':  position[Acceptance] = input_p;
  .drop_out:
    if BeginOfLine: pos = position[Acceptance]; goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
     goto Pattern21;


State 5:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


