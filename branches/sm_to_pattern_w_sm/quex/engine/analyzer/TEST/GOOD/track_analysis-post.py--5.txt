init-state = 0L
00000 (25, 58), (17, 39), (8, 17)
     == 'a' ==> 00001
     == 'b' ==> 00004
     <no epsilon>
00001 (8, 18), (17, 40, S), (25, 59)
     == 'b' ==> 00002
     <no epsilon>
00002 (8, 19, S), (17, 41), (25, 60)
     == 'c' ==> 00003
     <no epsilon>
00003 (8, 20, A, R), (17, 42, A, R), (25, 61, A)
     <no epsilon>
00004 (25, 59)
     == 'b' ==> 00005
     <no epsilon>
00005 (25, 60)
     == 'c' ==> 00006
     <no epsilon>
00006 (25, 61, A)
     <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern8;


State 4:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
     goto Pattern25;


