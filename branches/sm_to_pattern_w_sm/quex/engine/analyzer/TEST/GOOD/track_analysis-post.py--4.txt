init-state = 0L
00000() <~ (25, 59), (17, 40), (8, 18)
      == 'a' ==> 00001
      == 'b' ==> 00004
      == 'c' ==> 00007
      <no epsilon>
00001(S) <~ (8, 19, S)
      == 'b' ==> 00002
      <no epsilon>
00002() <~ (8, 20)
      == 'c' ==> 00003
      <no epsilon>
00003(A, R) <~ (8, 21, A, R)
      <no epsilon>
00004(S) <~ (17, 41, S)
      == 'b' ==> 00005
      <no epsilon>
00005() <~ (17, 42)
      == 'c' ==> 00006
      <no epsilon>
00006(A, R) <~ (17, 43, A, R)
      <no epsilon>
00007() <~ (25, 60)
      == 'b' ==> 00008
      <no epsilon>
00008() <~ (25, 61)
      == 'c' ==> 00009
      <no epsilon>
00009(A) <~ (25, 62, A)
      <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 2;  goto Pattern8;


State 4:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
    pos -= 2;  goto Pattern17;


State 7:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 8:
  .entry:
    .positioner:
        .from 7: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 9:
  .entry:
    .positioner:
        .from 8: <nothing>
  .drop_out:
     goto Pattern25;


