init-state = 0L
00000 (8, 16), (20, 47), (35, 88), (37, 96)
     == 'a' ==> 00001
    
00001 (8, 17, A, pre=6), (20, 48, S), (35, 89, S), (37, 97, A)
     == 'b' ==> 00002
    
00002 (20, 49), (35, 90)
     == 'b' ==> 00003
     == 'c' ==> 00005
    
00003 (20, 49)
     == 'b' ==> 00003
     == 'c' ==> 00004
    
00004 (20, 50, A, R)
    
00005 (20, 50, A, R), (35, 91)
     == 'd' ==> 00006
    
00006 (35, 92)
     == 'e' ==> 00007
    
00007 (35, 93, A, R)
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_6:  goto Pattern8;
     goto Pattern37;


State 2:
  .entry:
    .positioner:
        .from 1:
             position[Acceptance] = input_p;
             position[PostContext_20]  = input_p;
  .drop_out:
    if PreContext_6: pos -= 1;  goto Pattern8;
    pos -= 1;  goto Pattern37;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
        .from 3: <nothing>
  .drop_out:
    if PreContext_6: pos = position[Acceptance]; goto Pattern8;
    pos = position[Acceptance]; goto Pattern37;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    pos = position[PostContext_20] ; goto Pattern20;


State 5:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 2;  goto Pattern20;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
    pos -= 3;  goto Pattern20;


State 7:
  .entry:
    .positioner:
        .from 6: <nothing>
  .drop_out:
    pos -= 4;  goto Pattern35;


