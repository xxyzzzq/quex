init-state = 0L
00000 (3, 6), (19, 45), (36, 94), (34, 86)
     == 'a' ==> 00001
    
00001 (3, 7, A, pre=7), (19, 46, S), (34, 87, S), (36, 95, A)
     == 'b' ==> 00002
    
00002 (19, 47), (34, 88)
     == 'b' ==> 00003
     == 'c' ==> 00005
    
00003 (19, 47)
     == 'b' ==> 00003
     == 'c' ==> 00004
    
00004 (19, 48, A, R)
    
00005 (19, 48, A, R), (34, 89)
     == 'd' ==> 00006
    
00006 (34, 90)
     == 'e' ==> 00007
    
00007 (34, 91, A, R)
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if PreContext_7:  goto Pattern3;
     goto Pattern36;


State 2:
  .entry:
    .positioner:
        .from 1:
             position[Acceptance] = input_p;
             position[PostContext_19]  = input_p;
  .drop_out:
    if PreContext_7: pos -= 1;  goto Pattern3;
    pos -= 1;  goto Pattern36;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
        .from 3: <nothing>
  .drop_out:
    if PreContext_7: pos = position[Acceptance]; goto Pattern3;
    pos = position[Acceptance]; goto Pattern36;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
    pos = position[PostContext_19] ; goto Pattern19;


State 5:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    pos -= 2;  goto Pattern19;


State 6:
  .entry:
    .positioner:
        .from 5: <nothing>
  .drop_out:
    pos -= 3;  goto Pattern19;


State 7:
  .entry:
    .positioner:
        .from 6: <nothing>
  .drop_out:
    pos -= 4;  goto Pattern34;


