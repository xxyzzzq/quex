init-state = 0L
00000 (2, 4), (4, 8), (23, 53)
     == 'a' ==> 00001
     == 'b' ==> 00005
    
00001 (2, 5, A, pre=bol), (23, 55)
     == 'b' ==> 00002
    
00002 (23, 54)
     == 'c' ==> 00003
    
00003 (23, 56)
     == 'd' ==> 00004
    
00004 (23, 57, A)
    
00005 (4, 9, A), (23, 54)
     == 'c' ==> 00003
    

State 0:
  .entry:
    .accepter:
        last_acceptance = Failure
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .accepter:
        if      BeginOfLine: last_acceptance = Pattern2
    .positioner:
        .from 0: <nothing>
  .drop_out:
    if BeginOfLine:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1: <nothing>
  .drop_out:
    if BeginOfLine: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
        .from 5: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case Failure: pos = lexeme_start_p + 1;  goto Failure;
        case 2: pos -= 2;  goto Pattern2;
        case 4: pos -= 1;  goto Pattern4;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
  .drop_out:
     goto Pattern23;


State 5:
  .entry:
    .accepter:
        last_acceptance = Pattern4
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern4;


