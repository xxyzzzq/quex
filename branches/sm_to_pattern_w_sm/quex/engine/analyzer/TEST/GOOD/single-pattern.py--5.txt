init-state = 0L
00000 (30, 78)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (30, 80, S)
     == 'a' ==> 00001
     == 'd' ==> 00002
    
00002 (30, 81)
     == 'd' ==> 00002
     == 'f' ==> 00003
    
00003 (30, 82, A, R, pre=28)
    
00004 (30, 79)
     == 'c' ==> 00005
    
00005 (30, 83, S)
     == 'd' ==> 00002
    
pre-condition inverted = init-state = 0L
00000 ()
     == 'x' ==> 00001
    
00001 (A)
    

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
        .from 1: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .positioner:
        .from 1:if 'PreContext_28':  position[PostContext_30]  = input_p;
        .from 2: <nothing>
        .from 5:if 'PreContext_28':  position[PostContext_30]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_28: pos = position[PostContext_30] ; goto Pattern30;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


