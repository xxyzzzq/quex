init-state = 0L
00000 (19, 41), (21, 47), (45, 110), (4, 8)
     == 'a' ==> 00001
     == 'b' ==> 00006
     <no epsilon>
00001 (4, 9, A), (19, 42, S), (45, 112)
     == 'a' ==> 00002
     <no epsilon>
00002 (4, 10, A), (19, 43), (45, 113)
     == 'a' ==> 00003
     <no epsilon>
00003 (19, 44, A, R, pre=17), (45, 114)
     == 'c' ==> 00004
     <no epsilon>
00004 (45, 115)
     == 'd' ==> 00005
     <no epsilon>
00005 (45, 116, A)
     <no epsilon>
00006 (21, 48, A), (45, 111)
     == 'b' ==> 00007
     <no epsilon>
00007 (45, 114)
     == 'c' ==> 00004
     <no epsilon>

State 0:
  .entry:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern4;


State 2:
  .entry:
    .accepter:
        last_acceptance = Pattern4
    .positioner:
        .from 1: <nothing>
  .drop_out:
     goto Pattern4;


State 3:
  .entry:
    .accepter:
        if      PreContext_17: last_acceptance = Pattern19
    .positioner:
        .from 2: <nothing>
  .drop_out:
    if PreContext_17: pos -= 2;  goto Pattern19;
    pos -= 1;  goto Pattern4;


State 4:
  .entry:
    .positioner:
        .from 3: <nothing>
        .from 7: <nothing>
  .drop_out:
    Checker:
        accept = last_acceptance
    Router:
        case 19: pos -= 3;  goto Pattern19;
        case 4: pos -= 2;  goto Pattern4;
        case 21: pos -= 2;  goto Pattern21;


State 5:
  .entry:
    .positioner:
        .from 4: <nothing>
  .drop_out:
     goto Pattern45;


State 6:
  .entry:
    .accepter:
        last_acceptance = Pattern21
    .positioner:
        .from 0: <nothing>
  .drop_out:
     goto Pattern21;


State 7:
  .entry:
    .positioner:
        .from 6: <nothing>
  .drop_out:
    pos -= 1;  goto Pattern21;


