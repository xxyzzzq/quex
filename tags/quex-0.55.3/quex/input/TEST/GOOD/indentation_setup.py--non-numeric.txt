(1) |[\v\a] => grid variable;>|

Spaces:
Grids:
    variable by '\a', '\v'
Bad:
    
Newline:
    init-state = 5L
    00005() <~ 
          == '\n' ==> 00006
          == '\r' ==> 00007
          <no epsilon>
    00006(A, S) <~ 
          <no epsilon>
    00007() <~ 
          == '\n' ==> 00006
          <no epsilon>
    
Suppressor:
    <none>


(2) |[\v\a] => grid variable kongo;>|

test_string:1:error: Missing ';' after indentation 'grid' specification.
Exception!

(3) |[\v\a] => space variable2;>|

Spaces:
    variable2 by '\a', '\v'
Grids:
Bad:
    
Newline:
    init-state = 16L
    00016() <~ 
          == '\n' ==> 00017
          == '\r' ==> 00018
          <no epsilon>
    00017(A, S) <~ 
          <no epsilon>
    00018() <~ 
          == '\n' ==> 00017
          <no epsilon>
    
Suppressor:
    <none>


(4) |[\v\a] => space variable 2;>|

test_string:1:error: Missing ';' after indentation 'space' specification.
Exception!

(5) |>|

Spaces:
      1 by ' '
Grids:
      4 by '\t'
Bad:
    
Newline:
    init-state = 23L
    00023() <~ 
          == '\n' ==> 00024
          == '\r' ==> 00025
          <no epsilon>
    00024(A, S) <~ 
          <no epsilon>
    00025() <~ 
          == '\n' ==> 00024
          <no epsilon>
    
Suppressor:
    <none>


(6) |/* empty will do */>|

Spaces:
      1 by ' '
Grids:
      4 by '\t'
Bad:
    
Newline:
    init-state = 26L
    00026() <~ 
          == '\n' ==> 00027
          == '\r' ==> 00028
          <no epsilon>
    00027(A, S) <~ 
          <no epsilon>
    00028() <~ 
          == '\n' ==> 00027
          <no epsilon>
    
Suppressor:
    <none>


