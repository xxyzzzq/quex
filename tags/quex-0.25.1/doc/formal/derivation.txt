The class generated by quex implements an engine for lexical analysis with
some basic functionality as was discussed in the previous sections. Sometimes,
though, it is necessary to add features to the lexical analyser. Especially,
adding event handlers for file inclusion and pattern matching requires to
overide virtual functions of the engine. Adding new features while keeping
basic functionality is best done using C++ inheritance, i.e. one derives his
own class from the generated lexer class. 

The name and definition of this class needs to be known for the creation of
the lexical analyser. Thus, one has to specify the command line option` 
  --derived-class` followed by the name of the class and` 
  --derived-class-file` followed by the name of the file that contains the
definition of the derived class. The derivation itself happens in the standard
C++ way, i.e. one derives publicly from the lexical analyser class:

[cpp]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   class small_lexer 
      : public quex::tiny_lexer {
        small_lexer(const std::string& filename,
                    std::ostream*      output_stream = 0);

        // ...
   };
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note, that the derived class has to call a base class' constructor from
inside its constructor initialization list in order to propperly initialize
the lexical analyser object.

[cpp]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    small_lexer(const std::string& filename,
                std::ostream*      output_stream = 0)
        : tiny_lexer(filename, output_stream),
          // ...
    {
          // ...
    }
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If these caveats are taken care of the user is free to create objects of his
derived class and use it the same way as he used the previous plain generated
class.

