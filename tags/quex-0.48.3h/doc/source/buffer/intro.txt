.. _sec-buffer-handling:

Buffer Handling
===============

This chapter discusses the interactions of quex and the buffer management. The
knowledge about this is helpful for the implemention a customized buffer
handling procedure and the understanding of the generated analyzer code. Let
the term 'engine' refer to the analyzer that quex generates.

The process of lexical analysis is based on an iteration over a sequence of
characters which appear to the engine as (unsigned) integer values. They are 
lined up in chunks of memory of *equal size* [#f1]_. The fact that they
occupy cells of equal size simplifies the iteration [#f2]_ and thus is 
essential for performance.

For efficiency reasons, the characters to be analyzed are located in a 
chunk of memory which is an integer multiple of the character size. Since
the character size is equal for each character, it is safe to assume that
a buffer border never cuts in the middle of a character. For dynamically
sized encodings, such as UTF-8, a converter is used that transforms
the input stream into a sequence equally sized Unicode characters 
(see section :ref:`sec-character-encodings`).

Reload Forward
--------------

Each implemented state in the state machine has an 'appendix' which is executed
if the current character does not trigger a transition to another state. Then the
following happens:

#. **current character â‰  buffer limit code**: No pattern is able to match
   against the current input. The terminal router determines what pattern won the
   race and the program proceeds with the execution of the winning pattern's action. 

#. **current character = buffer limit code**: Try to reload the buffer with 
   more data. 

   *  **current character not located at end of file pointer**: 
   
      In this case it just reached the buffer border. The reload succeeds,
      pointers are adapted, and the current state is re-entered with the first
      loaded character as input. 
   
   *  **current character located at end of file pointer**: The reload fails [#f3]_.

      #. No more pattern can match the input and the program proceeds to the terminal
         router. 
         
      #. The action of the winning pattern is performed.

      #. The analysis starts at the end of file pointer.

      #. The initial state chokes the buffer limit code, detects
         ``end of file`` and the program proceeds to the terminal for the end
         of file action.


.. rubric:: Footnotes

.. [#f1] When using the ASCII character set each of the integer values
         occupies one byte. However, there are other codings with two
         or four bytes per character.

.. [#f2] The iteration step basically consists then of an addition
         of a constant integer to the input pointer and a dereferencing.
         The addition of a constant integer is accomplished very 
         efficiently by most modern CPUs.

.. [#f3] If the end of file pointer is located inside the buffer region, this
         means that the last buffer load already took all content out of 
         the file under analysis. Since there is no more data left in the file,
         the reload will return ``false``.
