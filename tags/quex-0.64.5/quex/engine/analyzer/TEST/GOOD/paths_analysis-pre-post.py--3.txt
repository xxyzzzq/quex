init-state = 0L
00000 (1), (2), (4), (3)
     == 'a' ==> 00001
    
00001 (1, A, pre=1), (2, S), (3, S), (4, A)
     == 'b' ==> 00002
    
00002 (2), (3)
     == 'b' ==> 00003
     == 'c' ==> 00005
    
00003 (2)
     == 'b' ==> 00003
     == 'c' ==> 00004
    
00004 (2, A, R)
    
00005 (2, A, R), (3)
     == 'd' ==> 00006
    
00006 (3)
     == 'e' ==> 00007
    
00007 (3, A, R)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    if PreContext_1:  goto Pattern1;
     goto Pattern4;


State 2:
  .entry:
    .from 1:
        position[PostContext_2]  = input_p;
        position[PostContext_4]  = input_p;
        if 'PreContext_1': position[PostContext_1]  = input_p;
  .drop_out:
    if PreContext_1: pos -= 1;  goto Pattern1;
    pos -= 1;  goto Pattern4;


State 3:
  .entry:
    .from 2:
    .from 3:
  .drop_out:
    if PreContext_1: pos = position[PostContext_1] ; goto Pattern1;
    pos = position[PostContext_4] ; goto Pattern4;


State 4:
  .entry:
    .from 3:
  .drop_out:
    pos = position[PostContext_2] ; goto Pattern2;


State 5:
  .entry:
    .from 2:
  .drop_out:
    pos -= 2;  goto Pattern2;


State 6:
  .entry:
    .from 5:
  .drop_out:
    pos -= 3;  goto Pattern2;


State 7:
  .entry:
    .from 6:
  .drop_out:
    pos -= 4;  goto Pattern3;



--- Optimized States ---

State 2:
  .entry:
    .from 1: position[PostContext_0]  = input_p;
  .drop_out:
    if PreContext_1: pos -= 1;  goto Pattern1;
    pos -= 1;  goto Pattern4;


State 3:
  .entry:
    .from 2:
    .from 3:
  .drop_out:
    if PreContext_1: pos = position[PostContext_0] ; goto Pattern1;
    pos = position[PostContext_0] ; goto Pattern4;


State 4:
  .entry:
    .from 3:
  .drop_out:
    pos = position[PostContext_0] ; goto Pattern2;


