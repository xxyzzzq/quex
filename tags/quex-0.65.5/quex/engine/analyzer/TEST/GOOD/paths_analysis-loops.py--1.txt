init-state = 0L
00000 
     == 'a' ==> 00001
    
00001 A(4,pre=4)
     == 'a' ==> 00002
    
00002 
     == 'b' ==> 00003
     == 'c' ==> 00008
    
00003 
     == '0' ==> 00004
     == '1' ==> 00006
    
00004 A(2,pre=2)
     == '0' ==> 00005
    
00005 
     == '0' ==> 00002
    
00006 A(3,pre=3)
     == '1' ==> 00007
    
00007 
     == '1' ==> 00002
    
00008 
     == 'c' ==> 00009
    
00009 A(1,pre=1)
    

State 0:
  .entry:
    .from BEFORE_ENTRY: last_acceptance = Failure

.drop_out:
pos = lexeme_start_p + 1;  goto Failure;

State 1:
  .entry:
    .from 0: if PreContext_4:  last_acceptance = Pattern4

.drop_out:
if PreContext_4: goto Pattern4;
pos = lexeme_start_p + 1;  goto Failure;

State 2:
  .entry:
    .from 1: if 'PreContext_4': position[PostContext_4]  = input_p;
    .from 5: 
    .from 7: 

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_2] ; goto Pattern2;
case 3: pos = position[PostContext_3] ; goto Pattern3;
case 4: pos = position[PostContext_4] ; goto Pattern4;


State 3:
  .entry:
    .from 2: 

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_2] ; goto Pattern2;
case 3: pos = position[PostContext_3] ; goto Pattern3;
case 4: pos = position[PostContext_4] ; goto Pattern4;


State 4:
  .entry:
    .from 3: if PreContext_2:  last_acceptance = Pattern2

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: goto Pattern2;
case 3: pos = position[PostContext_3] ; goto Pattern3;
  case 4: pos = position[PostContext_4] ; goto Pattern4;


    State 5:
.entry:
.from 4: if 'PreContext_2': position[PostContext_2]  = input_p;

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos -= 1;  goto Pattern2;
  case 3: pos = position[PostContext_3] ; goto Pattern3;
    case 4: pos = position[PostContext_4] ; goto Pattern4;


State 6:
.entry:
.from 3: if PreContext_3:  last_acceptance = Pattern3

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_2] ; goto Pattern2;
  case 3: goto Pattern3;
    case 4: pos = position[PostContext_4] ; goto Pattern4;


State 7:
.entry:
.from 6: if 'PreContext_3': position[PostContext_3]  = input_p;

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_2] ; goto Pattern2;
  case 3: pos -= 1;  goto Pattern3;
    case 4: pos = position[PostContext_4] ; goto Pattern4;


State 8:
.entry:
.from 2: 

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_2] ; goto Pattern2;
  case 3: pos = position[PostContext_3] ; goto Pattern3;
    case 4: pos = position[PostContext_4] ; goto Pattern4;


State 9:
.entry:
.from 8: if PreContext_1:  last_acceptance = Pattern1

.drop_out:
on last_acceptance:
case 1: goto Pattern1;
        case 2: pos = position[PostContext_2] ; goto Pattern2;
case 3: pos = position[PostContext_3] ; goto Pattern3;
        case 4: pos = position[PostContext_4] ; goto Pattern4;
case Failure: pos = lexeme_start_p + 1;  goto Failure;


        State 0:
[MATCH_FAILURE]: NONE/set([0L])

        State 1:
    [MATCH_FAILURE]: NONE/set([0L])
    [      4]: 4/set([1L])

    State 2:
[MATCH_FAILURE]: NONE/set([0L])
        (*) [      2]: 2/set([4L])
    (*) [      3]: 3/set([6L])
    (*) [      4]: 4/set([1L])

    State 3:
[MATCH_FAILURE]: NONE/set([0L])
        (*) [      2]: 2/set([4L])
        (*) [      3]: 3/set([6L])
    (*) [      4]: 4/set([1L])

    State 4:
[MATCH_FAILURE]: NONE/set([0L])
        [      2]: 2/set([4L])
        (*) [      3]: 3/set([6L])
    (*) [      4]: 4/set([1L])

    State 5:
[MATCH_FAILURE]: NONE/set([0L])
        [      2]: 2/set([4L])
    (*) [      3]: 3/set([6L])
        (*) [      4]: 4/set([1L])

    State 6:
[MATCH_FAILURE]: NONE/set([0L])
        (*) [      2]: 2/set([4L])
    [      3]: 3/set([6L])
        (*) [      4]: 4/set([1L])

    State 7:
[MATCH_FAILURE]: NONE/set([0L])
        (*) [      2]: 2/set([4L])
    [      3]: 3/set([6L])
    (*) [      4]: 4/set([1L])

    State 8:
[MATCH_FAILURE]: NONE/set([0L])
        (*) [      2]: 2/set([4L])
        (*) [      3]: 3/set([6L])
    (*) [      4]: 4/set([1L])

    State 9:
    [MATCH_FAILURE]: NONE/set([0L])
[      1]: 1/set([9L])
(*) [      2]: 2/set([4L])
  (*) [      3]: 3/set([6L])
    (*) [      4]: 4/set([1L])


    --- Optimized States ---

    State 2:
.entry:
  .from 1: if 'PreContext_4': position[PostContext_2]  = input_p;
    .from 5: 
.from 7: 

  .drop_out:
    on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case 3: pos = position[PostContext_1] ; goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;


State 3:
.entry:
.from 2: 

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case 3: pos = position[PostContext_1] ; goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;


State 4:
.entry:
.from 3: if PreContext_2:  last_acceptance = Pattern2

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: goto Pattern2;
case 3: pos = position[PostContext_1] ; goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;


State 5:
.entry:
.from 4: if 'PreContext_2': position[PostContext_0]  = input_p;

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos -= 1;  goto Pattern2;
case 3: pos = position[PostContext_1] ; goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;


State 6:
.entry:
.from 3: if PreContext_3:  last_acceptance = Pattern3

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case 3: goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;


State 7:
.entry:
.from 6: if 'PreContext_3': position[PostContext_1]  = input_p;

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case 3: pos -= 1;  goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;


State 8:
.entry:
.from 2: 

.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p + 1;  goto Failure;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case 3: pos = position[PostContext_1] ; goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;


State 9:
.entry:
.from 8: if PreContext_1:  last_acceptance = Pattern1

.drop_out:
on last_acceptance:
case 1: goto Pattern1;
case 2: pos = position[PostContext_0] ; goto Pattern2;
case 3: pos = position[PostContext_1] ; goto Pattern3;
case 4: pos = position[PostContext_2] ; goto Pattern4;
case Failure: pos = lexeme_start_p + 1;  goto Failure;


