< #ifndef __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$
< #define __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$
> #ifndef __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION____QUEX____TESTANALYZER
> #define __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION____QUEX____TESTANALYZER
< #define QUEX_SETTING_VERSION           "$$QUEX_VERSION$$"
< #define QUEX_SETTING_ANALYZER_VERSION  "$$USER_LEXER_VERSION$$"
> #define QUEX_SETTING_VERSION           "0.62.2-cw"
> #define QUEX_SETTING_ANALYZER_VERSION  "0.0.0-pre-release"
< $$SWITCH$$ __QUEX_OPTION_PLAIN_C
> /* #define __QUEX_OPTION_PLAIN_C */
< $$SWITCH$$ QUEX_OPTION_COMPUTED_GOTOS
> /* #define QUEX_OPTION_COMPUTED_GOTOS */
< #define    __QUEX_SETTING_MAX_MODE_CLASS_N         ($$MAX_MODE_CLASS_N$$)
> #define    __QUEX_SETTING_MAX_MODE_CLASS_N         (0)
< #   define __QUEX_SETTING_INITIAL_LEXER_MODE_ID    ($$INITIAL_LEXER_MODE_ID$$)
> #   define __QUEX_SETTING_INITIAL_LEXER_MODE_ID    (QUEX_NAME(ModeID_))
< #define    __QUEX_SETTING_TOKEN_ID_TERMINATION       ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$TERMINATION)
< #define    __QUEX_SETTING_TOKEN_ID_UNINITIALIZED     ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$UNINITIALIZED)
< #define    __QUEX_SETTING_TOKEN_ID_INDENT            ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$INDENT)
< #define    __QUEX_SETTING_TOKEN_ID_DEDENT            ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$DEDENT)
< #define    __QUEX_SETTING_TOKEN_ID_NODENT            ((QUEX_TYPE_TOKEN_ID)$$TOKEN_PREFIX$$NODENT)
< #define    __QUEX_SETTING_TOKEN_ID_REPETITION_TEST(TokenID) ($$TOKEN_REPEAT_TEST$$)
> #define    __QUEX_SETTING_TOKEN_ID_TERMINATION       ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_TERMINATION)
> #define    __QUEX_SETTING_TOKEN_ID_UNINITIALIZED     ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_UNINITIALIZED)
> #define    __QUEX_SETTING_TOKEN_ID_INDENT            ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_INDENT)
> #define    __QUEX_SETTING_TOKEN_ID_DEDENT            ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_DEDENT)
> #define    __QUEX_SETTING_TOKEN_ID_NODENT            ((QUEX_TYPE_TOKEN_ID)QUEX_TKN_NODENT)
> #define    __QUEX_SETTING_TOKEN_ID_REPETITION_TEST(TokenID) (false)
< $$SWITCH$$ __QUEX_OPTION_LITTLE_ENDIAN
> #define    __QUEX_OPTION_LITTLE_ENDIAN
< $$SWITCH$$ __QUEX_OPTION_BIG_ENDIAN
> /* #define __QUEX_OPTION_BIG_ENDIAN */
< $$SWITCH$$ __QUEX_OPTION_SYSTEM_ENDIAN
> #define    __QUEX_OPTION_SYSTEM_ENDIAN
< $$SWITCH$$ QUEX_OPTION_TOKEN_POLICY_QUEUE
> /* #define QUEX_OPTION_TOKEN_POLICY_QUEUE */
< $$SWITCH$$ QUEX_OPTION_TOKEN_POLICY_SINGLE
> #define    QUEX_OPTION_TOKEN_POLICY_SINGLE
< $$SWITCH$$ QUEX_OPTION_USER_MANAGED_TOKEN_MEMORY
> /* #define QUEX_OPTION_USER_MANAGED_TOKEN_MEMORY */
< #      define QUEX_SETTING_TOKEN_QUEUE_SIZE          ((size_t)$$TOKEN_QUEUE_SIZE$$)
> #      define QUEX_SETTING_TOKEN_QUEUE_SIZE          ((size_t)64)
< #      define QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER ((size_t)$$TOKEN_QUEUE_SAFETY_BORDER$$)
> #      define QUEX_SETTING_TOKEN_QUEUE_SAFETY_BORDER ((size_t)16)
< $$SWITCH$$ QUEX_OPTION_TOKEN_REPETITION_SUPPORT
> /* #define QUEX_OPTION_TOKEN_REPETITION_SUPPORT */
< $$SWITCH$$ QUEX_OPTION_LINE_NUMBER_COUNTING         
> #define    QUEX_OPTION_LINE_NUMBER_COUNTING         
< $$SWITCH$$ QUEX_OPTION_COLUMN_NUMBER_COUNTING       
> #define    QUEX_OPTION_COLUMN_NUMBER_COUNTING       
< $$SWITCH$$ QUEX_OPTION_POST_CATEGORIZER
> /* #define QUEX_OPTION_POST_CATEGORIZER */
< $$SWITCH$$ QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
> #define    QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
< $$SWITCH$$ QUEX_OPTION_INCLUDE_STACK
> /* #define QUEX_OPTION_INCLUDE_STACK */
< #   define QUEX_SETTING_BUFFER_LIMIT_CODE  ((QUEX_TYPE_CHARACTER)$$BUFFER_LIMIT_CODE$$)
> #   define QUEX_SETTING_BUFFER_LIMIT_CODE  ((QUEX_TYPE_CHARACTER)0x0)
< #   define QUEX_SETTING_PATH_TERMINATION_CODE  ((QUEX_TYPE_CHARACTER)$$PATH_TERMINATION_CODE$$)
> #   define QUEX_SETTING_PATH_TERMINATION_CODE  ((QUEX_TYPE_CHARACTER)0x1)
< $$SWITCH$$ QUEX_OPTION_BUFFER_BASED_ANALYZIS
> /* #define QUEX_OPTION_BUFFER_BASED_ANALYZIS */
< $$SWITCH$$ QUEX_OPTION_STRING_ACCUMULATOR
> #define    QUEX_OPTION_STRING_ACCUMULATOR
< $$SWITCH$$ QUEX_OPTION_INDENTATION_TRIGGER
> /* #define QUEX_OPTION_INDENTATION_TRIGGER */
< $$SWITCH$$ __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT
< $$SWITCH$$ __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT
< $$SWITCH$$ QUEX_OPTION_CONVERTER_ICONV
< $$SWITCH$$ QUEX_OPTION_CONVERTER_ICU
> /* #define __QUEX_OPTION_ON_ENTRY_HANDLER_PRESENT */
> /* #define __QUEX_OPTION_ON_EXIT_HANDLER_PRESENT */
> /* #define QUEX_OPTION_CONVERTER_ICONV */
> /* #define QUEX_OPTION_CONVERTER_ICU */
< $$QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW$$
> /* #   define QUEX_SETTING_BUFFER_FILLERS_CONVERTER_NEW  */
< $$SWITCH$$ __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION
> /* #define __QUEX_OPTION_SUPPORT_BEGIN_OF_LINE_PRE_CONDITION */
< $$SWITCH$$ __QUEX_OPTION_CONVERTER
> /* #define __QUEX_OPTION_CONVERTER */
< $$SWITCH$$ __QUEX_OPTION_CONVERTER_HELPER
> /* #define __QUEX_OPTION_CONVERTER_HELPER */
< #   define QUEX_TYPE_CHARACTER          $$QUEX_TYPE_CHARACTER$$
< #   define QUEX_TYPE_CHARACTER_BACKUP   $$QUEX_TYPE_CHARACTER$$
> #   define QUEX_TYPE_CHARACTER          uint8_t
> #   define QUEX_TYPE_CHARACTER_BACKUP   uint8_t
< #   define QUEX_SETTING_CHARACTER_SIZE  $$QUEX_SETTING_CHARACTER_SIZE$$
> #   define QUEX_SETTING_CHARACTER_SIZE  1
< #   define QUEX_SETTING_CHARACTER_CODEC $$QUEX_SETTING_CHARACTER_CODEC$$
> #   define QUEX_SETTING_CHARACTER_CODEC unicode
< #   define QUEX_FUNCTION_PREFIX        $$LEXER_CLASS_NAME_SAFE$$_
< #   define QUEX_FUNCTION_DEF_PREFIX    $$LEXER_CLASS_NAME_SAFE$$_
> #   define QUEX_FUNCTION_PREFIX        quex_TestAnalyzer_
> #   define QUEX_FUNCTION_DEF_PREFIX    quex_TestAnalyzer_
< #   define QUEX_TYPE0_ANALYZER         struct $$LEXER_CLASS_NAME_SAFE$$_tag
< #   define QUEX_TYPE_ANALYZER          struct $$LEXER_CLASS_NAME_SAFE$$_tag
< #   define QUEX_NAME_COMPLETE_ANALYZER $$LEXER_CLASS_NAME_SAFE$$
< #   define QUEX_TYPE_DERIVED_ANALYZER  struct $$LEXER_CLASS_NAME_SAFE$$_tag
< 
< #   define QUEX_TYPE0_TOKEN            struct $$TOKEN_CLASS_NAME_SAFE$$_tag
< #   define QUEX_TYPE_TOKEN             struct $$TOKEN_CLASS_NAME_SAFE$$_tag
< #   define QUEX_NAME_COMPLETE_TOKEN    $$TOKEN_CLASS_NAME_SAFE$$
> #   define QUEX_TYPE0_ANALYZER         struct quex_TestAnalyzer_tag
> #   define QUEX_TYPE_ANALYZER          struct quex_TestAnalyzer_tag
> #   define QUEX_NAME_COMPLETE_ANALYZER quex_TestAnalyzer
> #   define QUEX_TYPE_DERIVED_ANALYZER  struct quex_TestAnalyzer_tag
> 
> #   define QUEX_TYPE0_TOKEN            struct quex_Token_tag
> #   define QUEX_TYPE_TOKEN             struct quex_Token_tag
> #   define QUEX_NAME_COMPLETE_TOKEN    quex_Token
< #   define QUEX_NAMESPACE_MAIN         $$LEXER_CLASS_NAME_SAFE$$
> #   define QUEX_NAMESPACE_MAIN         quex_TestAnalyzer
< #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   $$QUEX_LEXEME_NULL_SAFE$$
< #   define QUEX_LEXEME_NULL                    $$QUEX_LEXEME_NULL_SAFE$$
> #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   quex_LexemeNullObject
> #   define QUEX_LEXEME_NULL                    quex_LexemeNullObject
< #   define QUEX_NAME(NAME)             $$LEXER_CLASS_NAME_SAFE$$_ ## NAME
< #   define QUEX_NAME_TOKEN(NAME)       $$TOKEN_CLASS_NAME_SAFE$$_ ## NAME
> #   define QUEX_NAME(NAME)             quex_TestAnalyzer_ ## NAME
> #   define QUEX_NAME_TOKEN(NAME)       quex_Token_ ## NAME
< #   define QUEX_FUNCTION_PREFIX_BACKUP       $$LEXER_CLASS_NAME_SAFE$$_
< #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   $$LEXER_CLASS_NAME_SAFE$$_
> #   define QUEX_FUNCTION_PREFIX_BACKUP       quex_TestAnalyzer_
> #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   quex_TestAnalyzer_
< #   define QUEX_FUNCTION_PREFIX        $$NAMESPACE_MAIN$$::
> #   define QUEX_FUNCTION_PREFIX        ::quex::
< #   define QUEX_TYPE0_ANALYZER         $$LEXER_CLASS_NAME$$
< #   define QUEX_TYPE_ANALYZER          $$NAMESPACE_MAIN$$::$$LEXER_CLASS_NAME$$
< #   define QUEX_NAME_COMPLETE_ANALYZER $$NAMESPACE_MAIN$$::$$LEXER_CLASS_NAME$$
< #   define QUEX_TYPE_DERIVED_ANALYZER  $$LEXER_DERIVED_CLASS_NAME$$
< 
< #   define QUEX_TYPE0_TOKEN            $$TOKEN_CLASS$$
< #   define QUEX_TYPE_TOKEN             $$NAMESPACE_TOKEN$$::$$TOKEN_CLASS$$
< #   define QUEX_NAME_COMPLETE_TOKEN    $$NAMESPACE_TOKEN$$::$$TOKEN_CLASS$$
< 
< #   define QUEX_NAMESPACE_MAIN         $$NAMESPACE_MAIN$$
< #   define QUEX_NAMESPACE_MAIN_OPEN    $$NAMESPACE_MAIN_OPEN$$
< #   define QUEX_NAMESPACE_MAIN_CLOSE   $$NAMESPACE_MAIN_CLOSE$$
< 
< #   define QUEX_NAMESPACE_TOKEN        $$NAMESPACE_TOKEN$$
< #   define QUEX_NAMESPACE_TOKEN_OPEN   $$NAMESPACE_TOKEN_OPEN$$
< #   define QUEX_NAMESPACE_TOKEN_CLOSE  $$NAMESPACE_TOKEN_CLOSE$$
< 
< #   define QUEX_NAMESPACE_LEXEME_NULL_OPEN     $$QUEX_NAMESPACE_LEXEME_NULL_OPEN$$
< #   define QUEX_NAMESPACE_LEXEME_NULL_CLOSE    $$QUEX_NAMESPACE_LEXEME_NULL_CLOSE$$
< #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   $$QUEX_LEXEME_NULL_IN_ITS_NAMESPACE$$
< #   define QUEX_LEXEME_NULL                    $$QUEX_LEXEME_NULL$$
< 
< #   define QUEX_NAME(NAME)             $$LEXER_CLASS_NAME$$_ ## NAME
< #   define QUEX_NAME_TOKEN(NAME)       $$TOKEN_CLASS$$_ ## NAME
< #   define QUEX_MEMBER(NAME)           $$LEXER_CLASS_NAME$$::NAME                
> #   define QUEX_TYPE0_ANALYZER         TestAnalyzer
> #   define QUEX_TYPE_ANALYZER          ::quex::TestAnalyzer
> #   define QUEX_NAME_COMPLETE_ANALYZER ::quex::TestAnalyzer
> #   define QUEX_TYPE_DERIVED_ANALYZER  TestAnalyzer
> 
> #   define QUEX_TYPE0_TOKEN            Token
> #   define QUEX_TYPE_TOKEN             ::quex::Token
> #   define QUEX_NAME_COMPLETE_TOKEN    ::quex::Token
> 
> #   define QUEX_NAMESPACE_MAIN         ::quex
> #   define QUEX_NAMESPACE_MAIN_OPEN    namespace quex {\
> 
> #   define QUEX_NAMESPACE_MAIN_CLOSE   } /* Closing Namespace 'quex' */\
> 
> 
> #   define QUEX_NAMESPACE_TOKEN        ::quex
> #   define QUEX_NAMESPACE_TOKEN_OPEN   namespace quex {\
> 
> #   define QUEX_NAMESPACE_TOKEN_CLOSE  } /* Closing Namespace 'quex' */\
> 
> 
> #   define QUEX_NAMESPACE_LEXEME_NULL_OPEN     namespace quex {\
> 
> #   define QUEX_NAMESPACE_LEXEME_NULL_CLOSE    } /* Closing Namespace 'quex' */\
> 
> #   define QUEX_LEXEME_NULL_IN_ITS_NAMESPACE   LexemeNullObject
> #   define QUEX_LEXEME_NULL                    ::quex::LexemeNullObject
> 
> #   define QUEX_NAME(NAME)             TestAnalyzer_ ## NAME
> #   define QUEX_NAME_TOKEN(NAME)       Token_ ## NAME
> #   define QUEX_MEMBER(NAME)           TestAnalyzer::NAME                
< #   define QUEX_NAMESPACE_MAIN_OPEN_BACKUP   $$NAMESPACE_MAIN_OPEN$$
< #   define QUEX_NAMESPACE_MAIN_CLOSE_BACKUP  $$NAMESPACE_MAIN_CLOSE$$
> #   define QUEX_NAMESPACE_MAIN_OPEN_BACKUP   namespace quex {\
> 
> #   define QUEX_NAMESPACE_MAIN_CLOSE_BACKUP  } /* Closing Namespace 'quex' */\
> 
< #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   $$NAMESPACE_MAIN$$::
> #   define QUEX_FUNCTION_DEF_PREFIX_BACKUP   ::quex::
< #   define QUEX_TYPE_TOKEN_ID        $$TOKEN_ID_TYPE$$
> #   define QUEX_TYPE_TOKEN_ID        uint32_t
< #   define QUEX_TYPE_TOKEN_LINE_N    $$TOKEN_LINE_N_TYPE$$
> #   define QUEX_TYPE_TOKEN_LINE_N    size_t
< #   define QUEX_TYPE_TOKEN_COLUMN_N  $$TOKEN_COLUMN_N_TYPE$$
> #   define QUEX_TYPE_TOKEN_COLUMN_N  size_t
< #endif /* __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$ */
> #endif /* __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION____QUEX____TESTANALYZER */
