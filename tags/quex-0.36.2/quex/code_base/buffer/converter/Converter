/* -*- C++ -*-  vim: set syntax=cpp:
 * (C) 2007-2008 Frank-Rene Schaefer  */
#ifndef __INCLUDE_GUARD__QUEX_BUFFER_FILLER__CONVERTER__
#define __INCLUDE_GUARD__QUEX_BUFFER_FILLER__CONVERTER__

#if ! defined (__QUEX_SETTING_PLAIN_C)
namespace quex {
#endif

    typedef struct QuexConverter_tag {
        void    (*open)(struct QuexConverter_tag*, 
                        const char* FromCodingName, const char* ToCodingName);  
        /* Opens internally a conversion handle for the conversion from 'FromCodingName'
         * to 'ToCodingName'. Pass '0x0' as 'ToCodingName' in order to indicate a conversion
         * to unicode of size sizeof(QUEX_CHARACTER_TYPE). 
         *
         * It is the task of the particular implementation to provide the 'to coding'
         * which is appropriate for sizeof(QUEX_CHARACTER_TYPE), i.e. ASCII, UCS2, UCS4.
         *
         */

        bool    (*convert)(struct QuexConverter_tag*, 
                           uint8_t**             source, const uint8_t*             SourceEnd, 
                           QUEX_CHARACTER_TYPE** drain,  const QUEX_CHARACTER_TYPE* DrainEnd);
        /* Tries to convert all characters given in 'source' with the coding specified
         * earlier to _open(...). 'source' and 'drain' are passed as pointers to pointers
         * so that the pointers can be changed. This way the converter can inform the
         * user about the state of conversion from source to drain buffer.
         *
         * START:          *source              SourceEnd
         *                 |                    |
         *          [      .....................]   source buffer
         *
         *               *drain         DrainEnd
         *               |              |
         *          [....               ] drain buffer
         *
         *       At the beginning, 'source' points to the first character to be
         *       converted. 'drain' points to the place where the first converted
         *       character is to be written to.
         *  
         * END:                            *source                              
         *                                 |     
         *          [                      .....]   source buffer
         *
         *                        *drain 
         *                        |      
         *          [.............      ] drain buffer
         *
         *       After convertsion, 'source' points immediately behind the last 
         *       character that was subject to conversion. 'drain' points behind the
         *       last character that resulted from the conversion. 
         *  
         * RETURNS:  true  --> Drain buffer is filled as much as possible with converted 
         *                     characters.
         *           false --> More source bytes are needed to fill the drain buffer.     */

        void    (*on_conversion_discontinuity)(struct QuexConverter_tag*);
        /*  [OPTIONAL] can be set to '0x0'. 
         * 
         *  This function is called whenever a conversion discontinuity appears.
         *  Such cases appear only when the user navigates through the input
         *  stream (seek_character_index(...)), or with long pre-conditions when
         *  the buffer size is exceeded. 
         *
         *  For 'normal' converters this function can be set to '0x0'. If a converter
         *  has an internal 'statefulness' that is difficult to be tamed, then use
         *  this function to reset the converter. Actually, the initial reason
         *  for introducing the function pointer was the strange behavior of the 
         *  ICU Converters of IBM(R).                                                     */

        void    (*delete_self)(struct QuexConverter_tag*);
        /* Closes the conversion handle produced with open(...).      
         * Deletes the object of the derived class.                                       */
    } QuexConverter;

#if ! defined (__QUEX_SETTING_PLAIN_C)
}
#endif

#endif /* __INCLUDE_GUARD__QUEX_BUFFER_FILLER__CONVERTER__ */
