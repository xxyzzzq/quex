#ifdef __QUEX_OPTION_COUNTER
void
QUEX_NAME(TEST_MODE_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_CHARACTER* LexemeBegin, QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    QUEX_TYPE_CHARACTER            input                          = (QUEX_TYPE_CHARACTER)(0x00);
    (void)me;
    __QUEX_IF_COUNT_SHIFT_VALUES();
    /* Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)
     * => Caller does not need to check
     * BUT, if so quit immediately after 'shift values'. */
    __quex_assert(LexemeBegin <= LexemeEnd);
    if(LexemeBegin == LexemeEnd) return;
    me->buffer._input_p = LexemeBegin;
_3: /* (138 from NONE) (138 from 192) */
    input = *(me->buffer._input_p);



    __quex_debug("Init State\n");
    __quex_debug_state(138);
    if( input < 0x80 ) {
        if( input < 0x3D ) {
            switch( input ) {
                case 0x0: 
                case 0x1: 
                case 0x2: 
                case 0x3: 
                case 0x4: 
                case 0x5: 
                case 0x6: 
                case 0x7: 
                case 0x8: 
                case 0x9: goto _7;
                case 0xA: goto _12;
                case 0xB: 
                case 0xC: 
                case 0xD: 
                case 0xE: 
                case 0xF: 
                case 0x10: 
                case 0x11: 
                case 0x12: 
                case 0x13: 
                case 0x14: 
                case 0x15: 
                case 0x16: 
                case 0x17: 
                case 0x18: 
                case 0x19: 
                case 0x1A: 
                case 0x1B: 
                case 0x1C: 
                case 0x1D: 
                case 0x1E: 
                case 0x1F: 
                case 0x20: 
                case 0x21: 
                case 0x22: 
                case 0x23: 
                case 0x24: 
                case 0x25: 
                case 0x26: 
                case 0x27: 
                case 0x28: 
                case 0x29: 
                case 0x2A: 
                case 0x2B: 
                case 0x2C: 
                case 0x2D: 
                case 0x2E: 
                case 0x2F: 
                case 0x30: 
                case 0x31: 
                case 0x32: 
                case 0x33: 
                case 0x34: 
                case 0x35: 
                case 0x36: 
                case 0x37: 
                case 0x38: 
                case 0x39: 
                case 0x3A: 
                case 0x3B: goto _7;
                case 0x3C: goto _14;

            }
        } else {
            if( input == 0x3D ) {
                goto _7;
            
} else if( input == 0x3E ) {
                goto _9;
            
} else if( input == 0x3F ) {
                goto _11;
            } else {
                goto _7;
            
}
        
}
    } else {
        switch( input ) {
            case 0xC2: 
            case 0xC3: 
            case 0xC4: 
            case 0xC5: 
            case 0xC6: 
            case 0xC7: 
            case 0xC8: 
            case 0xC9: 
            case 0xCA: 
            case 0xCB: 
            case 0xCC: 
            case 0xCD: 
            case 0xCE: 
            case 0xCF: 
            case 0xD0: 
            case 0xD1: 
            case 0xD2: 
            case 0xD3: 
            case 0xD4: 
            case 0xD5: 
            case 0xD6: 
            case 0xD7: 
            case 0xD8: 
            case 0xD9: 
            case 0xDA: 
            case 0xDB: 
            case 0xDC: 
            case 0xDD: 
            case 0xDE: 
            case 0xDF: goto _13;
            case 0xE0: goto _15;
            case 0xE1: 
            case 0xE2: 
            case 0xE3: 
            case 0xE4: 
            case 0xE5: 
            case 0xE6: 
            case 0xE7: 
            case 0xE8: 
            case 0xE9: 
            case 0xEA: 
            case 0xEB: 
            case 0xEC: 
            case 0xED: 
            case 0xEE: 
            case 0xEF: goto _4;
            case 0xF0: goto _8;
            case 0xF1: goto _6;
            case 0xF2: 
            case 0xF3: goto _5;
            case 0xF4: 
            case 0xF5: 
            case 0xF6: 
            case 0xF7: goto _10;

        }
    
}

    __quex_debug_drop_out(138);
    __quex_debug("Character counting terminated.\n");
    goto _2;


    __quex_assert_no_passage();


    __quex_assert_no_passage();
_4: /* (139 from 138) (139 from 145) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _58;

_58:

    __quex_debug_state(139);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _13;
    } else {

    
}

    __quex_debug_drop_out(139);
goto _2;

    __quex_assert_no_passage();
_5: /* (140 from 143) (140 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _59;

_59:

    __quex_debug_state(140);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _16;
    } else {

    
}

    __quex_debug_drop_out(140);
goto _2;

    __quex_assert_no_passage();
_6: /* (141 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _60;

_60:

    __quex_debug_state(141);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _19;
        case 0xBF: goto _28;

    }

    __quex_debug_drop_out(141);
goto _2;

    __quex_assert_no_passage();
_7: /* (142 from 160) (142 from 138) (142 from 188) (142 from 151) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _61;

_61:

    __quex_debug_state(142);
    __quex_debug_drop_out(142);
goto _63;

    __quex_assert_no_passage();
_8: /* (143 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _64;

_64:

    __quex_debug_state(143);
    switch( input ) {
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: goto _21;
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: goto _5;
        case 0x90: 
        case 0x91: goto _19;
        case 0x92: goto _20;
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _19;

    }

    __quex_debug_drop_out(143);
goto _2;

    __quex_assert_no_passage();
_9: /* (144 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _65;

_65:

    __quex_debug_state(144);
    __quex_debug_drop_out(144);
goto _67;

    __quex_assert_no_passage();
_10: /* (145 from 138) (145 from 166) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _68;

_68:

    __quex_debug_state(145);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _4;
    } else {

    
}

    __quex_debug_drop_out(145);
goto _2;

    __quex_assert_no_passage();
_11: /* (146 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _69;

_69:

    __quex_debug_state(146);
    __quex_debug_drop_out(146);
goto _71;

    __quex_assert_no_passage();
_12: /* (148 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _72;

_72:

    __quex_debug_state(148);
    __quex_debug_drop_out(148);
goto _74;

    __quex_assert_no_passage();
_13: /* (151 from 138) (151 from 139) (151 from 153) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _75;

_75:

    __quex_debug_state(151);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _7;
    } else {

    
}

    __quex_debug_drop_out(151);
goto _2;

    __quex_assert_no_passage();
_14: /* (152 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _76;

_76:

    __quex_debug_state(152);
    __quex_debug_drop_out(152);
goto _78;

    __quex_assert_no_passage();
_15: /* (153 from 138) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _79;

_79:

    __quex_debug_state(153);
    switch( input ) {
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _13;

    }

    __quex_debug_drop_out(153);
goto _2;

    __quex_assert_no_passage();
_16: /* (158 from 140) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _80;

_80:

    __quex_debug_state(158);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _17;
    } else {

    
}

    __quex_debug_drop_out(158);
goto _2;

    __quex_assert_no_passage();
_17: /* (159 from 158) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _81;

_81:

    __quex_debug_state(159);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _18;
    } else {

    
}

    __quex_debug_drop_out(159);
goto _2;

    __quex_assert_no_passage();
_18: /* (160 from 187) (160 from 181) (160 from 182) (160 from 178) (160 from 183) (160 from 159) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _82;

_82:

    __quex_debug_state(160);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _7;
    } else {

    
}

    __quex_debug_drop_out(160);
goto _63;

    __quex_assert_no_passage();
_19: /* (161 from 141) (161 from 143) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _83;

_83:

    __quex_debug_state(161);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _22;
    } else {

    
}

    __quex_debug_drop_out(161);
goto _2;

    __quex_assert_no_passage();
_20: /* (164 from 143) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _84;

_84:

    __quex_debug_state(164);
    switch( input ) {
        case 0x80: goto _24;
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _22;

    }

    __quex_debug_drop_out(164);
goto _2;

    __quex_assert_no_passage();
_21: /* (166 from 143) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _85;

_85:

    __quex_debug_state(166);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _10;
    } else {

    
}

    __quex_debug_drop_out(166);
goto _2;

    __quex_assert_no_passage();
_22: /* (177 from 161) (177 from 164) (177 from 185) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _86;

_86:

    __quex_debug_state(177);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _23;
    } else {

    
}

    __quex_debug_drop_out(177);
goto _2;

    __quex_assert_no_passage();
_23: /* (178 from 180) (178 from 177) (178 from 186) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _87;

_87:

    __quex_debug_state(178);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _18;
    } else {

    
}

    __quex_debug_drop_out(178);
goto _63;

    __quex_assert_no_passage();
_24: /* (180 from 164) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _88;

_88:

    __quex_debug_state(180);
    switch( input ) {
        case 0x80: goto _27;
        case 0x81: goto _23;
        case 0x82: goto _26;
        case 0x83: goto _25;
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: 
        case 0xBF: goto _23;

    }

    __quex_debug_drop_out(180);
goto _2;

    __quex_assert_no_passage();
_25: /* (181 from 180) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _89;

_89:

    __quex_debug_state(181);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _18;
    } else {

    
}

    __quex_debug_drop_out(181);
goto _71;

    __quex_assert_no_passage();
_26: /* (182 from 180) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _90;

_90:

    __quex_debug_state(182);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _18;
    } else {

    
}

    __quex_debug_drop_out(182);
goto _67;

    __quex_assert_no_passage();
_27: /* (183 from 180) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _91;

_91:

    __quex_debug_state(183);
    if( input >= 0xC0 ) {

    
} else if( input >= 0x80 ) {
        goto _18;
    } else {

    
}

    __quex_debug_drop_out(183);
goto _78;

    __quex_assert_no_passage();
_28: /* (185 from 141) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _92;

_92:

    __quex_debug_state(185);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _22;
        case 0xBF: goto _29;

    }

    __quex_debug_drop_out(185);
goto _2;

    __quex_assert_no_passage();
_29: /* (186 from 185) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _93;

_93:

    __quex_debug_state(186);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _23;
        case 0xBF: goto _30;

    }

    __quex_debug_drop_out(186);
goto _2;

    __quex_assert_no_passage();
_30: /* (187 from 186) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _94;

_94:

    __quex_debug_state(187);
    switch( input ) {
        case 0x80: 
        case 0x81: 
        case 0x82: 
        case 0x83: 
        case 0x84: 
        case 0x85: 
        case 0x86: 
        case 0x87: 
        case 0x88: 
        case 0x89: 
        case 0x8A: 
        case 0x8B: 
        case 0x8C: 
        case 0x8D: 
        case 0x8E: 
        case 0x8F: 
        case 0x90: 
        case 0x91: 
        case 0x92: 
        case 0x93: 
        case 0x94: 
        case 0x95: 
        case 0x96: 
        case 0x97: 
        case 0x98: 
        case 0x99: 
        case 0x9A: 
        case 0x9B: 
        case 0x9C: 
        case 0x9D: 
        case 0x9E: 
        case 0x9F: 
        case 0xA0: 
        case 0xA1: 
        case 0xA2: 
        case 0xA3: 
        case 0xA4: 
        case 0xA5: 
        case 0xA6: 
        case 0xA7: 
        case 0xA8: 
        case 0xA9: 
        case 0xAA: 
        case 0xAB: 
        case 0xAC: 
        case 0xAD: 
        case 0xAE: 
        case 0xAF: 
        case 0xB0: 
        case 0xB1: 
        case 0xB2: 
        case 0xB3: 
        case 0xB4: 
        case 0xB5: 
        case 0xB6: 
        case 0xB7: 
        case 0xB8: 
        case 0xB9: 
        case 0xBA: 
        case 0xBB: 
        case 0xBC: 
        case 0xBD: 
        case 0xBE: goto _18;
        case 0xBF: goto _31;

    }

    __quex_debug_drop_out(187);
goto _63;

    __quex_assert_no_passage();
_31: /* (188 from 187) */
    ++(me->buffer._input_p);
    input = *(me->buffer._input_p);
    goto _95;

_95:

    __quex_debug_state(188);
    if( input >= 0xBF ) {

    
} else if( input >= 0x80 ) {
        goto _7;
    } else {

    
}

    __quex_debug_drop_out(188);
goto _63;
    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_78: __quex_debug("* TERMINAL [003C] [12000] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)0);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_63: __quex_debug("* TERMINAL [0000, 0009] [000B, 003B] [003D] [0040, 11FFF] [12001] [12004, oo] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_67: __quex_debug("* TERMINAL [003E] [12002] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)2);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_71: __quex_debug("* TERMINAL [003F] [12003] \n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)3);
if( me->buffer._input_p == LexemeEnd ) goto _2;;
goto _3;
_74: __quex_debug("* TERMINAL [000A] \n");
__QUEX_IF_COUNT_LINES_ADD((size_t)1);
__QUEX_IF_COUNT_COLUMNS_SET((size_t)1);
if( me->buffer._input_p == LexemeEnd ) goto _1;;
goto _3;
_2: __quex_debug("* TERMINAL -- Exit --\n");
goto _1;
_1:
    __quex_assert(me->buffer._input_p == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
   return;
#  undef self
}
#endif /* __QUEX_OPTION_COUNTER */

_____________________________________________________________________________
file:     './data/example.utf8';
char_size: 1;
byte_n:    1605;
column_n:  544;
line_n:    1;
## gcc -Wall -Werror -I. -ggdb ./data/check.c ./data/test.c  -D__QUEX_OPTION_COUNTER -DDEF_COUNTER_FUNCTION='QUEX_NAME(TEST_MODE_counter)'  -DDEF_FILE_NAME='"./data/example.utf8"'  -DDEF_CHARACTER_TYPE=uint8_t  -o test
