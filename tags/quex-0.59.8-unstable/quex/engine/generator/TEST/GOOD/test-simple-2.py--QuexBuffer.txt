(*) Lexical Analyser Patterns:
                "if" --> IF
              "else" --> ELSE
            "struct" --> STRUCT
               "for" --> FOR
           "typedef" --> TYPEDEF
         "typedefun" --> TYPEDEFUN
              "type" --> TYPE
               "def" --> DEF
               "fun" --> FUN
             "while" --> WHILE
            "return" --> RETURN
[_a-zA-Z][_a-zA-Z0-9]* --> IDENTIFIER
                 "{" --> BRACKET_OPEN
                 "}" --> BRACKET_CLOSE
                 "(" --> BRACKET_OPEN
                 ")" --> BRACKET_CLOSE
                 ";" --> SEMICOLON
                 "=" --> OP_ASSIGN
                "==" --> OP_COMPARISON
                 "<" --> OP_CMP_LESS
                 ">" --> OP_CMP_GREATER
                 "+" --> OP_PLUS
                 "*" --> OP_MULT
                "++" --> OP_PLUS_PLUS
{DIGIT}+("."{DIGIT}*)? --> NUMBER
            [ \t\n]+ --> WHITESPACE
## (1) code generation
## (2) compiling generated engine code and test
g++  ./tmp.cpp -I./. -I$QUEX_PATH -o ./tmp.cpp.exe -D__QUEX_OPTION_UNIT_TEST_ISOLATED_CODE_GENERATION -ggdb ##
## (3) running the test
(*) test string: 
'
struct MyType<T> {
   if( T == int ) typedef my_vars_type = string
   else           typedef my_vars_type = utf32_string
   typedefun      T
   my_vars_type   name
   my_vars_type   description
   def sin_cos(x) = sin(x) * cos(x)

   main()
      for(x = 0.12; x < 12 ; x++)
         print x * sin_cos(x)
      while( no_user_abort() ) sleep()

   fun   
'
(*) result:
         WHITESPACE  '
'
             STRUCT  'struct'
         WHITESPACE  ' '
         IDENTIFIER  'MyType'
        OP_CMP_LESS  '<'
         IDENTIFIER  'T'
     OP_CMP_GREATER  '>'
         WHITESPACE  ' '
       BRACKET_OPEN  '{'
         WHITESPACE  '
   '
                 IF  'if'
       BRACKET_OPEN  '('
         WHITESPACE  ' '
         IDENTIFIER  'T'
         WHITESPACE  ' '
      OP_COMPARISON  '=='
         WHITESPACE  ' '
         IDENTIFIER  'int'
         WHITESPACE  ' '
      BRACKET_CLOSE  ')'
         WHITESPACE  ' '
            TYPEDEF  'typedef'
         WHITESPACE  ' '
         IDENTIFIER  'my_vars_type'
         WHITESPACE  ' '
          OP_ASSIGN  '='
         WHITESPACE  ' '
         IDENTIFIER  'string'
         WHITESPACE  '
   '
               ELSE  'else'
         WHITESPACE  '           '
            TYPEDEF  'typedef'
         WHITESPACE  ' '
         IDENTIFIER  'my_vars_type'
         WHITESPACE  ' '
          OP_ASSIGN  '='
         WHITESPACE  ' '
         IDENTIFIER  'utf32_string'
         WHITESPACE  '
   '
          TYPEDEFUN  'typedefun'
         WHITESPACE  '      '
         IDENTIFIER  'T'
         WHITESPACE  '
   '
         IDENTIFIER  'my_vars_type'
         WHITESPACE  '   '
         IDENTIFIER  'name'
         WHITESPACE  '
   '
         IDENTIFIER  'my_vars_type'
         WHITESPACE  '   '
         IDENTIFIER  'description'
         WHITESPACE  '
   '
                DEF  'def'
         WHITESPACE  ' '
         IDENTIFIER  'sin_cos'
       BRACKET_OPEN  '('
         IDENTIFIER  'x'
      BRACKET_CLOSE  ')'
         WHITESPACE  ' '
          OP_ASSIGN  '='
         WHITESPACE  ' '
         IDENTIFIER  'sin'
       BRACKET_OPEN  '('
         IDENTIFIER  'x'
      BRACKET_CLOSE  ')'
         WHITESPACE  ' '
            OP_MULT  '*'
         WHITESPACE  ' '
         IDENTIFIER  'cos'
       BRACKET_OPEN  '('
         IDENTIFIER  'x'
      BRACKET_CLOSE  ')'
         WHITESPACE  '

   '
         IDENTIFIER  'main'
       BRACKET_OPEN  '('
      BRACKET_CLOSE  ')'
         WHITESPACE  '
      '
                FOR  'for'
       BRACKET_OPEN  '('
         IDENTIFIER  'x'
         WHITESPACE  ' '
          OP_ASSIGN  '='
         WHITESPACE  ' '
             NUMBER  '0.12'
          SEMICOLON  ';'
         WHITESPACE  ' '
         IDENTIFIER  'x'
         WHITESPACE  ' '
        OP_CMP_LESS  '<'
         WHITESPACE  ' '
             NUMBER  '12'
         WHITESPACE  ' '
          SEMICOLON  ';'
         WHITESPACE  ' '
         IDENTIFIER  'x'
       OP_PLUS_PLUS  '++'
      BRACKET_CLOSE  ')'
         WHITESPACE  '
         '
         IDENTIFIER  'print'
         WHITESPACE  ' '
         IDENTIFIER  'x'
         WHITESPACE  ' '
            OP_MULT  '*'
         WHITESPACE  ' '
         IDENTIFIER  'sin_cos'
       BRACKET_OPEN  '('
         IDENTIFIER  'x'
      BRACKET_CLOSE  ')'
         WHITESPACE  '
      '
              WHILE  'while'
       BRACKET_OPEN  '('
         WHITESPACE  ' '
         IDENTIFIER  'no_user_abort'
       BRACKET_OPEN  '('
      BRACKET_CLOSE  ')'
         WHITESPACE  ' '
      BRACKET_CLOSE  ')'
         WHITESPACE  ' '
         IDENTIFIER  'sleep'
       BRACKET_OPEN  '('
      BRACKET_CLOSE  ')'
         WHITESPACE  '

   '
                FUN  'fun'
         WHITESPACE  '   
'
  ''

## (4) cleaning up
