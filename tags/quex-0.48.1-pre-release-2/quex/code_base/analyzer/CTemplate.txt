/* -*- C++ -*-   vim: set syntax=cpp:
 * CONTENT: 
 *
 * (1) Includes for required standard headers.
 * (2) Definitions of options and settings for the particular application.
 * (3) #include <quex/code_base/definitions> for default settings.
 * (4) Lexical Analyzer class $$LEXER_CLASS_NAME$$ and its memento class.
 * (5) Constructor and init core of $$LEXER_CLASS_NAME$$.
 * (6) Memento pack and unpack functions.
 *
 * File content generated by Quex $$QUEX_VERSION$$.
 *
 * (C) 2005-2010 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                                      */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$
#define __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$

#ifdef      __QUEX_INCLUDE_DETECTOR__ANALYZER__MAIN
    /* In case that multiple lexical analyzers are used the same header
     * files are compiled with a different setting of the macros. The
     * undef of the include guards happens in the following file.              */
#   include <quex/code_base/include-guard-undef>
#   include <quex/code_base/analyzer/member/token-sending-undef.i>
#   undef   __QUEX_INCLUDE_GUARD__ANALYZER__CONFIGURATION__$$INCLUDE_GUARD_EXTENSION$$
#else
#   define  __QUEX_INCLUDE_DETECTOR__ANALYZER__MAIN
#endif

#include "$$LEXER_CONFIG_FILE$$"

#include <quex/code_base/definitions>

/* Token Class Declaration must preceed the user's header, so that the user
 * can refer to it at ease.                                                    */
$$TOKEN_CLASS_DECLARATION$$

/* START: User defined header content _________________________________________
 *        Must come before token class definition, since the token class 
 *        might rely on contents of the header.                                */
$$USER_DEFINED_HEADER$$
/* END: _______________________________________________________________________*/
#include "$$TOKEN_ID_DEFINITION_FILE$$"
#include "$$TOKEN_CLASS_DEFINITION_FILE$$"

#include <quex/code_base/analyzer/declarations>

/* START: User's derived class declaration (if there is one) __________________*/
$$LEXER_DERIVED_CLASS_DECL$$
/* END: _______________________________________________________________________*/

QUEX_NAMESPACE_MAIN_OPEN 
$$QUEX_MODE_ID_DEFINITIONS$$
    
typedef struct QUEX_NAME(Memento_tag) {
    QUEX_NAME(MementoBase)  base;

    /* Constructors/Destructors are necessary to be called in order to 
     * trigger the constructor/destructor calls of the included user
     * defined members.                                                 */
    QUEX_NAME(Memento_tag)() {}
    ~QUEX_NAME(Memento_tag)() {}

/* START: User's memento extentions ___________________________________________*/
$$MEMENTO_EXTENSIONS$$
/* END: _______________________________________________________________________*/
} QUEX_NAME(Memento);

$$MODE_SPECIFIC_ANALYSER_FUNCTIONS$$
QUEX_NAMESPACE_MAIN_CLOSE 

#include <quex/code_base/temporary_macros_on>

QUEX_NAMESPACE_MAIN_OPEN 
class QUEX_TYPE_ANALYZER {

#include <quex/code_base/analyzer/EngineCore>

$$MODE_OBJECTS$$

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)this)
/* START: User's class body extensions _____________________________________________*/
$$CLASS_BODY_EXTENSION$$
/* END: ____________________________________________________________________________*/
#undef  self

};

QUEX_NAMESPACE_MAIN_CLOSE
#include <quex/code_base/temporary_macros_off>

#include <quex/code_base/analyzer/member/buffer-access>
#include <quex/code_base/analyzer/member/misc>
#include <quex/code_base/analyzer/member/include-stack>
#include <quex/code_base/analyzer/member/mode-handling>
#include <quex/code_base/analyzer/member/token-receiving>
#include <quex/code_base/analyzer/member/token-sending>

$$CLASS_FUNCTIONS$$

#include    <quex/code_base/analyzer/member/token-sending.i>
#include    <quex/code_base/analyzer/member/token-receiving.i>
#include    <quex/code_base/analyzer/member/mode-handling.i>
#include    <quex/code_base/analyzer/member/buffer-access.i>
#include    <quex/code_base/analyzer/member/misc.i>
#include    <quex/code_base/analyzer/member/constructor.i>

#include    <quex/code_base/analyzer/counter/Base.i>
#include    <quex/code_base/analyzer/AnalyzerData.i>
#include    <quex/code_base/MemoryManager.i>
#include    <quex/code_base/buffer/converter/BufferFiller_Converter.i>
#ifdef      QUEX_OPTION_INCLUDE_STACK
#   include <quex/code_base/analyzer/member/include-stack.i>
#endif
#ifdef      QUEX_OPTION_STRING_ACCUMULATOR
#   include <quex/code_base/analyzer/Accumulator.i>
#endif

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__GENERATED__$$INCLUDE_GUARD_EXTENSION$$ */
