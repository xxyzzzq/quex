In many cases the behavior of lexical analysers can be 
described effectively by modes for lexical analysis. A standard example is
format strings. In format strings, there is no need for the lexical
patterns that are necessary when parsing an algorithm. They are actually
better turned off. Thus, a mechanism is needed that is able to control the
activation and deactivation of groups of patterns to be matched.

A lexical analyser mode is a state of the lexical analyser where only a
particular set of patterns is actively waiting to be matched.  A
lexical analyser needs to be in exactly one mode at a particular point in
time. Thus, a lexical analyser mode corresponds to the way that the
input stream is currently transformed into signals, i.e. tokens. To handle
the detection and influence of mode transitions, Quex provides
event handling mechanisms as described in the following sections.

A potential disadvantage of modes is _confusion_--when used with traditional lexical
analyser generators. In flex, for example, the end-user does not see more than a token
stream. He has no insight into the current lexical analyser mode. He cannot sense
or control the mode transitions that are currently being made. The mode transitions
are hidden somewhere in the pattern match actions.  GNU Flex's _start
conditions_ are similar to modes, but the only way two modes, A and B, can
be related in flex is via 'inclusion', i.e. by letting a pattern be active
in A and B. There is no convienient mechanism to say: 'let B override all
patterns of A'.  This is where the mode inheritance relationships of Quex provide
clear, convenient advantages as described in the section after next.


