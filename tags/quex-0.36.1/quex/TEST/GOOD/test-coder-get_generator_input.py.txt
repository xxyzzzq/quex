/*
 [_a-zA-Z]+ TEST  0 00005
 [ \t\n]+ TEST  0 00011
*/

self.pattern           = '[_a-zA-Z]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      self.action            = 'std::cout << "IDENTIFIER" << std::endl;\n'
self.inheritance_level = 0
self.pattern_index     = 5L

self.pattern           = '[ \\t\\n]+'
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      self.action            = 'std::cout << "WHITESPACE" << std::endl;\n'
self.inheritance_level = 0
self.pattern_index     = 11L

self.pattern           = ''
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['A', 'Z'], '_', ['a', 'z'] ==> 00001
            <no epsilon>
      self.action            = '{\nself.counter.__shift_end_values_to_start_values();\nself.counter.count_NoNewline(LexemeL);\nstd::cout << "IDENTIFIER" << std::endl;\n\n}'
self.inheritance_level = None
self.pattern_index     = 5L

self.pattern           = ''
self.pattern_state_machine = 
init-state = 0L
      00000() <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      00001(A, S) <~ 
            == ['\t', '\n'], ' ' ==> 00001
            <no epsilon>
      self.action            = '{\nself.counter.__shift_end_values_to_start_values();\nself.counter.count(Lexeme, LexemeEnd);\nstd::cout << "WHITESPACE" << std::endl;\n\n}'
self.inheritance_level = None
self.pattern_index     = 11L

