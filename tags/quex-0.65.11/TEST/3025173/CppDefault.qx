token_type {
   header {
       #include <iostream>
       #include <string>

       #include <quex/code_base/definitions>
       #include <quex/code_base/asserts>
       #include <quex/code_base/converter_helper/unicode>
       #include <quex/code_base/compatibility/stdint.h>

       /* Different codecs may have different converters, the name of the converter
        * is to be defined in the configuration file using the. All converters 
        * follow the function signature below.                                       */
       QUEX_NAMESPACE_MAIN_OPEN
       QUEX_INLINE uint8_t*
       QUEX_CONVERTER_OF_TEXT_TO_UTF8(const QUEX_TYPE_LEXATOM*  Source, 
                                      size_t                      SourceSize, 
                                      uint8_t*                    Drain, 
                                      size_t                      DrainSize);
       QUEX_NAMESPACE_MAIN_CLOSE
   }
   standard {
        id            : uint32_t;
        line_number   : size_t;
        column_number : size_t;
   }
   distinct {
       text   :  std::basic_string<QUEX_TYPE_LEXATOM>;
       number :  size_t;
   }

   inheritable;

   copy {
        self._id    = Other._id;
        self.text   = Other.text;
        self.number = Other.number;
    #   ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
    #       ifdef QUEX_OPTION_LINE_NUMBER_COUNTING
            self._line_n = Other._line_n;
    #       endif
    #       ifdef  QUEX_OPTION_COLUMN_NUMBER_COUNTING
            self._column_n = Other._column_n;
    #       endif
    #   endif
   }

   body {
        typedef std::basic_string<QUEX_TYPE_LEXATOM> __string;

        operator 
        const std::string() const
        {
            std::string             tmp;
            std::string::size_type  pos  = 0;

            tmp = map_id_to_name(self._id);

            tmp += " '" + utf8_text() + "' ";

            while( (pos = tmp.find("\n") ) != __string::npos )
                tmp.replace(pos, 1, std::string("\\n"));
            while( (pos = tmp.find("\t") ) != __string::npos ) 
                tmp.replace(pos, 1, std::string("\\t"));

            return tmp;
        }
    
        const std::string 
        utf8_text() const
        {
            uint8_t                    utf8_buffer[QUEX_SETTING_OUTPUT_TEMPORARY_UTF8_STRING_BUFFER_SIZE];
            std::string                tmp;
            QUEX_TYPE_TOKEN::__string  tmp2 = self.text;

            uint8_t* end = QUEX_CONVERTER_OF_TEXT_TO_UTF8((QUEX_TYPE_LEXATOM*)tmp2.c_str(),
                                                          tmp2.length(),
                                                          utf8_buffer, 
                                                          QUEX_SETTING_OUTPUT_TEMPORARY_UTF8_STRING_BUFFER_SIZE);
            *end = '\0'; /* terminating zero */

            return std::string((char*)utf8_buffer);
        }
   }

   take_text {
#       if 0
        {
            /* Hint for debug: To check take_text change "#if 0" to "#if 1". */
            QUEX_TYPE_LEXATOM* it = 0x0;
            printf("previous:  '");
            for(it = (QUEX_TYPE_LEXATOM*)self.text.c_str(); *it ; ++it) printf("%04X.", (int)*it);
            printf("'\n");
            printf("take_text: '");
            for(it = (QUEX_TYPE_LEXATOM*)Begin; it != End; ++it) printf("%04X.", (int)*it);
            printf("'\n");
        }
#       endif

        /* It cannot be assumed that the lexeme is zero terminated. */
        self.text.assign(Begin, End-Begin);

#       if 0
        {
            /* Hint for debug: To check take_text change "#if 0" to "#if 1". */
            QUEX_TYPE_LEXATOM* it = 0x0;
            printf("after:     '");
            for(it = (QUEX_TYPE_LEXATOM*)self.text.c_str(); *it ; ++it) printf("%04X.", (int)*it);
            printf("'\n");
        }
#       endif

        /* This token copied the text from the chunk into the string, 
         * so we do not claim owneship over it.                       */
        return false;      
   }

   repetition_set {
       self.number = N;
   }

   repetition_get {
       return self.number;
   }

   footer {
        inline std::ostream&
        operator<<(std::ostream& ostr, const QUEX_TYPE_TOKEN& Tok)
        { ostr << std::string(Tok); return ostr; }
   }
}

