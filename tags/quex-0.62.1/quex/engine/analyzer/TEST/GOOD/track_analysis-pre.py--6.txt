init-state = 0L
00000 (1, 2), (26, 56), (3, 6), (13, 27)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (1, 3, A), (13, 28)
     == 'b' ==> 00002
    
00002 (13, 29)
     == 'c' ==> 00003
    
00003 (13, 30, A, pre=16)
    
00004 (3, 7, A), (26, 57)
     == 'b' ==> 00005
    
00005 (26, 58)
     == 'c' ==> 00006
    
00006 (26, 59, A, pre=29)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern1;


State 2:
  .entry:
    .from 1:
  .drop_out:
    pos -= 1;  goto Pattern1;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_16:  goto Pattern13;
    pos -= 2;  goto Pattern1;


State 4:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern3;


State 5:
  .entry:
    .from 4:
  .drop_out:
    pos -= 1;  goto Pattern3;


State 6:
  .entry:
    .from 5:
  .drop_out:
    if PreContext_29:  goto Pattern26;
    pos -= 2;  goto Pattern3;


State 0:
        [FAILURE]: NONE/set([0L])

State 1:
        [      1]: NONE/set([1L])

State 2:
        [      1]: NONE/set([1L])

State 3:
        [      1]: NONE/set([1L])
        [     13]: 16/set([3L])

State 4:
        [      3]: NONE/set([4L])

State 5:
        [      3]: NONE/set([4L])

State 6:
        [      3]: NONE/set([4L])
        [     26]: 29/set([6L])

