init-state = 0L
00000 (1), (2), (3)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (1, A, pre=1), (3)
     == 'c' ==> 00002
    
00002 (3)
     == 'd' ==> 00003
    
00003 (3, A, pre=3)
    
00004 (2, A, pre=2), (3)
     == 'c' ==> 00002
    

State 0:
  .entry:
    .from NONE: last_acceptance = Failure


.drop_out:
pos = lexeme_start_p + 1;  goto Failure;

State 1:
  .entry:
    .from 0: if PreContext_1:  last_acceptance = Pattern1


.drop_out:
if PreContext_1: goto Pattern1;
pos = lexeme_start_p + 1;  goto Failure;

State 2:
  .entry:
    .from 1: 
    .from 4: 


.drop_out:
on last_acceptance:
case Failure: pos = lexeme_start_p  + 1;  goto Failure;


case 1: pos -= 1;  goto Pattern1;
  case 2: pos -= 1;  goto Pattern2;
    State 3:


.entry:
.from 2: if      PreContext_3: last_acceptance = Pattern3
.drop_out:
on last_acceptance:


case Failure: pos = lexeme_start_p + 1;  goto Failure;
  case 1: pos -= 2;  goto Pattern1;
    case 2: pos -=  2; goto Pattern2;


case 3: goto Pattern3;
State 4:
.entry:

.from 0: if      PreContext_2: last_acceptance = Pattern2
        .drop_out:

if PreContext_2:  goto Pattern2;
        pos = lexeme_start_p + 1;  goto Failure;
        State      0:

[MATCH_FAILURE]: NONE/set([0L])
        State 1:
        [MATCH_FAILURE]:      NONE/set([0L])
        [      1]: 1/set([1L])

State 2:
        [MATCH_FAILURE]: NONE/set([0L])
        [      1]: 1/set([1L])
        [      2]: 2/set([4L])
        State      3:

[MATCH_FAILURE]: NONE/set([0L])
        [ 1]: 1/set([1L])
        [      2]: 2/set([4L])

[      3]: 3/set([3L])
State 4:
[MATCH_FAILURE]: NONE/set([0L])
[      2]: 2/set([4L])
