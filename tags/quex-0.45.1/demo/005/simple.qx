// -*- C++ -*-

header {
extern QUEX_TYPE_CHARACTER  EmptyLexeme;
void    print(quex::tiny_lexer& qlex, quex::Token& Token, bool TextF = false);
void    print(quex::tiny_lexer& qlex, const char* Str1, const char* Str2=0x0, const char* Str3=0x0);

}

body {
    size_t      letter_count;
    size_t      include_depth;  /* Track the include depth for fun */
}

init {
    letter_count  = 0;
    include_depth = 0;
}

memento {
    size_t   my_letter_count_store;
    FILE*    included_file_handle;
}

memento_pack {
    *input_handle = fopen((const char*)(InputName), "r");
    if( *input_handle == NULL ) {
        std::cout << "file not found\n";
        return 0;
    }
    memento->my_letter_count_store = self.letter_count;
    self.letter_count = 0;
    self.include_depth += 1;
    /* Store the file handle, so that it can be closed later */
    memento->included_file_handle = *input_handle;
}

memento_unpack {
    self.letter_count = memento->my_letter_count_store;
    self.include_depth -= 1;
    /* Close the file handle */
    fclose(memento->included_file_handle);
}

token {
   INCLUDE
   IDENTIFIER
   BRACKET_OPEN
   BRACKET_CLOSE
   NUMBER
}

start = MAIN;

mode MAIN
{
    <<EOF>> {
	    self.send(QUEX_TKN_TERMINATION, LexemeNull);
        for(size_t i=0; i<self.include_depth; ++i) std::cout << "    ";
        std::cout << "Per File Letter Count = " << self.letter_count << std::endl;
        return;
    }

    "("         => QUEX_TKN_BRACKET_OPEN(LexemeNull);
    ")"         => QUEX_TKN_BRACKET_CLOSE(LexemeNull);
    //
    "include"   { 
        self.send(QUEX_TKN_INCLUDE, LexemeNull); 
        self.letter_count += strlen((char*)Lexeme); 
        self.enter_mode(FIND_INCLUDE_NAME);
        return;
    }
    //
    ([_a-zA-Z]|("/"|"."|"'"))+  { self.send(QUEX_TKN_IDENTIFIER, Lexeme); self.letter_count += strlen((char*)Lexeme); }
    [ \t\r\n]+                  { }
}

mode FIND_INCLUDE_NAME {
    ([_a-zA-Z]|("/"|"."|"'"))+  { 
        self.send(QUEX_TKN_IDENTIFIER, Lexeme); 
        self.letter_count += strlen((char*)Lexeme); 
        self.enter_mode(MAIN);
        /* IMPORTANT -- see documentation */
        return;
    }
    [ \t\r\n]+                  { }
}


