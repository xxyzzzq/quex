// -*- C++ -*- vim: set syntax=cpp:
start = PROGRAM

define {
    // Pattern definitions for example application
    P_WHITESPACE          [ \t\n]+
    P_IDENTIFIER          [_a-zA-Z][_a-zA-Z0-9]*
    P_NUMBER              [0-9]+
    //
    // String: 
    //    Quote " followe by either \" or something different from " and then a final "
    P_STRING              "\""(\\"\""|[^"])*"\""
    P_QUOTED_CHAR_1       ("'\\''")|("'"[^']?"'")
    P_QUOTED_CHAR_2       "'\\"[0-9abcfnrtv\\]"'"
    P_QUOTED_CHAR         ({P_QUOTED_CHAR_1}|{P_QUOTED_CHAR_2})
    P_INCLUDE_FILE1       "<"[^>]+">"
    P_INCLUDE_FILE2       "\""[^"]+"\""
}

token {
    AMPERSANT
    AND
    ASSIGN_DIV
    ASSIGN_MINUS
    ASSIGN_MULT
    ASSIGN_PLUS
    BACKLASHED_NEWLINE
    BRACKET_C
    BRACKET_C
    BRACKET_O
    BRACKET_O
    BREAK
    CATCH
    CLASS
    COLON
    COMMA
    COMMENT
    CONST
    CONTINUE
    CORNER_BRACKET_C
    CORNER_BRACKET_O
    CURLY_BRACKET_C
    CURLY_BRACKET_O
    DIV
    DO
    DOT
    DOUBLE_COLON
    DOUBLE_HASH
    ELSE
    EQ
    EXCLUSIVE_OR
    FOR
    GREATER
    GR_EQ
    HASH
    IDENTIFIER
    IF
    LESS
    LE_EQ
    LOGICAL_OR
    MINUS
    MODULO
    MULT
    NOT
    NOT_EQ
    NUMBER
    OP_ASSIGNMENT
    OR
    PLUS
    PP_DEFINE
    PP_DEFINED
    PP_ELSE
    PP_ENDIF
    PP_ERROR
    PP_ELIF
    PP_IF
    PP_IFDEF
    PP_IFNDEF
    PP_INCLUDE
    PP_PRAGMA
    QUESTION_MARK
    QUOTE
    QUOTED_CHAR
    SEMICOLON
    STRING
    STRUCT
    SWITCH
    TILDE
    TYPE_CHAR
    TYPE_DOUBLE
    TYPE_FLOAT
    TYPE_INT
    TYPE_LONG
    TYPE_UNSIGNED
    WHILE
}

mode PROGRAM :
{
    <<EOF>>       => TKN_TERMINATION;

    "#"[ \t]*"include"[ \t]*{P_INCLUDE_FILE2} => TKN_PP_INCLUDE;
    "#"[ \t]*"include"[ \t]*{P_INCLUDE_FILE1} => TKN_PP_INCLUDE;
    "#"[ \t]*"define"  => TKN_PP_DEFINE;
    "#"[ \t]*"if"      => TKN_PP_IF;
    "#"[ \t]*"elif"    => TKN_PP_ELIF;
    "#"[ \t]*"ifdef"   => TKN_PP_IFDEF;
    "#"[ \t]*"ifndef"  => TKN_PP_IFNDEF;
    "#"[ \t]*"endif"   => TKN_PP_ENDIF;
    "#"[ \t]*"else"    => TKN_PP_ELSE;
    "#"[ \t]*"pragma"  => TKN_PP_PRAGMA;
    "#"[ \t]*"error"   => TKN_PP_ERROR;
    defined            => TKN_PP_DEFINED;
    "\\\n"             => TKN_BACKLASHED_NEWLINE;

    unsigned  => TKN_TYPE_UNSIGNED;
    int       => TKN_TYPE_INT;
    long      => TKN_TYPE_LONG;
    float     => TKN_TYPE_FLOAT;
    double    => TKN_TYPE_DOUBLE;
    char      => TKN_TYPE_CHAR;

    "#"           => TKN_HASH;
    "##"          => TKN_DOUBLE_HASH;
    "?"           => TKN_QUESTION_MARK;
    "~"           => TKN_TILDE;
    "("           => TKN_BRACKET_O;
    ")"           => TKN_BRACKET_C;
    "["           => TKN_CORNER_BRACKET_O;
    "]"           => TKN_CORNER_BRACKET_C;
    "{"           => TKN_CURLY_BRACKET_O;
    "}"           => TKN_CURLY_BRACKET_C;
    "="           => TKN_OP_ASSIGNMENT;
    "+"           => TKN_PLUS;
    "-"           => TKN_MINUS;
    "*"           => TKN_MULT;
    "/"           => TKN_DIV;
    "%"           => TKN_MODULO;
    "+="          => TKN_ASSIGN_PLUS;
    "-="          => TKN_ASSIGN_MINUS;
    "*="          => TKN_ASSIGN_MULT;
    "/="          => TKN_ASSIGN_DIV;
    "=="          => TKN_EQ;
    "!="          => TKN_NOT_EQ;
    ">"           => TKN_GREATER;
    ">="          => TKN_GR_EQ;
    "<"           => TKN_LESS;
    "<="          => TKN_LE_EQ;
    "!"           => TKN_NOT;
    "|"           => TKN_LOGICAL_OR;
    "^"           => TKN_EXCLUSIVE_OR;
    "||"          => TKN_OR;
    "&"           => TKN_AMPERSANT;
    "&&"          => TKN_AND;
    ":"           => TKN_COLON;
    struct        => TKN_STRUCT;
    const         => TKN_CONST;
    if            => TKN_IF;
    else          => TKN_ELSE;
    switch        => TKN_SWITCH;
    for           => TKN_FOR;
    do            => TKN_DO;
    while         => TKN_WHILE;
    break         => TKN_BREAK;
    continue      => TKN_CONTINUE;
    ";"           => TKN_SEMICOLON;
    "."           => TKN_DOT;
    ","           => TKN_COMMA;

    {P_IDENTIFIER}  => TKN_IDENTIFIER;
    {P_NUMBER}      => TKN_NUMBER;
    {P_STRING}      => TKN_STRING;
    {P_QUOTED_CHAR} => TKN_QUOTED_CHAR;

    {P_WHITESPACE}            { }
    "/*"([^*]|("*"[^/]))*"*/" { } // => TKN_COMMENT;
    "//"[^\n]*"\n"            { } // => TKN_COMMENT;
}

