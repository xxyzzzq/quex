init-state = 0L
00000 (1), (2), (3)
     == 'a' ==> 00001
    
00001 (1, S), (2), (3)
     == 'b' ==> 00002
    
00002 (1), (2), (3)
     == 'c' ==> 00003
    
00003 (1, A, R, pre=1), (2, A, pre=2), (3)
     == 'd' ==> 00004
    
00004 (3)
     == 'e' ==> 00005
    
00005 (3)
     == 'f' ==> 00006
    
00006 (3, A)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_1: pos -= 2;  goto Pattern1;
    else if PreContext_2:  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .from 3:
  .drop_out:
    if PreContext_1: pos -= 3;  goto Pattern1;
    else if PreContext_2: pos -= 1;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .from 4:
  .drop_out:
    if PreContext_1: pos -= 4;  goto Pattern1;
    else if PreContext_2: pos -= 2;  goto Pattern2;
    pos = lexeme_start_p + 1;  goto Failure;


State 6:
  .entry:
    .from 5:
  .drop_out:
     goto Pattern3;


