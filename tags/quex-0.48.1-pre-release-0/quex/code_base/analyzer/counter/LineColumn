/* -*- C++ -*-   vim: set syntax=cpp:
 * (C) Frank-Rene Schaefer                               */
#ifndef __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN
#define __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN

#if ! defined(__QUEX_SETTING_PLAIN_C)
#include <cstddef> 
#else
#include <stddef.h>
#endif
#include <quex/code_base/definitions>
#include <quex/code_base/analyzer/counter/Base>

QUEX_NAMESPACE_MAIN_OPEN

struct QUEX_NAME(AnalyzerData_tag);

typedef struct {
    __CounterBase  base;
} QUEX_NAME(CounterLineColumn);

QUEX_INLINE void  CounterLineColumn_construct(QUEX_NAME(CounterLineColumn)*        me, 
                                              struct QUEX_NAME(AnalyzerData_tag)*  lexer);
QUEX_INLINE void  QUEX_NAME(CounterLineColumn_copy_construct)(QUEX_NAME(CounterLineColumn)*  me, 
                                                   const QUEX_NAME(CounterLineColumn)*       That);
QUEX_INLINE void  QUEX_NAME(CounterLineColumn_reset)(QUEX_NAME(CounterLineColumn)* me);

QUEX_INLINE void  QUEX_NAME(CounterLineColumn_count)(QUEX_NAME(CounterLineColumn)* me, 
                                                     QUEX_TYPE_CHARACTER*          Lexeme, 
                                                     QUEX_TYPE_CHARACTER*          LexemeEnd);
QUEX_INLINE void  QUEX_NAME(CounterLineColumn_count_NoNewline)(QUEX_NAME(CounterLineColumn)* me, 
                                                               const ptrdiff_t               LexemeLength);
QUEX_INLINE void  QUEX_NAME(CounterLineColumn_count_FixNewlineN)(QUEX_NAME(CounterLineColumn)*   me,
                                                      QUEX_TYPE_CHARACTER* Lexeme,
                                                      QUEX_TYPE_CHARACTER* LexemeEnd,
                                                      const int            LineNIncrement);

QUEX_INLINE QUEX_TYPE_CHARACTER*
QUEX_NAME(__CounterLineColumn_count_chars_to_newline_backwards)(QUEX_NAME(CounterLineColumn)* me, 
                                                    QUEX_TYPE_CHARACTER* Begin,
                                                    QUEX_TYPE_CHARACTER* End,
                                                    const ptrdiff_t      LexemeLength,
                                                    const bool           LicenseToIncrementLineCountF /*=false*/);

QUEX_INLINE void  QUEX_NAME(CounterLineColumn_print_this)(QUEX_NAME(CounterLineColumn)* me);


QUEX_NAMESPACE_MAIN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__ANALYZER__COUNTER__LINE_COLUMN */
