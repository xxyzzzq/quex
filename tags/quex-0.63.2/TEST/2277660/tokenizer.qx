start = ONE_AND_ONLY;

define {
    P_XML       <\/?[A-Za-z!][^>]*>
    P_SPACE	[ \t]+
    P_EOS	[ \t\n\r\f]*[\n]+
    P_DIGIT	[0-9]
    P_DATE      {P_DIGIT}{1,2}[\-/]{P_DIGIT}{1,2}[\-/]{P_DIGIT}{2,4}
    P_QUOTES    ['`]
    P_LDOTS     "."{3,5}|". "{2,4}"."
    P_ATS       @+
    P_UNDS      _+
    P_ASTS      [*]+
    P_HASHES    #+
    P_FNMARKS   {P_ATS}|{P_HASHES}|{P_UNDS}

    // \G{Ll}    is the set of characters with the general category property 'Lowercase Letter'
    P_LETTER	    [: intersection(union(\G{Ll}, \G{Lu}, \G{Lt}, \G{Lm}, \G{Lo}), [\X0-\XFFFF]) :]
    // Include connectors like _
    P_WLETTER	    [: intersection(union(\G{Ll}, \G{Lu}, \G{Lt}, \G{Lm}, \G{Lo}, \G{Pc}), [\X0-\XFFFF]) :]
    P_PUNCT	        [: intersection(union(\G{Pe}, \G{Pi}, \G{Pf}, \G{Po}, \G{Ps}), [\X0-\XFFFF]) :]
    P_APOS	        ['\x27]|\X2019
    P_WORD	        {P_LETTER}+("."{P_LETTER})*{P_APOS}?
    P_WORDEND	    {P_SPACE}|{P_PUNCT}
    P_NUMBER	    [\-+]?{P_DIGIT}+([.:,]{P_DIGIT}+)*
    P_NUMBERS	    {P_NUMBER}{P_APOS}
    // Should be this: but quex matches also commas:
    //P_EXPRESSION  ([A-Za-z_]*([0-9\-+%=|\/\\])+[A-Za-z_]*)+
    P_EXPRESSION    ({P_WLETTER}+([0-9\-+%=|\/\\])+{P_WLETTER}*)+
    P_CURRENCY	    [: \G{Sc} :]
    P_MONEY	        {P_NUMBER}{P_CURRENCY}
    P_PHONE         "("[0-9]{3}")"" "?[0-9]{3}[\- ][0-9]{4}
    P_THING         [:alnum:]+
    P_URL           (https?|ftp|gopher|telnet|file):("//"|"\\\\")[A-Za-z0-9:#@%\/;$()~_?\+-=\\.&]*
}

token {
    ASTS;
    ATS;
    DATE;
    EOS;
    EXPRESSION;
    FNMARKS;
    LDOTS;
    MONEY;
    NONE;
    NUMBER;
    PUNCT;
    THING;
    WORD;
    URL;
    XML;
}

mode ONE_AND_ONLY
{
    // Order is relevant
    <<EOF>>     => QUEX_TKN_TERMINATION;

    {P_EOS}	   => QUEX_TKN_EOS(Lexeme);
    [ \t\r]+  { }
    &nbsp;      { }
    {P_LDOTS}      => QUEX_TKN_LDOTS(Lexeme);
    {P_FNMARKS}    => QUEX_TKN_FNMARKS(Lexeme);
    {P_ASTS}       => QUEX_TKN_ASTS(Lexeme);

    {P_URL}        => QUEX_TKN_URL(Lexeme);
    {P_DATE}       => QUEX_TKN_DATE(Lexeme);
    {P_MONEY}      => QUEX_TKN_MONEY(Lexeme);
    {P_NUMBER}     => QUEX_TKN_NUMBER(Lexeme);
    {P_PUNCT}      => QUEX_TKN_PUNCT(Lexeme);
    {P_WORD}       => QUEX_TKN_WORD(Lexeme);
    {P_WORD}"."/{P_WORDEND}       => QUEX_TKN_WORD(Lexeme);
    {P_THING}      => QUEX_TKN_THING(Lexeme);
    {P_EXPRESSION} => QUEX_TKN_EXPRESSION(Lexeme); // quex loops
    {P_XML}        => QUEX_TKN_XML(Lexeme);
    .		       => QUEX_TKN_NONE(Lexeme);
}
