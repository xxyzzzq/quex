static void
TEST_MODE_character_counter(QUEX_TYPE_ANALYZER* me, const QUEX_TYPE_CHARACTER* LexemeBegin, const QUEX_TYPE_CHARACTER* LexemeEnd)
{
#   define self (*me)
    const QUEX_TYPE_CHARACTER* iterator = (void*)0;

    for(iterator=LexemeBegin; iterator < LexemeEnd; ++iterator) {
        if( (*iterator) < 0x3D ) {
            switch( (*iterator) ) {
                case 0x0: 
                case 0x1: 
                case 0x2: 
                case 0x3: 
                case 0x4: 
                case 0x5: 
                case 0x6: 
                case 0x7: 
                case 0x8: self.counter._column_number_at_end += 1;
                break;
                case 0x9: self.counter._column_number_at_end &= ~ ((size_t)0x3);
                self.counter._column_number_at_end += 4;                break;
                case 0xA: 
                case 0xB: 
                case 0xC: 
                case 0xD: 
                case 0xE: 
                case 0xF: 
                case 0x10: 
                case 0x11: 
                case 0x12: 
                case 0x13: 
                case 0x14: 
                case 0x15: 
                case 0x16: 
                case 0x17: 
                case 0x18: 
                case 0x19: 
                case 0x1A: 
                case 0x1B: 
                case 0x1C: 
                case 0x1D: 
                case 0x1E: 
                case 0x1F: 
                case 0x20: 
                case 0x21: 
                case 0x22: 
                case 0x23: 
                case 0x24: 
                case 0x25: 
                case 0x26: 
                case 0x27: 
                case 0x28: 
                case 0x29: 
                case 0x2A: 
                case 0x2B: 
                case 0x2C: 
                case 0x2D: 
                case 0x2E: 
                case 0x2F: 
                case 0x30: 
                case 0x31: 
                case 0x32: 
                case 0x33: 
                case 0x34: 
                case 0x35: 
                case 0x36: 
                case 0x37: 
                case 0x38: 
                case 0x39: 
                case 0x3A: 
                case 0x3B: self.counter._column_number_at_end += 1;
                break;
                case 0x3C: self.counter._column_number_at_end = 1;
                break;

            }
        } else {
            if( (*iterator) == 0x3D ) {
                self.counter._line_number_at_end   += 1;
                self.counter._column_number_at_end = 1;

            } else if( (*iterator) == 0x3E ) {
                self.counter._line_number_at_end   += 2;
                self.counter._column_number_at_end = 1;

            } else if( (*iterator) == 0x3F ) {
                self.counter._line_number_at_end   += 3;
                self.counter._column_number_at_end = 1;

            } else if( (*iterator) < 0x80 ) {
                self.counter._column_number_at_end += 1;

            } else {
                QUEX_ERROR_EXIT("Unexpected character for codec 'cp737'.\n"
                                "May be, codec transformation file from unicode contains errors.");
            }
        }
    }
    __quex_assert(iterator == End); /* Otherwise, lexeme violates codec character boundaries. */
#   undef self
}

