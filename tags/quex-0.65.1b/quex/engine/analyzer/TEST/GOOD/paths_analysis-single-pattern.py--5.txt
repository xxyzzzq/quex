init-state = 0L
00000 (1)
     == 'a' ==> 00001
     == 'b' ==> 00004
    
00001 (1, S)
     == 'a' ==> 00001
     == 'd' ==> 00002
    
00002 (1)
     == 'd' ==> 00002
     == 'f' ==> 00003
    
00003 (1, A, R, pre=1)
    
00004 (1)
     == 'c' ==> 00005
    
00005 (1, S)
     == 'd' ==> 00002
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
    .from 1:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 2:
  .entry:
    .from 1: if 'PreContext_1': position[PostContext_1]  = input_p;
    .from 2:
    .from 5: if 'PreContext_1': position[PostContext_1]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_1: pos = position[PostContext_1] ; goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


State 4:
  .entry:
    .from 0:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 5:
  .entry:
    .from 4:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;



--- Optimized States ---

State 2:
  .entry:
    .from 1: if 'PreContext_1': position[PostContext_0]  = input_p;
    .from 2:
    .from 5: if 'PreContext_1': position[PostContext_0]  = input_p;
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_1: pos = position[PostContext_0] ; goto Pattern1;
    pos = lexeme_start_p + 1;  goto Failure;


