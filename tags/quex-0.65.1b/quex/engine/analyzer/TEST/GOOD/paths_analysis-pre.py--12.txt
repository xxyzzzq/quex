init-state = 0L
00000 (1), (2), (3), (4), (5), (6), (7), (8), (9)
     == 'a' ==> 00001
    
00001 (1), (2), (3), (4), (5), (6), (7, A), (8), (9)
     == 'b' ==> 00002
    
00002 (1), (2), (3), (4), (5), (6), (8), (9)
     == 'c' ==> 00003
    
00003 (1, A, pre=1), (2), (3, A, pre=3), (4), (5, A, pre=5), (6), (8, A), (9)
     == 'd' ==> 00004
    
00004 (2), (4), (6), (9)
     == 'd' ==> 00004
     == 'e' ==> 00005
    
00005 (2, A, pre=2), (4, A, pre=4), (6, A, pre=6), (9)
     == 'f' ==> 00006
    
00006 (9)
     == 'f' ==> 00006
     == 'g' ==> 00007
    
00007 (9, A)
    

State 0:
  .entry:
    .from NONE:
  .drop_out:
    pos = lexeme_start_p + 1;  goto Failure;


State 1:
  .entry:
    .from 0:
  .drop_out:
     goto Pattern7;


State 2:
  .entry:
    .from 1:
  .drop_out:
    pos -= 1;  goto Pattern7;


State 3:
  .entry:
    .from 2:
  .drop_out:
    if PreContext_1:  goto Pattern1;
    else if PreContext_3:  goto Pattern3;
    else if PreContext_5:  goto Pattern5;
     goto Pattern8;


State 4:
  .entry:
    .from 3:
        position[PostContext_8]  = input_p;
        if 'PreContext_1': position[PostContext_1]  = input_p;
        if 'PreContext_3': position[PostContext_3]  = input_p;
        if 'PreContext_5': position[PostContext_5]  = input_p;
    .from 4:
  .drop_out:
    if PreContext_1: pos = position[PostContext_1] ; goto Pattern1;
    else if PreContext_3: pos = position[PostContext_3] ; goto Pattern3;
    else if PreContext_5: pos = position[PostContext_5] ; goto Pattern5;
    pos = position[PostContext_8] ; goto Pattern8;


State 5:
  .entry:
    .from 4:
  .drop_out:
    if PreContext_2:  goto Pattern2;
    else if PreContext_4:  goto Pattern4;
    else if PreContext_6:  goto Pattern6;
    else if PreContext_1: pos = position[PostContext_1] ; goto Pattern1;
    else if PreContext_3: pos = position[PostContext_3] ; goto Pattern3;
    else if PreContext_5: pos = position[PostContext_5] ; goto Pattern5;
    pos = position[PostContext_8] ; goto Pattern8;


State 6:
  .entry:
    .from 5:
        if 'PreContext_2': position[PostContext_2]  = input_p;
        if 'PreContext_4': position[PostContext_4]  = input_p;
        if 'PreContext_6': position[PostContext_6]  = input_p;
    .from 6:
  .drop_out:
    if PreContext_2: pos = position[PostContext_2] ; goto Pattern2;
    else if PreContext_4: pos = position[PostContext_4] ; goto Pattern4;
    else if PreContext_6: pos = position[PostContext_6] ; goto Pattern6;
    else if PreContext_1: pos = position[PostContext_1] ; goto Pattern1;
    else if PreContext_3: pos = position[PostContext_3] ; goto Pattern3;
    else if PreContext_5: pos = position[PostContext_5] ; goto Pattern5;
    pos = position[PostContext_8] ; goto Pattern8;


State 7:
  .entry:
    .from 6:
  .drop_out:
     goto Pattern9;


State 0:
        [MATCH_FAILURE]: NONE/set([0L])

State 1:
        [      7]: NONE/set([1L])

State 2:
        [      7]: NONE/set([1L])

State 3:
        [      1]: 1/set([3L])
        [      3]: 3/set([3L])
        [      5]: 5/set([3L])
        [      8]: NONE/set([3L])

State 4:
    (*) [      1]: 1/set([3L])
    (*) [      3]: 3/set([3L])
    (*) [      5]: 5/set([3L])
    (*) [      8]: NONE/set([3L])

State 5:
    (*) [      1]: 1/set([3L])
        [      2]: 2/set([5L])
    (*) [      3]: 3/set([3L])
        [      4]: 4/set([5L])
    (*) [      5]: 5/set([3L])
        [      6]: 6/set([5L])
    (*) [      8]: NONE/set([3L])

State 6:
    (*) [      1]: 1/set([3L])
    (*) [      2]: 2/set([5L])
    (*) [      3]: 3/set([3L])
    (*) [      4]: 4/set([5L])
    (*) [      5]: 5/set([3L])
    (*) [      6]: 6/set([5L])
    (*) [      8]: NONE/set([3L])

State 7:
        [      9]: NONE/set([7L])


--- Optimized States ---

State 4:
  .entry:
    .from 3: position[PostContext_0]  = input_p;
    .from 4:
  .drop_out:
    if PreContext_1: pos = position[PostContext_0] ; goto Pattern1;
    else if PreContext_3: pos = position[PostContext_0] ; goto Pattern3;
    else if PreContext_5: pos = position[PostContext_0] ; goto Pattern5;
    pos = position[PostContext_0] ; goto Pattern8;


State 5:
  .entry:
    .from 4:
  .drop_out:
    if PreContext_2:  goto Pattern2;
    else if PreContext_4:  goto Pattern4;
    else if PreContext_6:  goto Pattern6;
    else if PreContext_1: pos = position[PostContext_0] ; goto Pattern1;
    else if PreContext_3: pos = position[PostContext_0] ; goto Pattern3;
    else if PreContext_5: pos = position[PostContext_0] ; goto Pattern5;
    pos = position[PostContext_0] ; goto Pattern8;


State 6:
  .entry:
    .from 5:
        if 'PreContext_2': position[PostContext_1]  = input_p;
        if 'PreContext_4': position[PostContext_1]  = input_p;
        if 'PreContext_6': position[PostContext_1]  = input_p;
    .from 6:
  .drop_out:
    if PreContext_2: pos = position[PostContext_1] ; goto Pattern2;
    else if PreContext_4: pos = position[PostContext_1] ; goto Pattern4;
    else if PreContext_6: pos = position[PostContext_1] ; goto Pattern6;
    else if PreContext_1: pos = position[PostContext_0] ; goto Pattern1;
    else if PreContext_3: pos = position[PostContext_0] ; goto Pattern3;
    else if PreContext_5: pos = position[PostContext_0] ; goto Pattern5;
    pos = position[PostContext_0] ; goto Pattern8;


